╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██             [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.2.0] - THE ARCHITECTURAL REFACTOR - 2025-08-07             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       [0.1.0] - 2025-08-05                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝