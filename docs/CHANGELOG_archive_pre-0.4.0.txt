╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██          [0.5.0] - ARCHITECTURAL UNIFICATION - 2025-08-10            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version completes a foundational architectural refactor,           ║
║      unifying the player and boss state machines, introducing a robust       ║
║      interface-based damage system, and fully decoupling all entity          ║ 
║      components to create a highly scalable and maintainable codebase.       ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Introduced a robust, interface-based damage system (`IDamageable`)  ║
║      ░   to formalize how entities receive damage, replacing fragile,        ║
║      ░   string-based lookups with a type-safe contract.                     ║
║      ░ ■ Created a new `CombatUtils` singleton to provide a robust,          ║
║      ░   tree-traversing utility for finding `HealthComponent` nodes from any║
║      ░   physics collider, eliminating brittle `get_node` lookups.           ║
║      ░ ■ Decoupled `CombatComponent` from the `Player` by replacing direct   ║
║      ░   state and velocity mutation with a `pogo_bounce_requested` signal,  ║
║      ░   adhering to the Dependency Inversion Principle.                     ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, providing a single, robust API for navigation.    ║
║      ░ ■ Implemented state validation in `PlayerStateData` and `BossStateData`║
║      ░   using property setters. This makes the data resources self-validating
║      ░   and prevents invalid states (e.g., health > max_health).            ║
║      ░ ■ Created a formal `ComponentInterface` to act as a standardized      ║
║      ░   blueprint for all entity components, enforcing a consistent API.    ║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource,         ║
║      ░   eliminating the "dual architecture" of stateful singletons. All     ║
║      ░   runtime state is now consistently managed through `Resource` objects.║
║      ░ ■ Replaced the JSON-based `Config.gd` system with a type-safe,        ║
║      ░   `Resource`-based system (`CombatConfig.tres` and `CombatDB.gd`).    ║
║      ░   This provides compile-time safety against typos and enables direct  ║
║      ░   gameplay value tuning in the Godot editor's Inspector.              ║
║      ░ ■ Refactored the Player's state machine to load its state scripts at  ║
║      ░   runtime in `_ready()` instead of using `preload()`. This breaks a   ║
║      ░   brittle parse-time dependency cycle, making the game's startup      ║
║      ░   sequence significantly more robust.                                 ║
║      ░ ■ Further refined the `src/core` directory structure, creating new    ║
║      ░   subdirectories for typed configs and events (`data/config`, `events/typed_events`).║
║      ░ ■ Standardized script filenames to snake_case (e.g., `Config.gd` ->   ║
║      ░   `config.gd`) for project-wide consistency.                          ║
║      ░ ■ Reorganized the monolithic `src` directory into purpose-driven      ║
║      ░   subdirectories (`building`, `data`, `systems`, `util`, etc.) to     ║
║      ░   improve project modularity and scalability.                         ║
║      ░ ■ Simplified the global `EventBus` by removing unused features like   ║
║      ░   the priority system and `emit_async`, resulting in a leaner         ║
║      ░   implementation.                                                     ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the Player to use the new `BaseStateMachine`, simplifying║
║      ░   the main `player.gd` script and delegating all state logic.         ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities and  ║
║      ░   removing the final piece of duplicated state logic.                 ║
║      ░ ■ Decoupled all Components from their owners by passing dependencies  ║
║      ░   (data resources, other components) explicitly through a dictionary  ║
║      ░   in the `setup()` method, adhering to Dependency Inversion.          ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities.     ║
║      ░ ■ Simplified the `EventBus` API by removing the unused `_source`      ║
║      ░   parameter from the `emit` function.                                 ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Renamed `HealthComponent.take_damage` to `apply_damage` to          ║
║      ░   conform to the new interface contract.                              ║
║      ░ ■ Refactored `CombatUtils` to find any `IDamageable` node, not just   ║
║      ░   a `HealthComponent`.                                                ║
║      ░ ■ Updated all damage sources (projectiles, melee, pogo, contact)      ║
║      ░   to use the new `CombatUtils.find_damageable` method.                ║
║      ░ ■ Refactored all UI screens and core game scripts to use the new      ║
║      ░   `SceneManager`, removing scattered `get_tree().change_scene` calls. ║
║      ░ ■ Refactored `HealthComponent` to initialize the new self-validating  ║
║      ░   data resources, simplifying its internal logic.                     ║
║      ░ ■ Refactored `CombatComponent` and `InputComponent` to extend the new ║
║      ░   `ComponentInterface`, standardizing the entire component architecture.║
║      ░ ■ Updated `player.gd` to use the standardized `setup` and `teardown`  ║
║      ░   methods for all its components.                                     ║
║      ░ ■ Refactored `HealthComponent` to extend the new `ComponentInterface` ║
║      ░   and use a more robust `is_in_group` check for its setup logic.      ║
║      ░ ■ Reorganized `AssetPaths.gd` by feature/system for improved clarity. ║
║      ░ ■ Added a validation system to `AssetPaths.gd` that checks for missing║
║      ░   files at startup, preventing runtime "file not found" errors.       ║
║      ░ ■ Added validation to `Settings.gd` property setters to clamp audio   ║
║      ░   volume values, making the system more robust against invalid data.  ║
║      ░ ■ Cleaned up all remaining GDScript static analysis warnings          ║
║      ░   (`UNUSED_PARAMETER`, `SHADOWED_VARIABLE`) for a clean build.        ║
║      ░ ■ Removed dead/broken event definitions from `EventCatalog` and       ║
║      ░   removed the corresponding broken logic from `EncounterDirector`.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Added placeholder `README.md` and `DEPRECATION.md` files to `core`, ║
║      ░   `entities`, and `docs` to establish a documentation framework.      ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Improved header comments in `Constants.gd` and `PhysicsLayers.gd`   ║
║      ░   to clarify their intended purpose and prevent architectural drift.  ║
║      ░ ■ Completed Sprint 0 architectural audit.                             ║
║      ░ ■ Added `docs/sprint_0_audit` directory to house analysis files.      ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Added `ADR-001` to formally document the existing Service Locator pattern.║
║      ░ ■ Added `FSM-001` to diagram the Player and Boss state machines.      ║
║      ░ ■ Created placeholder documents for testing (`TEST-*`) and refactoring║
║      ░   principles (`ARCH-*`) to guide future sprints.                      ║
║      ░ ■ Added `ADR-002_Communication_Patterns.md` to formally document the  ║
║      ░   project's standard for using Godot Signals (local communication)   ║
║      ░   vs. the EventBus (global communication).                            ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex series of bugs causing the pogo mechanic to be   ║
║      ░   unreliable. The attack now consistently damages the boss, bounces off║
║      ░   projectiles, and can be executed repeatedly on the ground without   ║
║      ░   "misfiring".                                                        ║
║      ░ ■ Unified the ground and air pogo logic into a single, physics-driven ║
║      ░   system that correctly handles all valid bounce surfaces (enemies,   ║
║      ░   projectiles, and world geometry).                                   ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   the player to seamlessly transition between bouncing and landing.   ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to detect and destroy projectiles.            ║
║      ░ ■ Resolved a memory leak by ensuring the `GameManager` frees its      ║
║      ░   `GameStateData` resource in `_exit_tree`.                           ║
║      ░ ■ Fixed a critical parse error by removing a conflicting `class_name` ║
║      ░   from the `SceneManager` autoload script.                            ║
║      ░ ■ Added missing `max_health` property to `BossStateData` to resolve a ║
║      ░   crash when the boss took damage.                                    ║
║      ░ ■ Resolved a crash caused by using the non-existent `has()` method in ║
║      ░   `HealthComponent`; replaced with a more robust `is_in_group()` check.║
║      ░ ■ Corrected invalid GDScript 4 dictionary access syntax in `player.gd`.║
║      ░ ■ Removed the invalid `override` keyword from `HealthComponent`, which ║
║      ░   was causing a critical parse error.                                 ║
║      ░ ■ Corrected the argument order in `HealthComponent.setup` calls to    ║
║      ░   match the newly defined `ComponentInterface` contract.              ║
║      ░ ■ Resolved a parse-time dependency error by ensuring `GameStateData`  ║
║      ░   is loaded at runtime in `GameManager`, preventing a startup crash.  ║
║      ░ ■ Resolved a cascade of parse errors by correcting the implementation ║
║      ░   of the new `CombatConfig` resource and refactoring dependent scripts.║
║      ░ ■ Corrected multiple typos and syntax errors in player state scripts  ║
║      ░   (`state_attack.gd`, `state_hurt.gd`, `state_wall_slide.gd`) that    ║
║      ░   were causing crashes during gameplay.                               ║
║      ░ ■ Updated all autoload paths in `project.godot` to reflect the new    ║
║      ░   `core` directory structure, resolving all 'File not found' errors.  ║
║      ░ ■ Fixed a critical race condition where player contact damage could   ║
║      ░   interrupt a pogo attack, preventing the pogo from dealing damage.   ║
║      ░ ■ Resolved a critical bug where the Player and Boss would receive the ║
║      ░   wrong invincibility durations. Moved `add_to_group()` to the top of ║
║      ░   `_ready()` to ensure entities are correctly identified before their ║
║      ░   components are configured.                                          ║
║      ░ ■ Restored player knockback and invincibility, which were failing due ║
║      ░   to the incorrect invincibility timer.                               ║
║      ░ ■ The `Hurt` state now correctly uses its own short `knockback_timer` ║
║      ░   for stun duration, decoupled from the longer invincibility timer.   ║
║      ░ ■ Implemented robust `teardown` methods in the state machine and all  ║
║      ░   components to prevent potential memory leaks from cyclic references.║
║      ░ ■ Corrected all calls to `EventBus.emit` to match the new, simpler    ║
║      ░   2-argument signature, resolving a crash.                            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██             [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.2.0] - THE ARCHITECTURAL REFACTOR - 2025-08-07             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       [0.1.0] - 2025-08-05                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

