+---------------------------------+
|       B O X  B A T T L E        |
|  Godot Project Source Context   |
+---------------------------------+
Generated on: Thu Aug 14 16:20:06 CDT 2025

=====================================
PROJECT DIRECTORY STRUCTURE:
=====================================
.
├── README.md
├── data
│   └── combat_config.tres
├── default_bus_layout.tres
├── docs
│   ├── ARCHITECTURE.txt
│   ├── ARENA_CONCEPTS.txt
│   ├── ASSETS.txt
│   ├── BRAINSTORM.txt
│   ├── BUGS.txt
│   ├── CHANGELOG.txt
│   ├── CHANGELOG_archive_pre-0.7.0.txt
│   ├── DEPRECATION.md
│   ├── DESIGN.txt
│   ├── DOCS_PROTOCOL.txt
│   ├── LICENSE
│   ├── PLAYTESTING.txt
│   ├── ROADMAP.txt
│   ├── TODO.txt
│   ├── all_godot_source_code.txt
│   ├── all_script_errors.txt
│   ├── create_all_godot_source_code_txt.command
│   ├── create_all_godot_source_code_txt.sh
│   ├── last_commit_command.txt
│   └── sprint_0_audit
│       ├── ADR-002_Communication_Patterns.md
│       ├── ADR.md
│       ├── ADR.mdADR-001_Service_Locator_Pattern.md
│       ├── ARCH-001_Refactoring_Principles.md
│       ├── ARCH-002_Acceptance_Criteria.md
│       ├── EVENT-001_Event_Flow_Map.md
│       ├── FSM-001_Entity_State_Flows.md
│       ├── TEST-001_Baseline_Metrics.md
│       ├── TEST-002_Smoke_Tests.md
│       ├── TEST-003_Regression_Checklist.md
│       ├── config_usage.txt
│       ├── event_usage.txt
│       ├── singleton_map.txt
│       └── state_machine_flow.md
├── icon.svg
├── pico.save
├── progess
│   └── progress_001-1.jpg
├── project.godot
└── src
    ├── api
    │   ├── combat
    │   │   ├── damage_info.gd
    │   │   └── damage_result.gd
    │   └── interfaces
    │       ├── component_interface.gd
    │       └── i_damageable.gd
    ├── arenas
    │   ├── arena_00_encounter.gd
    │   └── arena_00_layout.gd
    ├── core
    │   ├── DEPRECATION.md
    │   ├── README.md
    │   ├── building
    │   │   ├── arena_builder.gd
    │   │   ├── level_build_data.gd
    │   │   ├── level_parser.gd
    │   │   └── terrain_builder.gd
    │   ├── data
    │   │   ├── combat_db.gd
    │   │   ├── config
    │   │   │   ├── combat_config.gd
    │   │   │   └── settings.gd
    │   │   └── game_state_data.gd
    │   ├── events
    │   │   ├── event_bus.gd
    │   │   ├── event_catalog.gd
    │   │   └── typed_events
    │   │       ├── boss_health_changed_event.gd
    │   │       ├── player_healing_charges_changed_event.gd
    │   │       └── player_health_changed_event.gd
    │   ├── sequencing
    │   │   ├── sequence_handle.gd
    │   │   ├── sequence_step.gd
    │   │   ├── sequencer.gd
    │   │   └── steps
    │   │       ├── callable_step.gd
    │   │       ├── emit_step.gd
    │   │       └── wait_step.gd
    │   ├── systems
    │   │   ├── audio_manager.gd
    │   │   ├── camera_manager.gd
    │   │   ├── cursor_manager.gd
    │   │   ├── game_manager.gd
    │   │   ├── object_pool.gd
    │   │   └── scene_manager.gd
    │   └── util
    │       ├── asset_paths.gd
    │       ├── combat_utils.gd
    │       ├── constants.gd
    │       ├── grid_utils.gd
    │       ├── identifiers.gd
    │       ├── palette.gd
    │       ├── physics_layers.gd
    │       └── scene_validator.gd
    ├── entities
    │   ├── README.md
    │   ├── boss
    │   │   ├── attack_patterns
    │   │   │   ├── attack_pattern.gd
    │   │   │   ├── lunge_attack.tres
    │   │   │   ├── single_shot.tres
    │   │   │   └── volley_shot.tres
    │   │   ├── base_boss.gd
    │   │   ├── base_boss.tscn
    │   │   ├── boss_state_data.gd
    │   │   └── states
    │   │       ├── state_boss_attack.gd
    │   │       ├── state_boss_cooldown.gd
    │   │       ├── state_boss_idle.gd
    │   │       ├── state_boss_lunge.gd
    │   │       └── state_boss_patrol.gd
    │   ├── components
    │   │   ├── armor_component.gd
    │   │   ├── base_state.gd
    │   │   ├── base_state_machine.gd
    │   │   ├── combat_component.gd
    │   │   ├── health_component.gd
    │   │   ├── input_component.gd
    │   │   ├── telegraph_component.gd
    │   │   └── telegraph_component.tscn
    │   ├── minions
    │   │   ├── states
    │   │   │   ├── state_turret_attack.gd
    │   │   │   └── state_turret_idle.gd
    │   │   ├── turret.gd
    │   │   ├── turret.tscn
    │   │   └── turret_state_data.gd
    │   └── player
    │       ├── data
    │       │   ├── forward_attack_shape.tres
    │       │   ├── player_state_data.gd
    │       │   └── upward_attack_shape.tres
    │       ├── player.gd
    │       ├── player.tscn
    │       └── states
    │           ├── state_attack.gd
    │           ├── state_dash.gd
    │           ├── state_fall.gd
    │           ├── state_heal.gd
    │           ├── state_hurt.gd
    │           ├── state_jump.gd
    │           ├── state_move.gd
    │           └── state_wall_slide.gd
    ├── projectiles
    │   ├── boss_shot.gd
    │   ├── boss_shot.tscn
    │   ├── player_shot.gd
    │   ├── player_shot.tscn
    │   ├── turret_shot.gd
    │   └── turret_shot.tscn
    ├── scenes
    │   ├── dev
    │   │   ├── gui_controls_menu.gd
    │   │   ├── gui_controls_menu.tscn
    │   │   ├── gui_credits_menu.gd
    │   │   ├── gui_credits_menu.tscn
    │   │   ├── gui_mute_button.gd
    │   │   ├── gui_mute_button.tscn
    │   │   ├── gui_options_menu.gd
    │   │   ├── gui_options_menu.tscn
    │   │   ├── gui_sound_menu.gd
    │   │   ├── gui_sound_menu.tscn
    │   │   ├── gui_title_screen.gd
    │   │   ├── gui_title_screen.tscn
    │   │   ├── test_title_screen.gd
    │   │   ├── test_title_screen.tscn
    │   │   ├── test_ui.gd
    │   │   └── test_ui.tscn
    │   ├── game
    │   │   ├── game.gd
    │   │   └── game.tscn
    │   ├── loading
    │   │   ├── loading_screen.gd
    │   │   └── loading_screen.tscn
    │   └── main
    │       ├── main.gd
    │       └── main.tscn
    └── ui
        ├── components
        │   ├── custom_slider
        │   │   └── custom_slider.gd
        │   ├── logo_display
        │   │   ├── logo_display.gd
        │   │   └── logo_display.tscn
        │   └── styled_menu_item
        │       ├── styled_menu_item.gd
        │       └── styled_menu_item.tscn
        ├── game_hud
        │   ├── game_hud.gd
        │   └── game_hud.tscn
        ├── global_hud
        │   ├── global_hud.gd
        │   └── global_hud.tscn
        ├── menu_manager
        │   └── menu_manager.gd
        └── screens
            ├── controls_menu
            │   ├── controls_menu.gd
            │   └── controls_menu.tscn
            ├── credits_menu
            │   ├── credits_menu.gd
            │   └── credits_menu.tscn
            ├── game_over_screen
            │   ├── game_over_screen.gd
            │   └── game_over_screen.tscn
            ├── options_menu
            │   ├── options_menu.gd
            │   └── options_menu.tscn
            ├── sound_menu
            │   ├── sound_menu.gd
            │   └── sound_menu.tscn
            ├── title_screen
            │   ├── title_screen.gd
            │   └── title_screen.tscn
            └── victory_screen
                ├── victory_screen.gd
                └── victory_screen.tscn

52 directories, 172 files


=====================================
FILE: ./docs/TODO.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ████████╗ ██████╗ ██████╗  ██████╗                                         ║
║   ╚══██╔══╝██╔═══██╗██╔══██╗██╔═══██╗                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ╚██████╔╝██████╔╝╚██████╔╝                                        ║
║      ╚═╝    ╚═════╝ ╚═════╝  ╚═════╝                                         ║
║                                                                              ║
║                  Immediate Work Items & Actionable Tasks                     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PHASE 1: PUT TITLE HERE                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                     INDEFINITELY DEFERRED TASKS                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of lower-priority goals to be addressed after the core loop is solid.║
║                                                                              ║
║   □  Pogo-Fall Prevention                                                    ║
║      ░  WHY: To prevent the frustrating experience of accidentally fast-falling║
║      ░  immediately after a successful pogo bounce.                          ║
║      ░  HOW: In the `Player` script, after a successful pogo, start a very   ║
║      ░  short timer (e.g., 0.1s) during which the "fast-fall" input is ignored.║
║                                                                              ║
║   □  UI Overhaul                                                             ║
║      ░  □ Refactor all procedural menus to use Godot's built-in `Container`  ║
║      ░    nodes (`VBoxContainer`, etc.) to fix layout bugs like `BUG-UI001`. ║
║      ░  □ Create the cornerstone `StyledMenuItem` visual component.          ║
║                                                                              ║
║   ░  Diegetic UI Implementation                                              ║
║   ░  Dynamic Music Layering System                                           ║
║   ░  Adaptive Boss AI Tactics Layer                                          ║
║   ░  Player Loadout System                                                   ║
║   ░  Special Game Modes (Boss Rush, Time Attack)                             ║
║   ░  Cleanup or remove `test_ui` scene and related dev assets.               ║
║   ░  Screen Shake (Deferred to avoid visual noise during debugging)          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/CHANGELOG_archive_pre-0.7.0.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.7.0] - DATA-DRIVEN ARCHITECTURE - 2025-08-13            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version completes the transformation to a fully data-driven        ║
║      architecture, implements robust memory management patterns, and         ║ 
║      enhances the combat system with distance-based mechanics and            ║
║      comprehensive scene validation tools.                                   ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Unified the project's configuration system to be exclusively driven ║
║      ░   by the `CombatDB` singleton and its `CombatConfig.tres` Resource.   ║
║      ░   All legacy `Config.gd` calls have been removed for consistency.     ║
║      ░ ■ Converted all gameplay tuning data into editor-friendly Resources   ║
║      ░   with `@export_group` and `@export_range` hints for designer-friendly║
║      ░   UI in the Godot Inspector.                                          ║
║      ░ ■ Refactored the `BaseBoss` to be fully data-driven, with attack      ║
║      ░   patterns for each phase assigned via exported arrays in Inspector,  ║
║      ░   decoupling boss design from hard-coded script paths.                ║
║      ░ ■ Unified the state machine architecture to be purely object-based,   ║
║      ░   removing inconsistent lifecycle logic and implementing formal       ║
║      ░   `teardown` patterns to prevent memory leaks and cyclic references.  ║
║      ░ ■ Created a central, static `SceneValidator` utility to house all     ║
║      ░   in-editor validation logic, adhering to the DRY principle.          ║
║      ░ ■ Hardened the `Sequencer` by adding a `cancel_all()` method called   ║
║      ░   by `SceneManager` during scene transitions, preventing sequences    ║
║      ░   from running across scenes.                                         ║
║      ░ ■ Hardened the `ObjectPool` against race conditions by deferring the  ║
║      ░   deactivation of returned instances to prevent same-frame access.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a two-tier melee hitbox system using distance-based     ║
║      ░   damage calculation, rewarding close-range attacks with higher damage║
║      ░   while maintaining a single, wide hitbox for better usability.       ║
║      ░ ■ The melee hitbox now dynamically changes shape and position for     ║
║      ░   upward attacks, ensuring precise square coverage above the player.  ║
║      ░ ■ Implemented in-editor scene validation for `BaseBoss` with warning  ║
║      ░   icons in the Scene Tree when required component nodes are missing.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Reverted experimental attack and dash input buffering after         ║
║      ░   playtesting revealed it negatively impacted the precise, deliberate ║
║      ░   combat feel. Retained the existing responsive input model.          ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Hardened the player's pogo attack physics query to correctly iterate║
║      ░   through all potential targets to find valid `IDamageable` objects,  ║
║      ░   making the mechanic more reliable against complex colliders.        ║
║      ░ ■ Resolved a critical race condition where the `ArenaBuilder` could   ║
║      ░   finish building before the boss intro sequence spawned the boss by  ║
║      ░   correctly awaiting a `SequenceHandle`.                              ║
║      ░ ■ Correctly configured all projectile scenes with necessary metadata  ║
║      ░   to ensure proper return to `ObjectPool` instead of deletion,        ║
║      ░   preventing performance degradation.                                 ║
║      ░ ■ Resolved a visual regression where boss phase indicators on the Game║
║      ░   HUD were not initialized correctly with more performant styling.    ║
║      ░ ■ Resolved a "modulo by zero" crash in the boss's idle state by adding║
║      ░   guard clauses for cases where no attack patterns are assigned.      ║
║      ░ ■ Resolved a critical race condition that caused crashes when Turret  ║
║      ░   minions were destroyed.                                             ║
║      ░ ■ Corrected resource loading errors caused by duplicated UIDs in      ║
║      ░   `base_boss.tscn` and `combat_config.tres` files.                    ║
║      ░ ■ Fixed asset database corruption by manually removing corrupted UID  ║
║      ░   references, allowing Godot's importer to re-establish correct links.║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Formalized the project's official Dependency Injection pattern in   ║
║      ░   `ARCHITECTURE.txt` as "Owner-Driven Injection" within entity        ║
║      ░   `_ready()` functions, leveraging Godot's lifecycle guarantees.      ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.6.0] - DYNAMIC ENCOUNTERS - 2025-08-11                 ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version introduces dynamic multi-phase boss encounters, minion     ║
║      support, widescreen compatibility, and comprehensive visual and         ║
║      performance improvements to create engaging, scalable combat scenarios. ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Hardened the `Sequencer` to return a `SequenceHandle`, allowing     ║
║      ░   cinematic sequences to be safely cancelled to prevent state bugs.   ║
║      ░ ■ Hardened the `ObjectPool` by replacing fragile, name-based node     ║
║      ░   lookups with direct references, making the system more robust.      ║
║      ░ ■ Decoupled game logic from screen resolution by creating `GridUtils` ║
║      ░   singleton to handle conversions between tile and world coordinates. ║
║      ░ ■ Implemented `CameraManager` to dynamically fit camera to arena's    ║
║      ░   logical size, enabling support for non-square aspect ratios.        ║
║      ░ ■ Enhanced `TerrainBuilder` to procedurally fill the entire camera    ║
║      ░   viewport with background tiles, creating seamless play areas.       ║
║      ░ ■ Created data-driven `AttackPattern` resources, allowing boss attack ║
║      ░   properties to be designed and tuned in the editor instead of        ║
║      ░   being hard-coded in scripts.                                        ║
║      ░ ■ Implemented reusable `TelegraphComponent` scene to provide consistent║
║      ░   visual warnings for all enemy attacks with context-aware displays.  ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented dynamic, three-phase boss fight system where bosses     ║
║      ░   become more aggressive as health decreases, using faster cooldowns  ║
║      ░   and complex attack patterns in later phases.                        ║
║      ░ ■ Added real-time phase indicator icons to Game HUD that visually     ║
║      ░   represent the boss's current phase and deplete right-to-left.       ║
║      ░ ■ Created templated boss death sequence using `Sequencer` for         ║
║      ░   cinematic pause before victory screen appears.                      ║
║      ░ ■ Implemented `ArmorComponent` to allow phases of boss invulnerability,║
║      ░   supporting "armored lunge" attacks where boss becomes invulnerable  ║
║      ░   and performs high-speed dashes across the arena.                    ║
║      ░ ■ Implemented "Turret" minion enemy system with stationary enemies    ║
║      ░   that detect players and fire projectiles, proving reusability of    ║
║      ░   unified state machine and component architecture.                   ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Project display settings updated to widescreen 16:9 (1920x1080)    ║
║      ░   from previous 1000x1000 square format for modern display support.   ║
║      ░ ■ Refactored `BaseBoss` and state machine to be fully data-driven,    ║
║      ░   with `AttackState` reading `AttackPattern` resources and `IdleState`║
║      ░   responsible for pattern selection.                                  ║
║      ░ ■ Enhanced Player's dash mechanic with momentum cancellation at end   ║
║      ░   for precise "hard stop" feel and controlled aerial maneuvers.       ║
║      ░ ■ `HealthComponent` now detects health threshold crossings and emits  ║
║      ░   signals for phase transitions, and is "armor-aware" to check for    ║
║      ░   active `ArmorComponent` before applying damage.                     ║
║      ░ ■ Encounter system upgraded to support spawning lists of minions from ║
║      ░   level layout files in addition to main bosses.                      ║
║      ░ ■ Refactored procedural UI menus to use container nodes for better    ║
║      ░   resizing behavior across different aspect ratios.                   ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved potential memory leak in `EventBus` by implementing        ║
║      ░   self-cleaning mechanism that automatically prunes dead subscriptions║
║      ░   during emit cycles.                                                 ║
║      ░ ■ Corrected several `async`/`await` errors in `Sequencer` and         ║
║      ░   `CallableStep` to ensure reliable execution of async functions.     ║
║      ░ ■ Resolved long-standing visual bug where debug collision shapes were ║
║      ░   incorrectly culled at viewport edges by correcting engine's update  ║
║      ░   order in `game.gd` scene.                                           ║
║      ░ ■ Replaced all `ColorRect` nodes used for in-world visuals with       ║
║      ░   `Polygon2D` nodes to prevent potential rendering conflicts.         ║
║      ░ ■ Fixed critical race condition where killing boss would not trigger  ║
║      ░   victory screen by moving logic to global `EventBus`.                ║
║      ░ ■ Resolved "zombie attack" bug where boss could still fire projectiles║
║      ░   after dying by adding `_is_dead` state flag.                        ║
║      ░ ■ Fixed bug where active projectiles persisted across scene           ║
║      ░   transitions by adding global reset function to `ObjectPool`.        ║
║      ░ ■ Resolved bug where turrets stopped firing after few shots by        ║
║      ░   refactoring state machine logic to be continuous rather than        ║
║      ░   reliant on one-shot `await` calls in enter functions.               ║
║      ░ ■ Fixed critical bug where projectiles were permanently deleted       ║
║      ░   instead of returned to `ObjectPool` by creating dedicated           ║
║      ░   `TurretShot` scene with correct pooling metadata.                   ║
║      ░ ■ Addressed several minor UI layout bugs for better consistency       ║
║      ░   across different screen resolutions.                                ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██          [0.5.0] - ARCHITECTURAL UNIFICATION - 2025-08-10            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version completes a foundational architectural refactor,           ║
║      unifying the player and boss state machines, introducing a robust       ║
║      interface-based damage system, and fully decoupling all entity          ║ 
║      components to create a highly scalable and maintainable codebase.       ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Introduced a robust, interface-based damage system (`IDamageable`)  ║
║      ░   to formalize how entities receive damage, replacing fragile,        ║
║      ░   string-based lookups with a type-safe contract.                     ║
║      ░ ■ Created a new `CombatUtils` singleton to provide a robust,          ║
║      ░   tree-traversing utility for finding `HealthComponent` nodes from any║
║      ░   physics collider, eliminating brittle `get_node` lookups.           ║
║      ░ ■ Decoupled `CombatComponent` from the `Player` by replacing direct   ║
║      ░   state and velocity mutation with a `pogo_bounce_requested` signal,  ║
║      ░   adhering to the Dependency Inversion Principle.                     ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, providing a single, robust API for navigation.    ║
║      ░ ■ Implemented state validation in `PlayerStateData` and `BossStateData`║
║      ░   using property setters. This makes the data resources self-validating
║      ░   and prevents invalid states (e.g., health > max_health).            ║
║      ░ ■ Created a formal `ComponentInterface` to act as a standardized      ║
║      ░   blueprint for all entity components, enforcing a consistent API.    ║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource,         ║
║      ░   eliminating the "dual architecture" of stateful singletons. All     ║
║      ░   runtime state is now consistently managed through `Resource` objects.║
║      ░ ■ Replaced the JSON-based `Config.gd` system with a type-safe,        ║
║      ░   `Resource`-based system (`CombatConfig.tres` and `CombatDB.gd`).    ║
║      ░   This provides compile-time safety against typos and enables direct  ║
║      ░   gameplay value tuning in the Godot editor's Inspector.              ║
║      ░ ■ Refactored the Player's state machine to load its state scripts at  ║
║      ░   runtime in `_ready()` instead of using `preload()`. This breaks a   ║
║      ░   brittle parse-time dependency cycle, making the game's startup      ║
║      ░   sequence significantly more robust.                                 ║
║      ░ ■ Further refined the `src/core` directory structure, creating new    ║
║      ░   subdirectories for typed configs and events (`data/config`, `events/typed_events`).║
║      ░ ■ Standardized script filenames to snake_case (e.g., `Config.gd` ->   ║
║      ░   `config.gd`) for project-wide consistency.                          ║
║      ░ ■ Reorganized the monolithic `src` directory into purpose-driven      ║
║      ░   subdirectories (`building`, `data`, `systems`, `util`, etc.) to     ║
║      ░   improve project modularity and scalability.                         ║
║      ░ ■ Simplified the global `EventBus` by removing unused features like   ║
║      ░   the priority system and `emit_async`, resulting in a leaner         ║
║      ░   implementation.                                                     ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the Player to use the new `BaseStateMachine`, simplifying║
║      ░   the main `player.gd` script and delegating all state logic.         ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities and  ║
║      ░   removing the final piece of duplicated state logic.                 ║
║      ░ ■ Decoupled all Components from their owners by passing dependencies  ║
║      ░   (data resources, other components) explicitly through a dictionary  ║
║      ░   in the `setup()` method, adhering to Dependency Inversion.          ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities.     ║
║      ░ ■ Simplified the `EventBus` API by removing the unused `_source`      ║
║      ░   parameter from the `emit` function.                                 ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Renamed `HealthComponent.take_damage` to `apply_damage` to          ║
║      ░   conform to the new interface contract.                              ║
║      ░ ■ Refactored `CombatUtils` to find any `IDamageable` node, not just   ║
║      ░   a `HealthComponent`.                                                ║
║      ░ ■ Updated all damage sources (projectiles, melee, pogo, contact)      ║
║      ░   to use the new `CombatUtils.find_damageable` method.                ║
║      ░ ■ Refactored all UI screens and core game scripts to use the new      ║
║      ░   `SceneManager`, removing scattered `get_tree().change_scene` calls. ║
║      ░ ■ Refactored `HealthComponent` to initialize the new self-validating  ║
║      ░   data resources, simplifying its internal logic.                     ║
║      ░ ■ Refactored `CombatComponent` and `InputComponent` to extend the new ║
║      ░   `ComponentInterface`, standardizing the entire component architecture.║
║      ░ ■ Updated `player.gd` to use the standardized `setup` and `teardown`  ║
║      ░   methods for all its components.                                     ║
║      ░ ■ Refactored `HealthComponent` to extend the new `ComponentInterface` ║
║      ░   and use a more robust `is_in_group` check for its setup logic.      ║
║      ░ ■ Reorganized `AssetPaths.gd` by feature/system for improved clarity. ║
║      ░ ■ Added a validation system to `AssetPaths.gd` that checks for missing║
║      ░   files at startup, preventing runtime "file not found" errors.       ║
║      ░ ■ Added validation to `Settings.gd` property setters to clamp audio   ║
║      ░   volume values, making the system more robust against invalid data.  ║
║      ░ ■ Cleaned up all remaining GDScript static analysis warnings          ║
║      ░   (`UNUSED_PARAMETER`, `SHADOWED_VARIABLE`) for a clean build.        ║
║      ░ ■ Removed dead/broken event definitions from `EventCatalog` and       ║
║      ░   removed the corresponding broken logic from `EncounterDirector`.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Added placeholder `README.md` and `DEPRECATION.md` files to `core`, ║
║      ░   `entities`, and `docs` to establish a documentation framework.      ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Improved header comments in `Constants.gd` and `PhysicsLayers.gd`   ║
║      ░   to clarify their intended purpose and prevent architectural drift.  ║
║      ░ ■ Completed Sprint 0 architectural audit.                             ║
║      ░ ■ Added `docs/sprint_0_audit` directory to house analysis files.      ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Added `ADR-001` to formally document the existing Service Locator pattern.║
║      ░ ■ Added `FSM-001` to diagram the Player and Boss state machines.      ║
║      ░ ■ Created placeholder documents for testing (`TEST-*`) and refactoring║
║      ░   principles (`ARCH-*`) to guide future sprints.                      ║
║      ░ ■ Added `ADR-002_Communication_Patterns.md` to formally document the  ║
║      ░   project's standard for using Godot Signals (local communication)   ║
║      ░   vs. the EventBus (global communication).                            ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex series of bugs causing the pogo mechanic to be   ║
║      ░   unreliable. The attack now consistently damages the boss, bounces off║
║      ░   projectiles, and can be executed repeatedly on the ground without   ║
║      ░   "misfiring".                                                        ║
║      ░ ■ Unified the ground and air pogo logic into a single, physics-driven ║
║      ░   system that correctly handles all valid bounce surfaces (enemies,   ║
║      ░   projectiles, and world geometry).                                   ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   the player to seamlessly transition between bouncing and landing.   ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to detect and destroy projectiles.            ║
║      ░ ■ Resolved a memory leak by ensuring the `GameManager` frees its      ║
║      ░   `GameStateData` resource in `_exit_tree`.                           ║
║      ░ ■ Fixed a critical parse error by removing a conflicting `class_name` ║
║      ░   from the `SceneManager` autoload script.                            ║
║      ░ ■ Added missing `max_health` property to `BossStateData` to resolve a ║
║      ░   crash when the boss took damage.                                    ║
║      ░ ■ Resolved a crash caused by using the non-existent `has()` method in ║
║      ░   `HealthComponent`; replaced with a more robust `is_in_group()` check.║
║      ░ ■ Corrected invalid GDScript 4 dictionary access syntax in `player.gd`.║
║      ░ ■ Removed the invalid `override` keyword from `HealthComponent`, which ║
║      ░   was causing a critical parse error.                                 ║
║      ░ ■ Corrected the argument order in `HealthComponent.setup` calls to    ║
║      ░   match the newly defined `ComponentInterface` contract.              ║
║      ░ ■ Resolved a parse-time dependency error by ensuring `GameStateData`  ║
║      ░   is loaded at runtime in `GameManager`, preventing a startup crash.  ║
║      ░ ■ Resolved a cascade of parse errors by correcting the implementation ║
║      ░   of the new `CombatConfig` resource and refactoring dependent scripts.║
║      ░ ■ Corrected multiple typos and syntax errors in player state scripts  ║
║      ░   (`state_attack.gd`, `state_hurt.gd`, `state_wall_slide.gd`) that    ║
║      ░   were causing crashes during gameplay.                               ║
║      ░ ■ Updated all autoload paths in `project.godot` to reflect the new    ║
║      ░   `core` directory structure, resolving all 'File not found' errors.  ║
║      ░ ■ Fixed a critical race condition where player contact damage could   ║
║      ░   interrupt a pogo attack, preventing the pogo from dealing damage.   ║
║      ░ ■ Resolved a critical bug where the Player and Boss would receive the ║
║      ░   wrong invincibility durations. Moved `add_to_group()` to the top of ║
║      ░   `_ready()` to ensure entities are correctly identified before their ║
║      ░   components are configured.                                          ║
║      ░ ■ Restored player knockback and invincibility, which were failing due ║
║      ░   to the incorrect invincibility timer.                               ║
║      ░ ■ The `Hurt` state now correctly uses its own short `knockback_timer` ║
║      ░   for stun duration, decoupled from the longer invincibility timer.   ║
║      ░ ■ Implemented robust `teardown` methods in the state machine and all  ║
║      ░   components to prevent potential memory leaks from cyclic references.║
║      ░ ■ Corrected all calls to `EventBus.emit` to match the new, simpler    ║
║      ░   2-argument signature, resolving a crash.                            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██             [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.2.0] - THE ARCHITECTURAL REFACTOR - 2025-08-07             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       [0.1.0] - 2025-08-05                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝



=====================================
FILE: ./docs/all_script_errors.txt
=====================================
Run in Box Battle folder for all errors in Terminal


"/Applications/Godot.app/Contents/MacOS/Godot" --verbose --check-only "/Users/stevencasteel/Desktop/GODOT/BOX BATTLE" > all_script_errors.txt


=====================================
FILE: ./docs/last_commit_command.txt
=====================================
git reset --hard origin/main

=====================================
FILE: ./docs/DESIGN.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗ ███████╗███████╗██╗ ██████╗ ███╗   ██╗                             ║
║   ██╔══██╗██╔════╝██╔════╝██║██╔════╝ ████╗  ██║                             ║
║   ██║  ██║█████╗  ███████╗██║██║  ███╗██╔██╗ ██║                             ║
║   ██║  ██║██╔══╝  ╚════██║██║██║   ██║██║╚██╗██║                             ║
║   ██████╔╝███████╗███████║██║╚██████╔╝██║ ╚████║                             ║
║   ╚═════╝ ╚══════╝╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝                             ║
║                                                                              ║
║      The official documentation for game mechanics and design philosophy.    ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         DESIGN PHILOSOPHY                            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Sublime Movement by Default: The player is given a complete, perfected, ║
║      and expressive moveset from the beginning. The joy of the game comes    ║
║      from mastering these tools, not from unlocking them.                    ║
║                                                                              ║
║   █  Aesthetic Minimalism, Technical Maximalism: The visual style will be    ║
║      clean, minimalist, and beautiful, inspired by high-end web design       ║
║      (e.g., Framer websites). We will use advanced shaders, procedural       ║
║      generation, and particle effects to create a polished, "expensive"      ║
║      look with elements like frosted glass, backlighting, and subtle gradients.║
║                                                                              ║
║   █  Robust, Maintainable Code: Development will adhere to the SOLID principles║
║      (Single Responsibility, Open/Closed, etc.) to ensure the codebase is    ║
║      scalable, easy to debug, and a pleasure to work on. We refactor first.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                           CORE MECHANICS                             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▓  Player Movement                                                         ║
║      ░ ■ Coyote Time & Jump Buffering for forgiving platforming.             ║
║      ░ ■ 4-directional Dash with a cooldown.                                 ║
║      ░ ■ Wall-Sliding and Wall-Jumping for verticality.                      ║
║      ░ ■ Fast-Fall: Holding 'Down' in the air increases gravity.             ║
║                                                                              ║
║   ▓  Combat System                                                           ║
║      ░ ■ Primary Melee: A fast, close-range attack.                          ║
║      ░ ■ Charged Shot: A long-range projectile attack.                       ║
║      ░ ■ Pogo Attack: A downward aerial attack that bounces on enemies.      ║
║      ░ ■ Dash Invincibility: The player cannot take damage during a dash.    ║
║                                                                              ║
║   ▓  Planned Combat Refinements                                              ║
║      ░ ■ Enhanced Melee Hitbox: The melee swing will have two hitboxes. The  ║
║      ░   inner box (close to the player) will deal 1.5x damage, rewarding    ║
║      ░   risky positioning. The outer box will deal 1.0x damage.             ║
║      ░ ■ Input Buffering: Attack and dash inputs will be buffered just like  ║
║      ░   the jump input, making the controls feel more responsive.           ║
║      ░ ■ Pogo-Fall Prevention: A brief window after a pogo will prevent      ║
║      ░   accidental fast-falling.                                            ║
║                                                                              ║
║   ▓  Health and Healing: The Determination System                            ║
║      ░  Healing is a resource earned by dealing damage. Landing hits fills a ║
║      ░  `determination_counter` to grant a `healing_charge`.                 ║
║                                                                              ║
║   ▓  Boss Design Template (The "Kitchen Sink")                               ║
║      ░  Our `base_boss` will be a template with a library of toggleable mechanics:║
║      ░  ■ Health Phases: Boss behavior and attacks change at health thresholds.║
║      ░  ■ Armor / Weak Points: Boss can enter armored states where it takes  ║
║      ░    no damage, punctuated by moments of vulnerability.                 ║
║      ░  ■ Clear Telegraphing: All attacks will be preceded by clear visual/audio║
║      ░    cues, ensuring tough but fair encounters.                          ║
║      ░  ■ Modular Movement: Bosses can be configured to fly, dash, jump, etc.║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 ARENA & BOSS BATTLE CONCEPTS                         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Each boss battle is a unique mechanical challenge inspired by a classic    ║
║   arcade game loop. The player's sublime moveset is the constant tool used to║
║   solve these varied combat puzzles.                                         ║
║                                                                              ║
║   ▒  Beat Box (Rhythm Game): Platforms appear/disappear on a musical beat.   ║
║   ▒  Sandbox (Momentum Vampirism): Boss steals player momentum on hit.       ║
║   ▒  Circuit Box (Tempest-like): Central core protected by rotating shields. ║
║   ▒  Garden Box (Centipede-like): Segmented boss weaves through obstacles.   ║
║   ▒  Traffic Box (Frogger-like): Cross "lanes" of projectiles to reach boss. ║
║   ▒  Gravity Box (Gravity Man-inspired): Gravity reverses periodically.      ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

DESIGN SUMMARY (core gameplay)
==============================

Purpose
-------
Capture the player-facing rules and important implementation decisions so designers and devs stay aligned.

Mechanics (short)
-----------------
- Movement: standard platformer ground & air with coyote time + jump buffering.
- Pogo: jump-on-enemy mechanic that bounces the player and applies damage to the enemy.
- Contact damage: mutual damage when entity collides with dangerous zones/actors — resolved through CombatUtils.
- Projectiles: use pooled nodes; projectiles are *DamageSource* emitters on hit.

Pogo — implementation notes
---------------------------
Goal: reliable, consistent damage application and deterministic bounce.

Canonical rules:
1. Pogo triggers when the player is moving downward and the player's pogo sensor area overlaps enemy hurtbox while the attack input or a pogo-frame confidence check is true.
2. On pogo hit:
   - Player receives a vertical impulse/bounce and may gain a brief invulnerability window.
   - Enemy receives damage via `CombatUtils.apply_damage(player, enemy, damage_info)`.
   - Use CombatUtils to de-duplicate or throttle repeated hits within the same physics tick.
3. Edge cases to watch:
   - Multiple damage sources on a single frame (ensure CombatUtils dedupes per damage hit-id).
   - Pogo while a boss is invulnerable (respect `is_invulnerable()`).

Jump buffering & coyote time
----------------------------
- Jump-buffer: store jump input for a short window (eg. 0.1s) to allow forgiving timing.
- Coyote time: allow jumping up to a short window after leaving ground (eg. 0.08s).
- Implemented in the player state machine as small time accumulators — prefer deterministic values stored in a `.tres` tuning resource.

Hit detection & damage flow
---------------------------
- Always route damage through CombatUtils; do not directly mutate HP from collision callbacks.
- DamageInfo shape (recommended):
  {
    "amount": int,
    "type": "physical" | "fire" | ...,
    "source": Node,           # optional reference
    "hit_id": String,         # optional dedupe id
    "knockback": Vector2,
    "flags": {"ignore_armor": false, ...}
  }

Data-driven tuning
------------------
- Keep numeric tuning in resource files (`.tres`) stored under `res://assets/config/` or `res://data/`.
- Example resources: `combat_config.tres`, `player_tuning.tres`, `boss_phase_1.tres`
- Designers edit these in the Godot inspector; code reads them at runtime.

Guidelines for adding new mechanics
----------------------------------
- Add logic as a component when it can be reused across entities.
- Add high-level sequencing to Sequencer when you need deterministic, ordered scripts.
- Keep state transitions in the state machine; do not splice logic between multiple components arbitrarily.

Testing checklist (dev)
-----------------------
- Reproduce pogo behavior on small enemy and boss (ensure single hit / correct bounce).
- Verify contact damage doesn't double-apply for simultaneous collisions.
- Run memory/profile track for object pool usage to ensure reuse works.

Where to update this doc
------------------------
- If you change damage_info shape, update `docs/ARCHITECTURE.txt` and this file.


=====================================
FILE: ./docs/ROADMAP.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗  ██████╗  █████╗ ██████╗ ███╗   ███╗ █████╗ ██████╗                ║
║   ██╔══██╗██╔═══██╗██╔══██╗██╔══██╗████╗ ████║██╔══██╗██╔══██╗               ║
║   ██████╔╝██║   ██║███████║██║  ██║██╔████╔██║███████║██████╔╝               ║
║   ██╔══██╗██║   ██║██╔══██║██║  ██║██║╚██╔╝██║██╔══██║██╔═══╝                ║
║   ██║  ██║╚██████╔╝██║  ██║██████╔╝██║ ╚═╝ ██║██║  ██║██║                    ║
║   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝                    ║
║                                                                              ║
║          The long-term vision and planned features for the project.          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              VERSION 1.0 GOALS - THE POLISHED SLICE                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The primary objective is to create a single, complete, and highly          ║
║   polished gameplay loop that serves as a benchmark for the entire game.     ║
║                                                                              ║
║   █  A Dynamic Boss: Arena 00 boss is fully functional with multiple,        ║
║      telegraphed attack patterns and basic AI (patrolling, facing player).   ║
║                                                                              ║
║   █  Functional HUD: Clear displays for player health, boss health, and      ║
║      healing charges.                                                        ║
║                                                                              ║
║   █  Satisfying Feedback: All core actions are accompanied by appropriate    ║
║      SFX, VFX (hit-flash, particles), and screen shake. The game feels good. ║
║                                                                              ║
║   █  Complete Flow: Player can go from Title -> Game -> Win/Loss -> Title    ║
║      with smooth transitions.                                                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         FUTURE VERSIONS                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▓  v1.1 - "The Content Expansion"                                          ║
║      Focus shifts to expanding content and adding a new dimension to combat. ║
║      ░  ■ Introduce a Second Arena & Boss (e.g., a flying or agile enemy).   ║
║      ░  ■ Introduce a "Minion" Enemy Type for more varied encounters.        ║
║      ░  ■ Refine Player Combat Indicators (Fizzle & Charge Meter).           ║
║                                                                              ║
║   ▓  v2.0 - "The Full Game Loop"                                             ║
║      Transforms the project from encounters into a cohesive game.            ║
║      ░  ■ Implement a Stage Select Screen.                                   ║
║      ░  ■ Basic Progression (Defeating a boss unlocks the next stage).       ║
║      ░  ■ Introduce More Enemy Variety (e.g., a stationary turret).          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         DREAM FEATURES                               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A "blue sky" list of ideas to explore once the core game is robust.        ║
║                                                                              ║
║   ■  Advanced Boss Mechanics (Multi-stage health, cinematic `Path2D` moves). ║
║   ■  Expanded Player Abilities (Unlockable weapons/skills post-boss fight).  ║
║   ■  Deeper Lore & Narrative (Expand on "Determination" theme).              ║
║   ■  Official GitHub Wiki for community documentation.                       ║
║   ■  Robust Debug Tools (More hotkeys and overlays).                         ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/PLAYTESTING.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═════════════╗
║  ██████╗ ██╗      █████╗ ██╗   ██╗████████╗███████╗███████╗████████╗██╗███╗   ██╗ ██████╗  ║
║  ██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║████╗  ██║██╔════╝  ║
║  ██████╔╝██║     ███████║ ╚████╔╝    ██║   █████╗  ███████╗   ██║   ██║██╔██╗ ██║██║  ███╗ ║
║  ██╔═══╝ ██║     ██╔══██║  ╚██╔╝     ██║   ██╔══╝  ╚════██║   ██║   ██║██║╚██╗██║██║   ██║ ║
║  ██║     ███████╗██║  ██║   ██║      ██║   ███████╗███████║   ██║   ██║██║ ╚████║╚██████╔╝ ║
║  ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝  ║ 
║                                                                              ╔═════════════╝
║           A log of all playtesting sessions and resulting feedback.          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PLAYTEST SESSION LOG                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   (New playtest session reports should be added here, most recent at top.)   ║
║                                                                              ║
║  --------------------------------------------------------------------------  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                      TEST SESSION TEMPLATE                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Date: YYYY-MM-DD                                                        ║
║   █  Tester: [Name or description, e.g., "Developer," "Friend A"]            ║
║   █  Build Version: [e.g., 0.1.0]                                            ║
║   █  Session Goal: [e.g., "Test boss fight fairness", "Check menu UI"]       ║
║                                                                              ║
║   ▓  General Observations & Player Behavior                                  ║
║      ░  What did the player do? Did they understand the goals? Where did     ║
║      ░  they go first? (e.g., "Tester immediately tried to wall-jump.")      ║
║                                                                              ║
║   ▓  Issues & Bugs Found                                                     ║
║      ░  List any bugs, crashes, or moments of confusion. Was anything        ║
║      ░  frustrating or unfair?                                               ║
║                                                                              ║
║   ▓  Positive Feedback                                                       ║
║      ░  What did the player say they enjoyed? What felt good to them?        ║
║      ░  (e.g., "Player audibly said 'nice' after a successful pogo.")        ║
║                                                                              ║
║   ▓  Suggestions & Ideas                                                     ║
║      ░  What did the player suggest? Did they have any ideas for new         ║
║      ░  features or changes?                                                 ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/BUGS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗ ██╗   ██╗ ██████╗ ███████╗                                         ║
║   ██╔══██╗██║   ██║██╔════╝ ██╔════╝                                         ║
║   ██████╔╝██║   ██║██║  ███╗███████╗                                         ║
║   ██╔══██╗██║   ██║██║   ██║╚════██║                                         ║
║   ██████╔╝╚██████╔╝╚██████╔╝███████║                                         ║
║   ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝                                         ║
║                                                                              ║
║             A tracker for all known issues, their status, and solutions.     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                             OPEN ISSUES                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   (All known bugs have been resolved.)                                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                             FIXED ISSUES                             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   □  [BUG-F007] Intermittent major hitch on first run or debug mode toggle.  ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Implemented a shader pre-warming system in `LoadingScreen`.║
║      ░  An off-screen `SubViewport` is used to instantiate key entities      ║
║      ░  (Player, Boss, Projectiles) for a single frame, which forces the     ║
║      ░  engine to compile their shaders before they are needed in the main   ║
║      ░  game scene. This eliminates the first-appearance stutter.            ║
║                                                                              ║
║   □  [BUG-F006] Significant stutter/hitch occurred on arena load.            ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Replaced the synchronous, blocking level generation with a ║
║      ░  new asynchronous system in `ArenaBuilder.gd`. The `build_level_async`║
║      ░  function now creates the level in batches, using `await` to yield    ║
║      ░  control back to the engine between batches. This prevents the main   ║
║      ░  thread from freezing, resulting in a smooth loading sequence managed ║
║      ░  by a new `LoadingScreen`.                                            ║
║                                                                              ║
║   □  [BUG-F005] Player death caused a physics crash.                         ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Scene changes in `game.gd`'s `_on_player_died` and         ║
║      ░  `_on_boss_died` functions were changed to `get_tree().call_deferred()`.║
║      ░  This prevents the engine from trying to delete a physics body while  ║
║      ░  it is still processing a physics callback.                           ║
║                                                                              ║
║   □  [BUG-F004] Hazard tiles did not deal contact damage.                    ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Corrected the implementation in `ArenaBuilder.gd`. The     ║
║      ░  `_create_hazard_tile` function now creates a single `StaticBody2D`   ║
║      ░  that exists on both the "world" and "hazard" collision layers and is ║
║      ░  part of both corresponding groups, ensuring it's both solid and damaging.║
║                                                                              ║
║   □  [BUG-F003] Drop-through platforms ("-") were not functioning.           ║
║      ░  FIXED: 2025-08-06                                                    ║
║      ░  SOLUTION: Re-implemented the Down+Jump logic in the player's         ║
║      ░  `state_move` function. Corrected the platform's collision shape      ║
║      ░  position and group assignment in `game.gd`.                          ║
║                                                                              ║
║   □  [BUG-F002] Player pogo attack was not working correctly on all surfaces.║
║      ░  FIXED: 2025-08-05                                                    ║
║      ░  SOLUTION: Re-implemented the `_check_for_immediate_pogo()` physics   ║
║      ░  query to allow instant bounces on surfaces directly below the        ║
║      ░  player. Updated the `_trigger_pogo()` function to correctly handle   ║
║      ░  bouncing on enemy projectiles in addition to standard enemies.       ║
║                                                                              ║
║   □  [BUG-F001] Player was not taking contact damage from boss/hazards.      ║
║      ░  FIXED: 2025-08-05                                                    ║
║      ░  SOLUTION: During the state machine refactor, the player's            ║
║      ░  `CharacterBody2D` `collision_mask` was changed to ignore the         ║
║      ░  "enemy" and "hazard" layers. The mask was updated in `player.tscn`   ║
║      ░  to correctly detect these layers again, allowing the existing        ║
║      ░  `_check_for_contact_damage()` function to work as intended.          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


# BUGS.txt — Live Bug Tracker
# Legend:
#   ID — Optional local ID or GitHub Issue # if applicable.
#   [ ] — Open
#   [-] — In Progress
#   [x] — Fixed (date)

## Open
[ ] #— None at present.

## In Progress
[-] #— None at present.

## Fixed
[x] #101 — Pogo mechanic sometimes failed to register damage on boss (2025-08-09)
[x] #99  — Contact damage applied twice under rare conditions (2025-08-05)

# Notes:
# - This file is intentionally minimal. Add new items to "Open" as:
#   [ ] # — Short title (owner | date) + one-line reproduction steps
# - If you create a GitHub Issue for an item, add the issue number after the bracket:
#   [ ] #14 — Example bug title (alice | 2025-08-11)


   □  [BUG-UI001] Inconsistent Back Button Centering in Sub-Menus.
      ░  STATUS: OPEN
      ░  DESCRIPTION: The "Back" button in the Sound and Controls menus is not
      ░  perfectly centered horizontally, unlike the button in the Credits menu.
      ░  This is likely due to a conflict between manual positioning and the
      ░  parent container's layout logic.
      ░  DEFERRED: A full UI overhaul is planned for a future sprint. This
      ░  minor visual bug will be resolved then.

         □  [BUG-RENDER001] Debug collision shapes are culled at viewport edges.
      ░  STATUS: OPEN
      ░  DESCRIPTION: When running with "Visible Collision Shapes", the blue
      ░  debug lines for physics bodies that fall exactly on the camera's
      ░  viewport boundary are inconsistently rendered (often missing). This
      ░  appears to be a minor engine culling artifact.
      ░  DEFERRED: This is a debug-only visual issue and has no impact on
      ░  gameplay, final visuals, or actual collision detection. It is a very
      ░  low priority fix.

=====================================
FILE: ./docs/DOCS_PROTOCOL.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗  ██████╗  ██████╗ ███████╗                                         ║
║   ██╔══██╗██╔═══██╗██╔════╝ ██╔════╝                                         ║
║   ██║  ██║██║   ██║██║      ███████╗                                         ║
║   ██║  ██║██║   ██║██║   ██╗╚════██║                                         ║
║   ██████╔╝╚██████╔╝╚██████╔╝███████║                                         ║
║   ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝                                         ║
║                                                                              ║
║    ██████╗ ██████╗  ██████╗ ████████╗ ██████╗  ██████╗  ██████╗ ██╗          ║
║    ██╔══██╗██╔══██╗██╔═══██╗╚══██╔══╝██╔═══██╗██╔════╝ ██╔═══██╗██║          ║
║    ██████╔╝██████╔╝██║   ██║   ██║   ██║   ██║██║      ██║   ██║██║          ║
║    ██╔═══╝ ██╔══██╗██║   ██║   ██║   ██║   ██║██║   ██╗██║   ██║██║          ║
║    ██║     ██║  ██║╚██████╔╝   ██║   ╚██████╔╝╚██████╔╝╚██████╔╝███████╗     ║
║    ╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝     ║
║                                                                              ║
║           Project Documentation & Communication Formatting Standard          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       DOCUMENTATION STANDARDS                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This document defines the visual and structural standards for all `.txt`   ║
║   project files. Its purpose is to maintain a cohesive, readable, and        ║
║   thematically appropriate aesthetic that reflects the game's design.        ║
║                                                                              ║
║   █  FILE STRUCTURE                                                          ║
║      All `.md` files essential for GitHub integration (README.md,            ║
║      LICENSE.md) will remain as Markdown. All other project documents        ║
║      (TODO, ROADMAP, DESIGN, etc.) will be `.txt` files following this guide.║
║                                                                              ║
║   █  DOCUMENT FRAME                                                          ║
║      Each document will be enclosed in a double-line box frame.              ║
║      (Characters: ╔ ╗ ╚ ╝ ║ ═ ╠ ╣)                                           ║
║                                                                              ║
║   █  TITLE BLOCK                                                             ║
║      Each document begins with its custom ASCII art title block, followed    ║
║      by a one-line subtitle describing its purpose.                          ║
║                                                                              ║
║   █  SECTION HEADERS                                                         ║
║      Major sections are demarcated with a dithered block header. The text    ║
║      should be centered and padded within the solid blocks.                  ║
║                                                                              ║
║        ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ║
║        ██                        SECTION TITLE                         ██    ║
║        ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ║
║                                                                              ║
║   █  BODY TEXT & PARAGRAPHS                                                  ║
║      Standard body text should be indented by 2 spaces from the main frame.  ║
║      Paragraphs should have a single blank line between them for spacing.    ║
║      Text should be manually wrapped to fit within the document frame.       ║
║                                                                              ║
║   █  BULLET POINTS & HIERARCHY (PRIORITY GRADIENT)                           ║
║      Lists will use dithered blocks to indicate importance or sequence.      ║
║      All bullet points should be indented by 3 spaces. Sub-points should     ║
║      be indented an additional 2 spaces using the `░` character.             ║
║                                                                              ║
║        █  Primary Point / Critical Item / Most Important                     ║
║        ▓  Secondary Point / High Priority                                    ║
║        ▒  Tertiary Point / Medium Priority                                   ║
║        ░  Note, Sub-point, or Low Priority Item                              ║
║                                                                              ║
║        ■  Checklist item (complete).                                         ║
║        □  Checklist item (incomplete).                                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 ARCHIVE OF ADVANCED & ESOTERIC STYLES                ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The following are alternative formatting ideas. They are archived here for ║
║   future inspiration but are not part of the current standard to maintain    ║
║   simplicity and consistency.                                                ║
║                                                                              ║
║   ▒  Progress Bars & Status Indicators                                       ║
║      Use the priority gradient to create visual progress meters.             ║
║                                                                              ║
║      ░  LOADING       █████████████▓▓▓▓▒▒▒░░░ 73%                            ║
║      ░  BOSS HEALTH   ████████▓▓▓▓▒▒▒▒░░░░░░░░ 58%                           ║
║                                                                              ║
║   ▒  Circuit Board Style                                                     ║
║      A highly technical aesthetic for documents like ARCHITECTURE.txt.       ║
║                                                                              ║
║      ┌─┬─┬─┬─┬─┬─┬─┬─┬── SECTION ──┬─┬─┬─┬─┬─┬─┬─┬─┐                         ║
║      │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │                         ║
║      └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘                         ║
║                                                                              ║
║   ▒  PETSCII-style Graphics                                                  ║
║      A retro computer aesthetic using block and pattern characters.          ║
║                                                                              ║
║      ▗▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▖     ║
║      ▐ ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚  SECTION TITLE HERE  ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚ ▌     ║
║      ▝▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▘     ║
║                                                                              ║
║   ▒  Geometric Separators                                                    ║
║      Use repeating patterns to divide sections instead of headers.           ║
║                                                                              ║
║      ◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇                    ║
║      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼            ║
║                                                                              ║
║   ▒  Square Density Patterns                                                 ║
║      An alternative to the priority gradient for status tracking.            ║
║                                                                              ║
║      ■■■■■■■■■■ COMPLETE                                                     ║
║      ■■■■■■■□□□ IN PROGRESS                                                  ║
║      ■□□□□□□□□□ PLANNED                                                      ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/sprint_0_audit/TEST-002_Smoke_Tests.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/TEST-001_Baseline_Metrics.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/FSM-001_Entity_State_Flows.md
=====================================
# State Machine Flow Diagrams

**Date:** 2025-08-10

**Status:** Documented

---

This document provides a visual representation of the Finite State Machines (FSMs) for the core entities in the game. These diagrams are generated using Mermaid syntax and represent the logical flow of states based on player input and game physics.

## Player State Machine

The Player FSM is complex and responsive, designed to facilitate a fluid and expressive moveset. The core loop revolves around the `Move`, `Fall`, and `Jump` states, with multiple entry points into action states like `Dash` and `Attack`.

```mermaid
graph TD
    subgraph Core Movement
        MOVE <-->|Gravity/On Floor| FALL;
        MOVE -->|Jump Input| JUMP;
        FALL -->|Coyote Time Jump| JUMP;
        JUMP -->|Apex Reached| FALL;
    end

    subgraph Wall Interaction
        FALL -->|Holding Direction into Wall| WALL_SLIDE;
        JUMP -->|Holding Direction into Wall| WALL_SLIDE;
        WALL_SLIDE -->|Jump Input| JUMP;
        WALL_SLIDE -->|Not Holding Direction| FALL;
    end

    subgraph Action States
        MOVE --> DASH;
        FALL --> DASH;
        JUMP --> DASH;
        WALL_SLIDE --> DASH;
        DASH -->|Duration Ends| FALL;

        MOVE --> ATTACK;
        FALL --> ATTACK;
        JUMP --> ATTACK;
        WALL_SLIDE --> ATTACK;
        ATTACK -->|Duration Ends| FALL;
    end

    subgraph Special States
        ANY_STATE[Any State] -->|Takes Damage| HURT;
        HURT -->|Knockback Ends| FALL;
        MOVE -->|Hold Heal Buttons| HEAL;
        HEAL -->|Buttons Released| MOVE;
    end

    style MOVE fill:#cde4f0,stroke:#333,stroke-width:2px
    style FALL fill:#cde4f0,stroke:#333,stroke-width:2px
    style JUMP fill:#cde4f0,stroke:#333,stroke-width:2px
    style WALL_SLIDE fill:#e8d1e8,stroke:#333,stroke-width:2px
    style DASH fill:#f0e4cd,stroke:#333,stroke-width:2px
    style ATTACK fill:#f0e4cd,stroke:#333,stroke-width:2px
    style HURT fill:#f8cbcb,stroke:#333,stroke-width:2px
    style HEAL fill:#d1e8d1,stroke:#333,stroke-width:2px


## Boss State Machine

The Base Boss FSM is a simple, predictable loop designed as a template for more complex behaviors. It cycles cleanly through its states based on timers.


graph TD
    COOLDOWN -->|Cooldown Timer Finishes| PATROL;
    PATROL -->|Patrol Timer Finishes| IDLE;
    IDLE -->|Immediately| ATTACK;
    ATTACK -->|Immediately| COOLDOWN;

    style COOLDOWN fill:#cde4f0,stroke:#333,stroke-width:2px
    style PATROL fill:#e8d1e8,stroke:#333,stroke-width:2px
    style IDLE fill:#f0e4cd,stroke:#333,stroke-width:2px
    style ATTACK fill:#f8cbcb,stroke:#333,stroke-width:2px


=====================================
FILE: ./docs/sprint_0_audit/event_usage.txt
=====================================
--- EventCatalog.gd ---
# src/core/event_catalog.gd
# This script serves as the canonical, central list of all event names in the project.
# By using these constants instead of raw strings, we gain IDE autocompletion and
# prevent typos that would lead to silent runtime failures.
extends Object
class_name EventCatalog

# --- Player Events ---
const PLAYER_HEALTH_CHANGED = "player.health_changed"
const PLAYER_HEALING_CHARGES_CHANGED = "player.healing_charges_changed"
const PLAYER_TOOK_DAMAGE = "player.took_damage"
const PLAYER_DIED = "player.died"

# --- Boss / Entity Events ---
const BOSS_HEALTH_CHANGED = "boss.health_changed"
const BOSS_DIED = "boss.died"

# --- Game State Events ---
const GAME_PAUSED = "game.paused"
const GAME_RESUMED = "game.resumed"

# --- UI State Events ---
const MENU_OPENED = "ui.menu_opened"
const MENU_CLOSED = "ui.menu_closed"

--- EventBus.on() Subscriptions ---
src/ui/game_hud/game_hud.gd:17:	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
src/ui/game_hud/game_hud.gd:18:	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
src/ui/game_hud/game_hud.gd:19:	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
src/ui/global_hud/global_hud.gd:35:	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
src/ui/global_hud/global_hud.gd:36:	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
src/scenes/game/game.gd:17:	_pause_token = EventBus.on(EventCatalog.GAME_PAUSED, _on_game_paused)
src/scenes/game/game.gd:18:	_resume_token = EventBus.on(EventCatalog.GAME_RESUMED, _on_game_resumed)


--- EventBus.emit() Emissions ---
src/ui/screens/controls_menu/controls_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/controls_menu/controls_menu.gd:70:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/credits_menu/credits_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/credits_menu/credits_menu.gd:60:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/options_menu/options_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/options_menu/options_menu.gd:61:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/sound_menu/sound_menu.gd:19:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/sound_menu/sound_menu.gd:47:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/title_screen/title_screen.gd:10:	EventBus.emit(EventCatalog.MENU_OPENED) # Announce that a menu is open
src/ui/screens/title_screen/title_screen.gd:42:	EventBus.emit(EventCatalog.MENU_CLOSED) # Announce that the menu is closing
src/core/sequencing/steps/emit_step.gd:16:	EventBus.emit(event_name, payload)
src/entities/boss/base_boss.gd:121:	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev, self)
src/entities/player/player.gd:127:	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev, self)
src/entities/player/player.gd:191:	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev, self)


=====================================
FILE: ./docs/sprint_0_audit/EVENT-001_Event_Flow_Map.md
=====================================
# Event Flow Map

**Date:** 2025-08-10
**Status:** Generated

---

This document maps all events defined in `EventCatalog.gd`. For each event, it lists all scripts that emit the event and all scripts that subscribe (listen) to it.

## Event: `PLAYER_HEALTH_CHANGED`

**Path:** `player.health_changed`

### Emitters (who sends this event?)
```
src/entities/player/player.gd:	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
```

---

## Event: `PLAYER_HEALING_CHARGES_CHANGED`

**Path:** `player.healing_charges_changed`

### Emitters (who sends this event?)
```
src/entities/player/player.gd:	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
```

---

## Event: `PLAYER_TOOK_DAMAGE`

**Path:** `player.took_damage`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `PLAYER_DIED`

**Path:** `player.died`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `BOSS_HEALTH_CHANGED`

**Path:** `boss.health_changed`

### Emitters (who sends this event?)
```
src/entities/boss/base_boss.gd:	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
```

---

## Event: `BOSS_DIED`

**Path:** `boss.died`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `GAME_PAUSED`

**Path:** `game.paused`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
src/scenes/game/game.gd:	_pause_token = EventBus.on(EventCatalog.GAME_PAUSED, _on_game_paused)
```

---

## Event: `GAME_RESUMED`

**Path:** `game.resumed`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
src/scenes/game/game.gd:	_resume_token = EventBus.on(EventCatalog.GAME_RESUMED, _on_game_resumed)
```

---

## Event: `MENU_OPENED`

**Path:** `ui.menu_opened`

### Emitters (who sends this event?)
```
src/ui/screens/controls_menu/controls_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/credits_menu/credits_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/options_menu/options_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/sound_menu/sound_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/title_screen/title_screen.gd:	EventBus.emit(EventCatalog.MENU_OPENED) # Announce that a menu is open
```

### Listeners (who listens for this event?)
```
src/ui/global_hud/global_hud.gd:	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
```

---

## Event: `MENU_CLOSED`

**Path:** `ui.menu_closed`

### Emitters (who sends this event?)
```
src/ui/screens/controls_menu/controls_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/credits_menu/credits_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/options_menu/options_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/sound_menu/sound_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/title_screen/title_screen.gd:	EventBus.emit(EventCatalog.MENU_CLOSED) # Announce that the menu is closing
```

### Listeners (who listens for this event?)
```
src/ui/global_hud/global_hud.gd:	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
```

---



=====================================
FILE: ./docs/sprint_0_audit/ARCH-002_Acceptance_Criteria.md
=====================================
# ARCH-002: Refactoring Acceptance Criteria

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

This document serves as a high-level checklist for our entire refactoring initiative. A sprint's work is considered "done" when it meets its specific criteria, and the entire initiative is "done" when all items on this list are checked.

## Global Acceptance Criteria

The refactoring is complete when all of the following are true:

### Architectural Health
- [ ] **Single Source of State:** All mutable runtime state (player data, game state) is managed via `Resource`-based data containers, eliminating the "dual architecture" of stateful singletons.
- [ ] **Standardized Configuration:** All tunable gameplay values are sourced from `.tres` `Resource` files, not `Constants.gd` or hardcoded magic numbers. A validation system checks for missing configs at startup.
- [ ] **Explicit Dependencies:** Core components (`HealthComponent`, `CombatComponent`, etc.) receive their dependencies via a `setup(config, services)` method, not by calling global singletons directly.
- [ ] **Clear Communication Rules:** The `EventBus` is used for global, cross-system messages. Godot signals are used for local, intra-scene communication. Direct calls between components are minimized or eliminated.

### Testing & Verification
- [ ] **Baseline Metrics Met:** The refactored game performs equal to or better than the baseline metrics established in `TEST-001_Baseline_Metrics.md`.
- [ ] **Regression Tests Pass:** The game successfully passes all manual checks in the `TEST-003_Regression_Checklist.md`.
- [ ] **Smoke Tests Pass:** The game is verifiably stable and key systems are functional as defined in `TEST-002_Smoke_Tests.md`.

### Code Quality & Documentation
- [ ] **No Dead Code:** All old, replaced systems and scripts have been safely removed from the project.
- [ ] **Documentation Updated:** All relevant architectural documents (`README.md`, ADRs) have been updated to reflect the new patterns.
- [ ] **Linter/Formatter Clean:** The entire codebase is formatted consistently and passes static analysis checks without warnings.


=====================================
FILE: ./docs/sprint_0_audit/ARCH-001_Refactoring_Principles.md
=====================================
# ARCH-001: Refactoring Principles

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

To ensure our refactoring effort is focused, consistent, and successful, we must operate from a shared set of guiding principles. These principles will act as a tie-breaker when design decisions are unclear and will define the target state of our architecture.

## Guiding Principles

1.  **Work *With* the Engine, Not Against It.**
    *   **Rationale:** Our attempt to force a classic DI pattern failed because it fought Godot's startup lifecycle. All future architectural decisions must respect and leverage Godot's idiomatic patterns (nodes, scenes, signals, resources).
    *   **In Practice:** We will prefer solutions that feel natural in Godot over patterns that require complex workarounds to function.

2.  **Every Change Must Be Verifiable.**
    *   **Rationale:** Refactoring without testing is just moving code around. To prevent regressions, every significant change must be accompanied by a clear method of verification.
    *   **In Practice:** This means creating smoke tests, regression checklists, and eventually, automated unit tests. We will use the documents `TEST-002` and `TEST-003` to track this.

3.  **Prioritize Decoupling and Explicit Dependencies.**
    *   **Rationale:** The primary weakness of the current Service Locator pattern is that dependencies are hidden. Our goal is to make dependencies explicit.
    *   **In Practice:** Components and systems should receive their dependencies through a `setup()` method where possible, rather than calling global singletons in their internal logic. Communication should favor events (`EventBus`) for global messages and signals for local, parent-child messages.

4.  **Standardize Patterns; Eliminate "Dual Architectures".**
    *   **Rationale:** The audit identified several areas (state management, configuration) where two different patterns exist to solve the same problem. This increases cognitive load and maintenance cost.
    *   **In Practice:** We will choose a single, standard way to manage state (the `Resource`-based data pattern) and a single way to manage configuration (`tres` config resources), and migrate all existing code to these standards.

5.  **The Strangler Fig Pattern: Migrate Incrementally.**
    *   **Rationale:** Big-bang rewrites are risky and prone to failure. We will adopt the Strangler Fig pattern.
    *   **In Practice:** We will create the new, improved system alongside the old one. We will then migrate dependencies one by one to the new system. Once all dependencies are migrated, we can safely delete the old system. This ensures the game remains functional throughout the entire process.


=====================================
FILE: ./docs/sprint_0_audit/config_usage.txt
=====================================
src/ui/game_hud/game_hud.gd:22:	var max_health = Config.get_value("player.health.max_health", 5)
src/ui/game_hud/game_hud.gd:25:	boss_health_bar.max_value = Config.get_value("boss.stats.health", 30)
src/core/data/config/config.gd:14:# Example: Config.get_value("player.physics.speed")
src/entities/boss/base_boss.gd:31:	b_data.patrol_speed = Config.get_value("boss.stats.patrol_speed", 100.0)
src/entities/boss/base_boss.gd:57:		velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/components/combat_component.gd:23:	p_data.attack_cooldown_timer = Config.get_value("player.combat.attack_cooldown")
src/entities/components/combat_component.gd:37:	owner_node.velocity.y = -Config.get_value("player.physics.pogo_force")
src/entities/components/combat_component.gd:40:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/components/health_component.gd:47:	max_health = Config.get_value(config_paths.max_health, 10)
src/entities/components/health_component.gd:48:	invincibility_duration = Config.get_value(config_paths.get("invincibility", "player.health.invincibility_duration"), 1.0)
src/entities/components/health_component.gd:84:	var knockback_speed = Config.get_value(_knockback_config.speed, 400.0)
src/entities/components/health_component.gd:86:		knockback_speed = Config.get_value(_knockback_config.hazard_speed, knockback_speed)
src/entities/components/input_component.gd:24:		p_data.jump_buffer_timer = Config.get_value("player.physics.jump_buffer")
src/entities/components/input_component.gd:35:			if p_data.charge_timer >= Config.get_value("player.combat.charge_time"):
src/entities/player/player.gd:87:		p_data.wall_coyote_timer = Config.get_value("player.physics.wall_coyote_time")
src/entities/player/player.gd:120:	velocity.x = Input.get_axis("ui_left", "ui_right") * Config.get_value("player.physics.speed")
src/entities/player/player.gd:144:	if p_data.healing_charges >= Config.get_value("player.health.max_healing_charges"): return
src/entities/player/player.gd:146:	if p_data.determination_counter >= Config.get_value("player.combat.determination_per_charge"):
src/entities/player/states/state_jump.gd:6:	player.velocity.y = -Config.get_value("player.physics.jump_force")
src/entities/player/states/state_jump.gd:15:		player.velocity.y *= Config.get_value("player.physics.jump_release_dampener")
src/entities/player/states/state_jump.gd:26:	player.velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/player/states/state_dash.gd:9:	p_data.dash_duration_timer = Config.get_value("player.physics.dash_duration")
src/entities/player/states/state_dash.gd:10:	p_data.dash_cooldown_timer = Config.get_value("player.physics.dash_cooldown")
src/entities/player/states/state_dash.gd:11:	player.velocity = _get_dash_direction() * Config.get_value("player.physics.dash_speed")
src/entities/player/states/state_heal.gd:7:	player.healing_timer.start(Config.get_value("player.health.heal_duration"))
src/entities/player/states/state_wall_slide.gd:7:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/player/states/state_wall_slide.gd:14:	var gravity = Config.get_value("general.physics.gravity")
src/entities/player/states/state_wall_slide.gd:15:	var wall_slide_speed = Config.get_value("player.physics.wall_slide_speed")
src/entities/player/states/state_wall_slide.gd:38:	player.velocity.y = -Config.get_value("player.physics.wall_jump_force_y")
src/entities/player/states/state_wall_slide.gd:39:	player.velocity.x = p_data.last_wall_normal.x * Config.get_value("player.physics.wall_jump_force_x")
src/entities/player/states/state_attack.gd:6:	p_data.attack_duration_timer = Config.get_value("player.combat.attack_duration")
src/entities/player/states/state_attack.gd:7:	p_data.attack_cooldown_timer = Config.get_value("player.combat.attack_cooldown")
src/entities/player/states/state_attack.gd:33:		var friction = Config.get_value("player.combat.attack_friction")
src/entities/player/states/state_hurt.gd:8:	p_data.knockback_timer = Config.get_value("player.combat.knockback_duration")
src/entities/player/states/state_hurt.gd:11:	player.velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/player/states/state_fall.gd:27:		gravity_multiplier = Config.get_value("player.physics.fast_fall_gravity_multiplier")
src/entities/player/states/state_fall.gd:28:	player.velocity.y += Config.get_value("general.physics.gravity") * gravity_multiplier * delta
src/entities/player/states/state_fall.gd:40:	player.velocity.x = p_data.last_wall_normal.x * Config.get_value("player.physics.wall_jump_force_x")
src/entities/player/states/state_move.gd:6:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/player/states/state_move.gd:10:	p_data.coyote_timer = Config.get_value("player.physics.coyote_time")
src/entities/player/states/state_move.gd:12:	player.velocity.y += Config.get_value("general.physics.gravity") * delta


=====================================
FILE: ./docs/sprint_0_audit/singleton_map.txt
=====================================

Settings="*res://src/core/data/config/settings.gd"
AudioManager="*res://src/core/systems/audio_manager.gd"
CursorManager="*res://src/core/systems/cursor_manager.gd"
Constants="*res://src/core/util/constants.gd"
AssetPaths="*res://src/core/util/asset_paths.gd"
GlobalHud="*res://src/ui/global_hud/global_hud.tscn"
GameManager="*res://src/core/systems/game_manager.gd"
ArenaBuilder="*res://src/core/building/arena_builder.gd"
EventBus="*res://src/core/events/event_bus.gd"
Sequencer="*res://src/core/sequencing/sequencer.gd"
Config="*res://src/core/data/config/config.gd"
Palette="*res://src/core/util/palette.gd"
ObjectPool="*res://src/core/systems/object_pool.gd"
PhysicsLayers="*res://src/core/util/physics_layers.gd"



=====================================
FILE: ./docs/sprint_0_audit/state_machine_flow.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/TEST-003_Regression_Checklist.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/ADR-002_Communication_Patterns.md
=====================================
# ADR-002: Communication Patterns (Signal vs. EventBus)

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

The project utilizes two primary methods for communication between different parts of the codebase: Godot's built-in **Signal** system and our custom global **EventBus**. Without a clear standard, it can be ambiguous which tool to use, potentially leading to tightly-coupled systems that are difficult to maintain or debug.

This document defines the official standard for choosing a communication pattern.

## Decision

We will adhere to a clear "Local vs. Global" distinction for communication:

1. **Use Godot Signals for *Local* Communication.**
2. **Use the EventBus for *Global* Communication.**

---

### 1. Godot Signals: Local Communication

Signals are the preferred method for communication **within a single, self-contained scene** or between a parent node and its direct children. This represents a tightly-coupled, "owner-to-part" relationship.

**Use a Signal when:**
- A child node needs to tell its parent that something happened (e.g., a `Button` telling a `Menu` it was pressed).
- A parent node needs to broadcast a message to all of its direct children.
- A component needs to communicate its result back to its owner (e.g., `CombatComponent` emitting `pogo_bounce_requested` for `Player` to handle).

**Litmus Test:** If the sender and receiver are part of the same scene file (`.tscn`) and have a direct parent-child relationship, use a signal.

**Example (`player.gd`):**
```gdscript
# The HealthComponent (child) emits a signal.
signal died

# The Player (parent) listens to its own component.
health_component.died.connect(_on_health_component_died)
```

### 2. EventBus: Global Communication

The EventBus is the preferred method for communication **between disparate, decoupled systems**. The sender and receiver should have no direct knowledge of each other. This represents a loosely-coupled, "system-to-system" relationship.

**Use the EventBus when:**
- A gameplay event needs to be reflected in the UI (e.g., the Player's health changes, and the GameHUD must be updated).
- A UI action needs to trigger a global system change (e.g., a TitleScreen button opens a menu, and the GlobalHUD must show the mute icon).
- An entity in the game world needs to trigger an audio cue (e.g., the Boss dies, and the AudioManager needs to play a victory sound).

**Litmus Test:** If the sender and receiver are in completely different parts of the scene tree and do not know about each other's existence, use the EventBus.

**Example (player.gd emitting, game_hud.gd listening):**

```gdscript
# player.gd (Sender)
var ev = PlayerHealthChangedEvent.new()
EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev)

# game_hud.gd (Receiver)
EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
```

## Consequences

**Positive:** This standard provides a clear, unambiguous rule that is easy to follow, promoting clean architecture and preventing "spaghetti" code where everything is globally connected via the EventBus. It keeps scenes self-contained and makes systems highly modular.

**Negative:** None. This is a best-practice clarification that reduces cognitive overhead.

=====================================
FILE: ./docs/sprint_0_audit/ADR.mdADR-001_Service_Locator_Pattern.md
=====================================
# ADR-001: Global System Access via Autoload Singletons (Service Locator)

**Date:** 2025-08-10

**Status:** Accepted (Existing Pattern)

---

## Context

The project requires numerous cross-cutting services that need to be accessible from various parts of the codebase. These include core systems (EventBus, AudioManager, ObjectPool), data providers (Config, Settings, Palette), and utility services (AssetPaths, PhysicsLayers).

A simple and idiomatic way to achieve this in Godot is by using the **Autoload** feature, which creates a globally accessible singleton instance of a script or scene. This effectively implements the **Service Locator** design pattern, where any node in the game can directly access a service by its global name (e.g., `EventBus.emit()`, `Config.get_value()`).

## Decision

We will use the Godot Autoload (Service Locator) pattern as the primary mechanism for providing global services throughout the application.

This decision was made because it is the most direct, performant, and engine-idiomatic way to solve the problem of global access in Godot 4. It avoids the need for complex dependency injection frameworks or manual "prop-drilling" of dependencies through the node tree.

The audit file `singleton_map.txt` confirms there are currently 14 such services registered in `project.godot`.

## Consequences

### Positive:
-   **Simplicity & Speed:** Accessing a service is trivial (`ServiceName.method()`). There is no setup boilerplate required in consumer scripts.
-   **Performance:** Autoloads are instantiated once at startup, providing fast and reliable access.
-   **Decoupling:** Systems can communicate through a central service like `EventBus` without needing direct references to each other, as shown in `event_usage.txt`.

### Negative (Risks & Architectural Debt):
-   **Hidden Dependencies:** The dependencies of a script are not explicitly declared in its API. To know that `player.gd` depends on `Config`, one must read the entire script body. This makes the code harder to reason about.
-   **Difficult to Test:** This is the most significant drawback. It is very difficult to unit-test a script that calls a global singleton. You cannot easily replace `EventBus` with a "mock" or "fake" version for a test, which was the root cause of the failed DI refactor attempt.
-   **Risk of Tight Coupling:** Because services are so easy to access, it can encourage developers to create a "spaghetti" architecture where everything calls everything else, bypassing more structured communication patterns.
-   **Configuration Fragility:** The heavy reliance on string-based keys for services like `Config` and `EventBus` is fragile. A typo will result in a runtime error, not a compile-time one. The `config_usage.txt` file shows dozens of such calls, each being a potential point of failure.

---

## Next Steps (Refactoring Plan)

This pattern, while accepted, is the primary target for refinement in our upcoming refactoring sprints. The plan is not to eliminate autoloads, but to mitigate their negative consequences by:
1.  **Standardizing Configuration (Sprint 1):** Introduce validation to catch bad config paths at startup.
2.  **Unifying Data Architecture (Sprint 2):** Reduce the number of singletons that hold mutable state.
3.  **Refining Communication (Sprint 3):** Clarify when to use `EventBus` versus other patterns to reduce the risk of "spaghetti" code.


=====================================
FILE: ./docs/sprint_0_audit/ADR.md
=====================================


=====================================
FILE: ./docs/ARCHITECTURE.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═════════════════╗
║  █████╗ ██████╗  ██████╗██╗  ██╗██╗████████╗███████╗ ██████╗████████╗██╗   ██╗██████╗ ███████╗ ║
║ ██╔══██╗██╔══██╗██╔════╝██║  ██║██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗██╔════╝ ║
║ ███████║██████╔╝██║     ███████║██║   ██║   █████╗  ██║        ██║   ██║   ██║██████╔╝█████╗   ║
║ ██╔══██║██╔══██╗██║     ██╔══██║██║   ██║   ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗██╔══╝   ║
║ ██║  ██║██║  ██║╚██████╗██║  ██║██║   ██║   ███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║███████╗ ║
║ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝ ║
║                                                                              ╔═════════════════╝
║          The project's technical structure, standards, and patterns.         ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓-▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       GUIDING DESIGN PRINCIPLES                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This project's development is guided by the SOLID principles to ensure the ║
║   codebase remains clean, maintainable, and scalable.                        ║
║                                                                              ║
║   █  Single Responsibility Principle (SRP): Every script should have one,    ║
║      and only one, reason to change. This is why we separate level building  ║
║      from entity spawning, and UI appearance from UI logic.                  ║
║                                                                              ║
║   █  Open/Closed Principle: Code should be open for extension, but closed for║
║      modification. We achieve this with patterns like the State Pattern,     ║
║      where adding a new player ability means adding a new file, not changing ║
║      existing, stable code.                                                  ║
║                                                                              ║
║   █  Dependency Inversion Principle: High-level code (like `player.gd`) should ║
║      not depend on the specific implementation of low-level code (like an    ║
║      individual state script). It should depend on an abstraction (the `BaseState`║
║      contract).                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       KEY ARCHITECTURAL PATTERNS                     ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  The State Pattern: This is the primary pattern for managing complex     ║
║      entities. The logic for each state (e.g., `Move`, `Attack`, `Dash`) is  ║
║      encapsulated in its own class file (`BaseState` extending `Object`). The║
║      entity (`Player`, `BaseBoss`) then acts as a "Context", holding a       ║
║      reference to the current state and delegating all processing to it.     ║
║                                                                              ║
║   █  Singleton-Driven Core: Global systems are managed by Autoload singletons.║
║      ░  These are primarily for stateless utility services (`CombatUtils`,   ║
║      ░  `GridUtils`), cross-system communication (`EventBus`), and asset     ║
║      ░  management (`ObjectPool`, `AssetPaths`, `Palette`).                  ║
║                                                                              ║
║   █  Data-Driven Design via Resources: All tunable gameplay values (damage,  ║
║      cooldowns, health) are defined in custom `Resource` files (`.tres`).    ║
║      This decouples game balance from game logic and allows for rapid tuning ║
║      directly in the Godot Inspector using `@export` variables.              ║
║                                                                              ║
║   █  Component-to-Owner Communication (via Signals): Components encapsulate  ║
║      logic but should not directly control their owner. To maintain this     ║
║      decoupling, components use Godot's built-in signals to announce that    ║
║      something has happened. The owner node (e.g., `player.gd`) listens for  ║
║      these signals and decides how to react.                                 ║
║                                                                              ║
║   █  Dependency Injection: The Official Pattern                              ║
║      ░  **The Rule:** Components and States must be fully decoupled from     ║
║      ░  global systems. They should **NEVER** call a global singleton like   ║
║      ░  `CombatDB`, `Palette`, or `AssetPaths` directly. All external        ║
║      ░  dependencies must be passed in by their owner.                       ║
║      ░                                                                       ║
║      ░  **The Pattern: Owner-Driven Injection.** This is the project standard.║
║      ░  It is performed within an entity's `_ready()` function, which aligns ║
║      ░  perfectly with Godot's Node Lifecycle. By the time `_ready()` is     ║
║      ░  called, the engine guarantees that the node and all of its children  ║
║      ░  are instantiated and accessible. The owner node is therefore the     ║
║      ░  ideal place to wire its own components together.                     ║
║      ░                                                                       ║
║      ░  Example (`player.gd`):                                               ║
║      ░  ```gdscript                                                          ║
║      ░  func _ready():                                                       ║
║      ░      # The Player gets its child nodes (e.g., input_component) and    ║
║      ░      # its global dependencies (e.g., CombatDB.config). It then       ║
║      ░      # "injects" them into the component via a setup dictionary.      ║
║      ░      input_component.setup(self, {                                    ║
║      ░          "data_resource": p_data,                                     ║
║      ░          "state_machine": state_machine,                              ║
║      ░          "combat_component": combat_component,                        ║
║      ░          "config": CombatDB.config                                    ║
║      ░      })                                                               ║
║      ░  ```                                                                  ║
║      ░                                                                       ║
║      ░  This pattern makes dependencies explicit, improves testability, and  ║
║      ░  makes components highly reusable in different contexts.              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         COLLABORATION WORKFLOW                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   1. Define Goal: The Human defines a small, achievable goal based on the TODO.║
║   2. AI Solution: The AI provides complete, regenerated files and explains changes.║
║   3. Implement & Test: The Human implements and thoroughly tests the changes.║
║   4. Document & Commit: The Human updates documentation, then the AI provides a commit message.║
║   5. Confirm & Proceed: The Human confirms success and defines the next goal.║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝
ARCHITECTURE SUMMARY
====================

Purpose
-------
Capture the runtime architecture after the refactor. This doc focuses on:
- The component-based entity model
- State machines and lifecycle
- Autoload singletons and their responsibilities
- Damage/hit contracts and flow

High-level ASCII diagram
------------------------
Entities (Node2D)
  ├─ components (ComponentInterface)
  └─ state_machine (BaseStateMachine)
         ├─ state: BaseState
         └─ state: BaseState

Singletons (autoloads)
----------------------
- EventBus      — pub/sub decoupling for cross-systems events
- SceneManager  — load/unload top-level scenes safely (async)
- Sequencer     — sequence manager for cutscene-like flows and blocking scripts
- ObjectPool    — pooled nodes (projectiles, FX, temporary entities)
- CombatUtils   — canonical damage application & hit resolution helpers
- AssetPaths    — centralized resource path map (optional)
- Palette       — color / theme constants (optional)

Core contracts & API
--------------------
ComponentInterface (convention)
- Purpose: reusable behavior units attached to Entities.
- Expected methods:
  - `func setup(config: Dictionary) -> void`    # apply param set; called on entity init
  - `func teardown() -> void`                  # cleanup (disconnect signals, timers)
- Lifetime: components are owned by their entity; teardown must undo everything added.

BaseState / BaseStateMachine
- BaseState exposes:
  - `func enter(data = null) -> void`
  - `func exit() -> void`
  - `func physics_process(delta: float) -> void`
- BaseStateMachine:
  - holds `current_state: BaseState`
  - `change_state(new_state: BaseState, data = null)` performs exit → transition → enter
  - States should be lightweight and free of leaked timers/signals (teardown on exit).

IDamageable
- Entities that can be damaged must implement the IDamageable contract:
  - `func receive_damage(damage_info: Dictionary) -> void`
  - `func is_invulnerable() -> bool` (optional)
- CombatUtils is the recommended façade to resolve hits:
  - `CombatUtils.apply_damage(source, target, damage_info)`

Damage / Hit Flow (canonical)
1. A hit is detected (Area2D overlap, raycast, or collision callback).
2. A DamageSource object/dictionary is created (type, amount, knockback, owner, hit_flags).
3. `CombatUtils.apply_damage(...)` is called.
4. CombatUtils:
   - Normalizes damage_info
   - Checks IDamageable contract and invulnerability windows
   - Applies HP change and notifies EventBus (eg. `EventBus.emit("damage_taken", {...})`)
   - Handles FX via ObjectPool

EventBus usage (example)
- Emit:
  `EventBus.emit("player_died", {"player": player})`
- Subscribe:
  `EventBus.on("player_died", self, "_on_player_died")`

File organization notes
- `src/core/` => autoloads + shared utilities
- `src/entities/` => entity scenes, component scripts, and state scripts
- `src/arenas/` => procedural/serialized arena builders & layouts
- `docs/` => architecture and design docs (update when APIs change)

Performance / lifecycle guidance
- Use ObjectPool for high-frequency nodes (bullets, hitFX).
- Keep async scene loads in SceneManager to avoid frame stalls.
- Pre-warm shaders/materials on load if you see first-frame hitches.
- Always disconnect EventBus listeners and clear timers in `_exit_tree`.

Common places to check when adding features:
- Combat: `src/core/CombatUtils.gd`
- Eventing: `src/core/EventBus.gd`
- State machine base: `src/core/BaseStateMachine.gd`
- Component contract: `src/entities/ComponentInterface.gd`
- Pools: `src/core/ObjectPool.gd`

(When you update any of these, please mirror the change into this doc.)




Damage / Hit Flow (canonical)
1. A hit is detected (Area2D overlap, raycast, or collision callback).
2. The damage-dealing script (e.g., `player_shot.gd`) creates and populates a
   `DamageInfo` resource, setting the amount and source node.
3. The script calls `CombatUtils.find_damageable(target_node)` to get the component
   that can receive damage.
4. If a valid `damageable` component is found, the script calls `damageable.apply_damage(damage_info)`.
5. The `HealthComponent` processes the `DamageInfo`, applies health changes,
   calculates knockback, and returns a typed `DamageResult` resource.
6. The original script receives the `DamageResult` and can react to it (e.g.,
   by applying the knockback velocity to the player).

=====================================
FILE: ./docs/ASSETS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║    █████╗ ███████╗███████╗███████╗████████╗███████╗                          ║
║   ██╔══██╗██╔════╝██╔════╝██╔════╝╚══██╔══╝██╔════╝                          ║
║   ███████║███████╗███████╗███████╗   ██║   ███████╗                          ║
║   ██╔══██║╚════██║╚════██║██╔════╝   ██║   ╚════██║                          ║
║   ██║  ██║███████║███████║███████╗   ██║   ███████║                          ║
║   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝   ╚═╝   ╚══════╝                          ║
║                                                                              ║
║        A registry for asset sources, licenses, and style guidelines.         ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                            STYLE GUIDE                               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Visual Style                                                            ║
║      ░  Overall: Clean, minimalist, and geometric.                           ║
║      ░  Color Palette: High-contrast grayscale for placeholders.             ║
║      ░  Shape Language: A strict adherence to square-based geometry.         ║
║      ░  Rectangles are only permitted for static environmental elements.     ║
║                                                                              ║
║   █  Audio Style                                                             ║
║      ░  Music: Chiptune-inspired, melodic, and loopable tracks.              ║
║      ░  Sound Effects: Crisp, digital, and immediately recognizable SFX.     ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                           ASSET SOURCES                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Graphics                                                                ║
║      ░  Source: All current visual assets (sprites, icons) are original      ║
║      ░  creations for this project.                                          ║
║      ░  License: N/A (Internal)                                              ║
║                                                                              ║
║   █  Audio                                                                   ║
║      ░  Source: All audio assets were generated by the project creator using ║
║      ░  paid subscriptions to ElevenLabs (SFX) and Udio (Music).             ║
║      ░  License: CC0 1.0 Universal (Public Domain).                          ║
║                                                                              ║
║   █  Fonts                                                                   ║
║      ░  Source: "M PLUS Rounded 1c" by the M+ FONTS PROJECT.                 ║
║      ░  License: SIL Open Font License (OFL).                                ║
║      ░  Source Link: `https://fonts.google.com/specimen/M+PLUS+Rounded+1c`   ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                      ATTRIBUTION REQUIREMENTS                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Per the CC0 license for audio and original creation for graphics, no       ║
║   attribution is required for any asset. It is good practice to keep the     ║
║   OFL.txt for the font with the project files.                               ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/CHANGELOG.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 [0.8.0] - NO TITLE YET - 2025-XX-XX                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║





 - - - start separating via the time it was submitted - - -




   █  Architectural Changes
      ░ ■ Deprecated the `GlobalHud` autoload in favor of a new, reusable
      ░   `GuiMuteButton` component placed directly in scenes. This completes
      ░   the shift to a fully component-based, scene-driven UI architecture,
      ░   eliminating a piece of legacy global state.

   █  Added
      ░ ■ Rebuilt and connected the entire menu flow (Title, Options, Sound,
      ░   Controls, Credits) using the new scene-based architecture.
      ░ ■ Implemented `@tool` scripts for all new menus, allowing them to be
      ░   visually rendered and laid out directly in the Godot editor.
      ░ ■ Added the new `GuiMuteButton` component to all menu screens for a
      ░   consistent user experience.

   █  Fixed
      ░ ■ Resolved a critical state synchronization bug in `MenuManager` that
      ░   caused unpredictable keyboard navigation after using the mouse. The
      ░   manager now correctly syncs its state with Godot's focus system.
      ░ ■ Hardened menu navigation by preventing non-button UI elements (sliders,
      ░   checkboxes, mute icon) from being part of the keyboard focus chain.
      ░ ■ Corrected the application's entry point to start the menu music
      ░   globally, ensuring it plays seamlessly across all menu scenes.
      ░ ■ Resolved a scene-loading crash caused by an incorrect `@onready`
      ░   variable in the new options menu script.










   █  Architectural Changes
      ░ ■ Began the official "UI Overhaul" by creating a new prototype title
      ░   screen (`gui_title_screen.tscn`) that is fully scene-based and
      ░   leverages Godot's Container nodes for a robust, designer-friendly
      ░   layout, establishing the pattern for all future menu development.

   █  Added
      ░ ■ Created `StyledMenuItem`, a new reusable, component-based menu item
      ░   that is procedurally drawn and highly configurable (size, text, font size).
      ░ ■ Created `LogoDisplay`, a new reusable component for interactive
      ░   footer logos with hover and press feedback.

   █  Fixed
      ░ ■ Resolved a critical input bug where only the first of several UI
      ░   components would correctly process mouse clicks. Components now use
      ░   the correct `mouse_filter` property for reliable, engine-idiomatic
      ░   input handling.










   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   state machine, fully decoupling all states from the global `CombatDB`
      ░   singleton. States now receive their configuration through the
      ░   `PlayerStateData` resource, which is populated by the `Player` owner
      ░   node. This completes a critical step in adhering to the Dependency
      ░   Inversion Principle, making states more modular and testable.
      ░ ■ Hardened system contracts by creating a new `Identifiers` singleton
      ░   to hold all string-based group names and pool keys. All scripts
      ░   were refactored to use these constants, eliminating the risk of
      ░   runtime errors from string typos and improving code safety.
      ░ ■ Refactored the `_ready` functions in `Player` and `BaseBoss` to
      ░   adhere to the Single Responsibility Principle. All initialization
      ░   logic is now delegated to smaller, clearly named helper methods,
      ░   improving code readability and maintainability.

   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   and BaseBoss state machines. All states are now fully decoupled from
      ░   global singletons and receive their configuration through their
      ░   respective data resources (`PlayerStateData`, `BossStateData`).
      ░ ■ Formalized the project's damage system by creating typed `Resource`
      ░   contracts (`DamageInfo`, `DamageResult`), replacing the previous
      ░   use of primitive integers and untyped Dictionaries for robust,
      ░   self-documenting, and type-safe combat interactions.
      ░ ■ Standardized all entity components, including `BaseStateMachine` and
      ░   `ArmorComponent`, to formally implement the `ComponentInterface`
      ░   contract. This unifies the lifecycle and setup for all entity
      ░   behaviors across the entire project.
      ░ ■ Refined `CombatUtils` to adhere to SRP; its sole responsibility is
      ░   now finding a valid `IDamageable` target.

   █  Fixed
      ░ ■ Resolved a visual bug where entity hit-flash colors would not reset
      ░   correctly. The `HealthComponent` now uses a more robust metadata-
      ░   based system to store and restore original entity colors.
      ░ ■ Fixed a "zombie minion" bug where Turrets would continue to fire
      ░   after the boss was defeated. The game director now deactivates all
      ░   minions upon boss death.
      ░ ■ Corrected a parse error in `Turret.gd` caused by an incorrect setup
      ░   call signature after the `BaseStateMachine` was refactored.
      ░ ■ Eliminated `STATIC_CALLED_ON_INSTANCE` warnings by refactoring all
      ░   calls to `CombatUtils.find_damageable` to use the correct static
      ░   script-based syntax.





   █  Fixed
      ░ ■ Resolved a visual bug where the boss's hit-flash color would not
      ░   reset correctly. The `HealthComponent` now uses a more robust
      ░   metadata-based system to store and restore original entity colors.
      ░ ■ Fixed a bug where Turret minions would continue to fire after the
      ░   boss was defeated. The central `game.gd` script now finds and calls a
      ░   new `deactivate()` method on all remaining minions upon boss death.
      ░ ■ Resolved a critical autoload naming conflict caused by `class_name`
      ░   hiding the `Identifiers` singleton, which previously caused a cascade
      ░   of parse errors across the entire project.







      ░ ■ Extended the "Owner-Driven Injection" pattern to the `BaseBoss`
      ░   and its state machine. All boss states are now fully decoupled
      ░   from global singletons, mirroring the clean architecture of the
      ░   Player and unifying the entity design across the project.


=====================================
FILE: ./docs/BRAINSTORM.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═══════╗
║    ██████╗ ██████╗  █████╗ ██╗███╗   ██╗███████╗████████╗ ██████╗ ██████╗ ███╗  ███╗ ║
║   ██╔══██╗██╔══██╗██╔══██╗██║████╗  ██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗████╗ ████║ ║
║   ██████╔╝██████╔╝███████║██║██╔██╗ ██║███████╗   ██║   ██║   ██║██████╔╝██╔████╔██║ ║
║   ██╔══██╗██╔══██╗██╔══██║██║██║╚██╗██║╚════██║   ██║   ██║   ██║██╔══██╗██║╚██╔╝██║ ║
║   ██████╔╝██║  ██║██║  ██║██║██║ ╚████║███████║   ██║   ╚██████╔╝██║  ██║██║ ╚═╝ ██║ ║
║   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝ ║
║                                                                              ╔═══════╝
║              A free-form collection of creative ideas and experiments.       ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       BOX BATTLE BOSS CONCEPTS                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A categorized list of all potential boss ideas for the game. Each concept  ║
║   includes ideas for its theme, mechanics, and unique shader effects.        ║
║                                                                              ║
║   █  PUN-BASED CONCEPTS                                                      ║
║      ░ ■ Beat Box: Rhythm-based boss. Platforms and attacks sync to a beat.  ║
║      ░ ■ Sandbox: Deforms terrain, uses momentum-stealing attacks.           ║
║      ░ ■ Matchbox: Fire-themed, tight vertical arena, limited dash.          ║
║      ░ ■ Toolbox: Utility-themed, projectile-only combat.                    ║
║      ░ ■ Gearbox: Mechanical theme with rotating platforms and gravity shifts.║
║      ░ ■ Strongbox: Defense-themed, tries to corner player.                  ║
║      ░ ■ Icebox: Slippery physics, reduced friction.                         ║
║      ░ ■ Shoebox: Cramped arena, precise movement required.                  ║
║      ░ ■ Jukebox: Different songs change the environmental physics.          ║
║      ░ ■ Mailbox: Arena is filled with flying "letters" as platforms.        ║
║      ░ ■ Puzzle Box: Arena rearranges itself as movement puzzles are solved. ║
║      ░ ■ Shadow Box: Past movements leave shadow trails that become platforms.║
║      ░ ■ Cardboard Box: Platforms are fragile and break after use.           ║
║      ░ ■ Pandora's Box: Randomly opens to release temporary chaos effects.   ║
║      ░ ■ Rubik's Box: Arena rotates in 90-degree chunks.                     ║
║                                                                              ║
║   █  MEGA MAN-INSPIRED CONCEPTS                                              ║
║      ░ ■ Flame Box (Heat Man): Teleports in fire bursts, leaves flame trails.║
║      ░ ■ Ice Box (Ice Man): Slides with momentum, freezes platforms.         ║
║      ░ ■ Electric Box (Elec Man): Zips in straight lines at high speed.      ║
║      ░ ■ Wind Box (Air Man): Constant wind pushes player, affects jumps.     ║
║      ░ ■ Gravity Box (Gravity Man): Gravity flips, ceiling becomes floor.    ║
║      ░ ■ Time Box (Flash Man): Slow-motion bursts, delayed attacks.          ║
║      ░ ■ Plant Box (Wood Man): Platforms grow and shrink, sticky surfaces.   ║
║      ░ ■ Slash Box (Zero/Harpuia): Fast strikes cut through platforms.       ║
║      ░ ■ Phantom Box (Phantom): Stealth/clone attacks, false reflections.    ║
║                                                                              ║
║   █  LOOP-THEMED CONCEPTS                                                    ║
║      ░ ■ Infinite Box: Arena wraps around (left edge connects to right).     ║
║      ░ ■ Möbius Box: Twisted space; jumping up can make you fall down.       ║
║      ░ ■ Pendulum Box: Gravity shifts left/right in a rhythmic swing.        ║
║      ░ ■ Echo Box: Player inputs are repeated after a short delay.           ║
║      ░ ■ Ouroboros Box: The room slowly "eats" itself from the edges inward. ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                        SHADER & VFX BRAINSTORM                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of potential shader and visual effect ideas.                        ║
║                                                                              ║
║   ▒  Prism Box: Chromatic aberration effect, splits attacks into RGB channels.║
║   ▒  Void Box: Black hole distortion that pulls the player and projectiles.  ║
║   ▒  Static Box: Digital noise/glitch effects that can corrupt controls.     ║
║   ▒  Mirror Box: Kaleidoscope/reflection effects, duplicates player attacks. ║
║   ▒  Pulse Box: Rhythmic, concentric shockwave rings.                        ║
║   ▒  Phase Box: Flickers in and out of existence, unpredictable collision.   ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                   ADVANCED MOVEMENT & MECHANICS                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▒  Parrying System: A simple parry could stun the boss or grant the player ║
║      a momentum boost, rewarding precise timing.                             ║
║                                                                              ║
║   ▒  Ledge Grab: A brief pause/slowdown when hitting the top edge of a wall  ║
║      to create a more forgiving window for wall-jumping.                     ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           ADVANCED COMBAT & FEEDBACK CONCEPTS (from Audit)           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A collection of high-impact ideas for improving the "game feel" of combat. ║
║                                                                              ║
║   ▒  Hit-Stop / Hit-Freeze: A micro-pause (e.g., 0.05 seconds) of the entire ║
║      game simulation when a high-impact melee hit connects. This adds a      ║
║      feeling of weight and power to attacks.                                 ║
║                                                                              ║
║   ▒  Attack-Interrupting Windows: Specific boss telegraph animations could   ║
║      have a brief "vulnerable" window. Landing a hit during this window      ║
║      would interrupt the boss's attack and potentially trigger a mini-stun.  ║
║                                                                              ║
║   ▒  Cinematic Phase Transitions: When the boss's health crosses a threshold,║
║      it could enter a brief, invulnerable `PhaseChange` state, play a unique ║
║      animation or visual effect, and then resume combat with its new attack  ║
║      patterns. This makes the phase shifts feel like significant events.     ║
║                                                                              ║
║   ▒  Enhanced Stun Feedback: As the boss's stun meter fills, provide clear   ║
║      feedback to the player. This could include a subtle vignette effect, a  ║
║      pulsing glow on the boss, or a rising audio cue that indicates a stun   ║
║      is imminent.                                                            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 DEVELOPER TOOLS & TOOLING (from Audit)               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Ideas for internal systems that would improve the development workflow.    ║
║                          _NOTE: This is not user-facing text._               ║
║                                                                              ║
║   ▒  Diagnostics Singleton: A dedicated global service for logging important ║
║      but non-crashing gameplay events. For example, it could record every    ║
║      time a pogo attack fails its physics check, or when a damage calculation║
║      is ignored due to invincibility. This would create a detailed log to help║
║      reproduce and debug subtle, hard-to-find edge cases.                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                UI / UX ENHANCEMENT CONCEPTS                          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A collection of high-impact, mobile-friendly UI effects inspired by        ║
║   modern web design (Framer) and arcade games (Geometry Wars).               ║
║                                                                              ║
║   █  Animation & Motion                                                      ║
║      ░ ■ Entrance Stack: Slide, scale, and fade-in menu items with a         ║
║      ░   slight overshoot and a staggered delay for a cascading reveal.      ║
║      ░   (Technique: `create_tween()` with `TRANS_BACK`)                     ║
║      ░ ■ Micro-motion / Idle Breathing: Subtle, slow, looping scale or       ║
║      ░   rotation animations on UI panels to keep the screen feeling alive.  ║
║      ░   (Technique: `AnimationPlayer` or looping `Tween`)                   ║
║      ░ ■ Directional Hover Parallax: Make text/icon layers on a button       ║
║      ░   shift slightly in the opposite direction of the mouse cursor.       ║
║      ░   (Technique: Child `Control` nodes, `Input.get_local_mouse_position()` + `lerp`)║
║      ░ ■ Energy Bursts on Click: A small burst of particles on button press. ║
║      ░   (Technique: `GPUParticles2D` with a low-count, short-lived emission)║
║                                                                              ║
║   █  Shape & Form (Procedural Drawing)                                       ║
║      ░ ■ Animated Rounded Corners: Tween the corner radius of a procedurally ║
║      ░   drawn shape on hover for a fluid morphing effect.                   ║
║      ░   (Technique: `_draw()` with `draw_circle` + `draw_rect`, property tween)║
║      ░ ■ Inset / Layered Borders: Use multiple `draw_rect` calls with        ║
║      ░   different palette colors and slight offsets to create a 2.5D bevel. ║
║      ░ ■ Chamfered Corners: Use `draw_polygon()` to create geometric cutouts.║
║      ░ ■ Dynamic Clipping Mask: Reveal content by animating the size of a    ║
║      ░   parent `Control` node with `clip_contents` enabled.                 ║
║                                                                              ║
║   █  Interactivity & Feedback                                                ║
║      ░ ■ Click Ripple: A circular ripple animates outwards from the click point.║
║      ░   (Technique: `_input()` + tweened properties + `draw_circle()`)      ║
║      ░ ■ Keyboard/Controller Focus Ring: A distinct visual state for non-mouse║
║      ░   selection, like a subtle pulsing of the existing glow effect.       ║
║      ░   (Technique: Animate `glow_size` property when `is_selected` is true)║
║      ░ ■ Haptic Feedback: Use `OS.vibrate()` on mobile for subtle physical feedback.║
║                                                                              ║
║   █  Simple & Efficient Shaders                                              ║
║      ░ ■ Sheen / Moving Highlight: A simple shader that moves a soft gradient║
║      ░   across a surface to simulate a glassy reflection.                   ║
║      ░   (Technique: `ShaderMaterial` with a `smoothstep` ramp, driven by `TIME`)║
║      ░ ■ Noise Grain Overlay: A subtle, low-alpha tiling noise texture to add║
║      ░   surface detail without blurring. (Technique: `TextureRect` with `BLEND_MODE_ADD`)║
║      ░ ■ Vertex Displacement Parallax: A very cheap shader that slightly     ║
║      ░   offsets vertices based on mouse position for a subtle 3D effect.    ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/ARENA_CONCEPTS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║    █████╗ ██████╗ ███████╗███╗   ██╗ █████╗     ██████╗  ██████╗ ███╗   ███╗ ║
║   ██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔══██╗   ██╔═══██╗██╔═══██╗████╗ ████║ ║
║   ███████║██████╔╝█████╗  ██╔██╗ ██║███████║   ██║   ██║██║   ██║██╔████╔██║ ║
║   ██╔══██║██╔══██╗██╔══╝  ██║╚██╗██║██╔══██║   ██║   ██║██║   ██║██║╚██╔╝██║ ║
║   ██║  ██║██║  ██║███████╗██║ ╚████║██║  ██║   ╚██████╔╝╚██████╔╝██║ ╚═╝ ██║ ║
║   ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝    ╚═════╝  ╚═════╝ ╚═╝     ╚═╝ ║
║                                                                              ║
║           A visual library of potential boss battle arena layouts.           ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PUN-THEMED ARENA MOCKUPS                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  "SANDBOX" - Momentum Vampirism                                          ║
║      SPECIAL RULE: No Wall-Jump ability. Boss steals player speed on hit.    ║
║      ####################                                                    ║
║      #..................#                                                    ║
║      #..@...........&...#                                                    ║
║      #..................#                                                    ║
║      #....##########....#                                                    ║
║      #....#........#....#                                                    ║
║      #....#..^^^^..#....#                                                    ║
║      #....#........#....#                                                    ║
║      #....##--##--##....#                                                    ║
║      #..................#                                                    ║
║      #..##...........##.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..#......--.....#.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..##...........##.#                                                    ║
║      #..................#                                                    ║
║      #^^^^^^^^....^^^^^^#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "MATCHBOX" - Fire Theme                                                 ║
║      SPECIAL RULE: Only ONE dash per ground contact.                         ║
║      ####################                                                    ║
║      #@.................#                                                    ║
║      #..................#                                                    ║
║      #..####....####....#                                                    ║
║      #..#..#....#..#....#                                                    ║
║      #..#..######..#....#                                                    ║
║      #..#..........#....#                                                    ║
║      #..#..--##--..#....#                                                    ║
║      #..#........&.#....#                                                    ║
║      #..#..--##--..#....#                                                    ║
║      #..#..........#....#                                                    ║
║      #..#..######..#....#                                                    ║
║      #..#..#....#..#....#                                                    ║
║      #..####....####....#                                                    ║
║      #..................#                                                    ║
║      #..^^^^^^^^^^^^^^..#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "ICEBOX" - Slippery Mechanics                                           ║
║      SPECIAL RULE: Reduced friction - momentum carries much further.         ║
║      ####################                                                    ║
║      #@................&#                                                    ║
║      #--................#                                                    ║
║      #..................#                                                    ║
║      #......########....#                                                    ║
║      #......#......#....#                                                    ║
║      #......#..--..#....#                                                    ║
║      #......#......#....#                                                    ║
║      #......########....#                                                    ║
║      #..................#                                                    ║
║      #........^^^^......#                                                    ║
║      #..................#                                                    ║
║      #......########....#                                                    ║
║      #......#......#....#                                                    ║
║      #......#..--..#....#                                                    ║
║      #......#......#....#                                                    ║
║      #......########....#                                                    ║
║      #..................#                                                    ║
║      #................--#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                     CLASSIC ARCADE-THEMED MOCKUPS                    ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  "CIRCUIT BOX" - Tempest-style                                           ║
║      MECHANIC: Boss in center shoots through tunnels. Player circles outer ring.║
║      ####################                                                    ║
║      #..................#                                                    ║
║      #..###############.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..#..##########.#.#                                                    ║
║      #..#..#........#.#.#                                                    ║
║      #..#..#..####..#.#.#                                                    ║
║      #..#..#..#&&#..#.#.#                                                    ║
║      #..#..#..####..#.#.#                                                    ║
║      #..#..#..@.....#.#.#                                                    ║
║      #..#..##########.#.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..###############.#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "GARDEN BOX" - Centipede-style                                          ║
║      MECHANIC: Boss is a long segmented entity weaving between obstacles.    ║
║      ####################                                                    ║
║      #@................&#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


=====================================
FILE: ./docs/DEPRECATION.md
=====================================
# Project Deprecation Map

This document tracks major file renames and moves across the entire project.

| Old Path | New Path | Reason | Date | Migration Note |
|---|---|---|---|---|
| `res://src/core/Config.gd` | `res://src/core/data/config/config.gd` | Architectural refactor | 2025-08-10 | Autoload path updated in `project.godot`. No script changes required. |
| `res://src/core/settings.gd` | `res://src/core/data/config/settings.gd` | Architectural refactor | 2025-08-10 | Autoload path updated in `project.godot`. No script changes required. |
| `res://src/core/events/*_event.gd` | `res://src/core/events/typed_events/*_event.gd` | Architectural refactor | 2025-08-10 | Update `preload` or `load` paths in scripts if referenced directly. |

=====================================
FILE: ./README.md
=====================================
# BOX BATTLE

```
██████╗  ██████╗ ██╗  ██╗    ██████╗  █████╗ ████████╗████████╗██╗     ███████╗
██╔══██╗██╔═══██╗╗██╗██╔╝    ██╔══██╗██╔══██╗╚══██╔══╝╚══██╔══╝██║     ██╔════╝
██████╔╝██║   ██║╚███╔╝      ██████╔╝███████║   ██║      ██║   ██║     █████╗  
██╔══██╗██║   ██║██╔██╗      ██╔══██╗██╔══██║   ██║      ██║   ██║     ██╔══╝  
██████╔╝╚██████╔╝██╔╝ ██╗    ██████╔╝██║  ██║   ██║      ██║   ███████╗███████╗
╚═════╝  ╚═════╝ ╚═╝  ╚═╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝
```

A combat-focused 2D action game built in Godot 4. This repo contains the engine, gameplay systems, and tools used to produce a modular, maintainable boss-arena prototype.

**Current status (short):** Architecturally refactored and stabilized — unified state machines, componentized entities, data-driven config resources, and a small suite of robust core singletons (EventBus, SceneManager, Sequencer, ObjectPool, CombatUtils).

---

## Highlights (refactor & stability wins)
- Component-based entities (reusable components + `BaseStateMachine`/`BaseState`)
- Interface-driven damage (`IDamageable`) and `CombatUtils` for consistent damage application
- Data-driven tuning via `.tres` resources
- EventBus & Sequencer for decoupled communication and scripted sequences
- Performance improvements: async arena build, shader pre-warm, object pooling
- Key gameplay fixes: pogo mechanic, contact damage deduplication, consistent hit resolution

---

## Quick start (developer)
1. Install Godot 4.x (4.4+ recommended).  
2. Clone the repository.  
3. Open the project in Godot and run `res://scenes/main.tscn` (or the title screen).  
4. Dev tip: run the static script checker / lint from CI locally before pushing.

**Controls (default)**
- Move: WASD / Arrow keys  
- Jump: X  
- Attack: C  
- Dash: Z  
- Heal: Down + Jump (consumes charges)

---

## Repo layout (high level)

```
src/
├── core/          # singletons & infrastructure (EventBus, Sequencer, SceneManager, settings, etc.)
├── entities/      # players, bosses, components, state machines
├── projectiles/   # projectile implementations and pool usage
├── scenes/        # top-level scenes (game, main, loading)
├── ui/            # HUD & menu system (event-driven)
└── arenas/        # layout & encounter data + arena builder
docs/              # design, architecture, BUGS.txt, ADRs
core/              # core helpers & autoload scripts
```

---

## Where to read more (local docs)
- `docs/ARCHITECTURE.txt` — canonical architecture & runtime contracts (component, state machine, singletons).
- `docs/DESIGN.txt` — gameplay mechanics and rationale (pogo, hit logic, buffering).
- `BUGS.txt` — lightweight local bug board (Open / In Progress / Fixed).
- `core/DEPRECATION.md` — migration notes for deprecated APIs.

---

## Contributing / dev notes
- Follow the `ComponentInterface` contract for entity components.
- Clean up long-lived connections and timers on `_exit_tree` to avoid leaks.
- Use `.tres` resource files for tuning so designers can use the editor safely.
- Small PRs are preferred. Reference bug numbers (or BUGS.txt entries) in commit messages (eg. `Fixes #12`).

---

## How to commit docs quickly (VS Code)
1. Create a branch: `git checkout -b docs/refresh`  
2. Save files in the repo paths above.  
3. `git add <files>`  
4. `git commit -m "docs: refresh README + architecture + design + BUGS starter"`  
5. `git push --set-upstream origin docs/refresh` and open a PR if desired.

---

## License
CC0 1.0 Universal — public domain.


=====================================
FILE: ./default_bus_layout.tres
=====================================
[gd_resource type="AudioBusLayout" format=3 uid="uid://c65ja7dwrkbrc"]

[resource]
bus/1/name = &"Music"
bus/1/solo = false
bus/1/mute = false
bus/1/bypass_fx = false
bus/1/volume_db = 0.0
bus/1/send = &"Master"
bus/2/name = &"SFX"
bus/2/solo = false
bus/2/mute = false
bus/2/bypass_fx = false
bus/2/volume_db = 0.0
bus/2/send = &"Master"

=====================================
FILE: ./project.godot
=====================================
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="BOX BATTLE"
run/main_scene="res://src/scenes/main/main.tscn"
config/features=PackedStringArray("4.4", "Mobile")
config/icon="res://icon.svg"

[autoload]

Settings="*res://src/core/data/config/settings.gd"
AudioManager="*res://src/core/systems/audio_manager.gd"
CursorManager="*res://src/core/systems/cursor_manager.gd"
Constants="*res://src/core/util/constants.gd"
AssetPaths="*res://src/core/util/asset_paths.gd"
GameManager="*res://src/core/systems/game_manager.gd"
SceneManager="*res://src/core/systems/scene_manager.gd"
ArenaBuilder="*res://src/core/building/arena_builder.gd"
EventBus="*res://src/core/events/event_bus.gd"
Sequencer="*res://src/core/sequencing/sequencer.gd"
CombatDB="*res://src/core/data/combat_db.gd"
Palette="*res://src/core/util/palette.gd"
ObjectPool="*res://src/core/systems/object_pool.gd"
PhysicsLayers="*res://src/core/util/physics_layers.gd"
CombatUtils="*res://src/core/util/combat_utils.gd"
GridUtils="*res://src/core/util/grid_utils.gd"
CameraManager="*res://src/core/systems/camera_manager.gd"
Identifiers="*res://src/core/util/identifiers.gd"

[display]

window/size/viewport_width=1800
window/size/viewport_height=1000
window/stretch/mode="canvas_items"

[input]

ui_left={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194319,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":65,"key_label":0,"unicode":97,"location":0,"echo":false,"script":null)
]
}
ui_right={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194321,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":68,"key_label":0,"unicode":100,"location":0,"echo":false,"script":null)
]
}
ui_up={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194320,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":87,"key_label":0,"unicode":119,"location":0,"echo":false,"script":null)
]
}
ui_down={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194322,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":83,"key_label":0,"unicode":115,"location":0,"echo":false,"script":null)
]
}
ui_jump={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":32,"physical_keycode":32,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":88,"physical_keycode":88,"key_label":0,"unicode":120,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":46,"physical_keycode":46,"key_label":0,"unicode":46,"location":0,"echo":false,"script":null)
]
}
ui_attack={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":67,"physical_keycode":67,"key_label":0,"unicode":99,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":44,"physical_keycode":44,"key_label":0,"unicode":44,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":true,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":16777218,"physical_keycode":16777218,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":2,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
ui_dash={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":90,"physical_keycode":90,"key_label":0,"unicode":122,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":47,"physical_keycode":47,"key_label":0,"unicode":47,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":true,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":16777217,"physical_keycode":16777217,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":3,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}

[layer_names]

2d_physics/layer_1="player"
2d_physics/layer_2="world"
2d_physics/layer_3="enemy"
2d_physics/layer_4="hazard"
2d_physics/layer_5="enemy_projectile"
2d_physics/layer_6="player_hitbox"
2d_physics/layer_7="player_hurtbox"

[rendering]

renderer/rendering_method="mobile"
environment/defaults/default_clear_color=Color(0, 0, 0, 1)


=====================================
FILE: ./data/combat_config.tres
=====================================
[gd_resource type="Resource" script_class="CombatConfig" load_steps=2 format=3 uid="uid://kov03lmcorvh"]

[ext_resource type="Script" path="res://src/core/data/config/combat_config.gd" id="1_config"]

[resource]
script = ExtResource("1_config")
gravity = 1200.0
player_speed = 450.0
player_jump_force = 680.0
player_pogo_force = 450.0
player_coyote_time = 0.1
player_jump_buffer = 0.1
player_jump_release_dampener = 0.4
player_wall_coyote_time = 0.05
player_fast_fall_gravity_multiplier = 1.4
player_max_air_jumps = 0
player_dash_speed = 1400.0
player_dash_duration = 0.15
player_dash_cooldown = 0.5
player_wall_slide_speed = 120.0
player_wall_jump_force_x = 1650.0
player_wall_jump_force_y = 680.0
player_attack_cooldown = 0.12
player_charge_time = 0.35
player_attack_duration = 0.1
player_attack_friction = 2000.0
player_knockback_speed = 700.0
player_knockback_duration = 0.1
player_hazard_knockback_speed = 400.0
player_determination_per_charge = 10
player_max_health = 5
player_heal_duration = 2.0
player_max_healing_charges = 1
player_invincibility_duration = 1.5
boss_health = 30
boss_patrol_speed = 100.0
boss_invincibility_duration = 0.1


=====================================
FILE: ./src/ui/game_hud/game_hud.gd
=====================================
# src/ui/game_hud/game_hud.gd
# Manages the in-game heads-up display. Phase indicators are now
# correctly initialized and styled.
extends CanvasLayer

@onready var player_health_value: Label = $PlayerInfo/PlayerHealthHBox/PlayerHealthValue
@onready var player_heal_charges_value: Label = $PlayerInfo/PlayerHealChargesHBox/PlayerHealChargesValue
@onready var boss_health_bar: ProgressBar = $BossHealthBar
@onready var phase_indicators: HBoxContainer = $PhaseIndicators

var _phase_squares: Array[Panel] = []
var _total_phases = 3

var _player_health_token: int
var _player_charges_token: int
var _boss_health_token: int
var _boss_phase_token: int
var _boss_died_token: int

# THE FIX: Pre-create the styles once for efficiency and stability.
var _filled_style: StyleBoxFlat
var _empty_style: StyleBoxFlat

func _ready():
	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
	_boss_phase_token = EventBus.on(EventCatalog.BOSS_PHASE_CHANGED, on_boss_phase_changed)
	_boss_died_token = EventBus.on(EventCatalog.BOSS_DIED, on_boss_died)
	
	_create_styles()
	
	var max_health = CombatDB.config.player_max_health
	player_health_value.text = "%d / %d" % [max_health, max_health]
	player_heal_charges_value.text = "0"
	
	var health_bar_style = boss_health_bar.get_theme_stylebox("fill").duplicate()
	health_bar_style.bg_color = Palette.COLOR_PLAYER_PROJECTILE
	boss_health_bar.add_theme_stylebox_override("fill", health_bar_style)
	
	boss_health_bar.max_value = CombatDB.config.boss_health
	boss_health_bar.value = boss_health_bar.max_value
	
	phase_indicators.add_theme_constant_override("separation", 5)
	_create_phase_indicators()

func _exit_tree():
	EventBus.off(_player_health_token)
	EventBus.off(_player_charges_token)
	EventBus.off(_boss_health_token)
	EventBus.off(_boss_phase_token)
	EventBus.off(_boss_died_token)

# THE FIX: Style creation is now in its own function, called once.
func _create_styles():
	_filled_style = StyleBoxFlat.new()
	_filled_style.bg_color = Palette.COLOR_HAZARD_PRIMARY
	_filled_style.border_width_bottom = 3
	_filled_style.border_width_left = 3
	_filled_style.border_width_right = 3
	_filled_style.border_width_top = 3
	_filled_style.border_color = Palette.COLOR_UI_ACCENT_PRIMARY

	_empty_style = _filled_style.duplicate()
	_empty_style.bg_color = Palette.COLOR_BACKGROUND

# THE FIX: This function now correctly calls the update logic to set the initial state.
func _create_phase_indicators():
	for i in range(_total_phases):
		var panel = Panel.new()
		panel.custom_minimum_size = Vector2(40, 40)
		phase_indicators.add_child(panel)
		_phase_squares.append(panel)
	
	# Set the initial visual state to be full.
	_update_phase_visuals(_total_phases)

# --- EventBus Callbacks ---
func on_player_health_changed(payload: PlayerHealthChangedEvent):
	player_health_value.text = str(payload.current_health) + " / " + str(payload.max_health)

func on_player_healing_charges_changed(payload: PlayerHealingChargesChangedEvent):
	player_heal_charges_value.text = str(payload.current_charges)

func on_boss_health_changed(payload: BossHealthChangedEvent):
	boss_health_bar.max_value = payload.max_health
	boss_health_bar.value = payload.current_health

func on_boss_phase_changed(payload: Dictionary):
	var phases_remaining = payload.get("phases_remaining", 1)
	_update_phase_visuals(phases_remaining)

func on_boss_died(_payload):
	_update_phase_visuals(0)

# THE FIX: This now uses the pre-built styles. The logic is confirmed correct
# for right-to-left depletion.
func _update_phase_visuals(phases_remaining: int):
	for i in range(_phase_squares.size()):
		var square = _phase_squares[i]
		if i < phases_remaining:
			square.add_theme_stylebox_override("panel", _filled_style)
		else:
			square.add_theme_stylebox_override("panel", _empty_style)


=====================================
FILE: ./src/ui/game_hud/game_hud.tscn
=====================================
[gd_scene load_steps=4 format=3 uid="uid://c1qkhw0snj226"]

[ext_resource type="Script" path="res://src/ui/game_hud/game_hud.gd" id="1_3f8wa"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_1"]
bg_color = Color(0.262745, 0.262745, 0.262745, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_2"]
bg_color = Color(0.92549, 0.92549, 0.92549, 1)

[node name="GameHUD" type="CanvasLayer"]
script = ExtResource("1_3f8wa")

[node name="PlayerInfo" type="VBoxContainer" parent="."]
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 20.0
offset_top = -100.0
offset_right = 220.0
offset_bottom = -20.0
grow_vertical = 0

[node name="PlayerHealthHBox" type="HBoxContainer" parent="PlayerInfo"]
layout_mode = 2

[node name="PlayerHealthLabel" type="Label" parent="PlayerInfo/PlayerHealthHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "Health:"

[node name="PlayerHealthValue" type="Label" parent="PlayerInfo/PlayerHealthHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "5 / 5"

[node name="PlayerHealChargesHBox" type="HBoxContainer" parent="PlayerInfo"]
layout_mode = 2

[node name="PlayerHealChargesLabel" type="Label" parent="PlayerInfo/PlayerHealChargesHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "Heal Charges:"

[node name="PlayerHealChargesValue" type="Label" parent="PlayerInfo/PlayerHealChargesHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "0"

[node name="BossHealthBar" type="ProgressBar" parent="."]
anchors_preset = 10
anchor_right = 1.0
offset_left = 250.0
offset_top = 20.0
offset_right = -250.0
offset_bottom = 50.0
grow_horizontal = 2
theme_override_styles/background = SubResource("StyleBoxFlat_1")
theme_override_styles/fill = SubResource("StyleBoxFlat_2")
max_value = 30.0
step = 1.0
value = 30.0
show_percentage = false

[node name="PhaseIndicators" type="HBoxContainer" parent="."]
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -220.0
offset_top = 20.0
offset_right = -20.0
offset_bottom = 60.0
grow_horizontal = 0
alignment = 2

=====================================
FILE: ./src/ui/global_hud/global_hud.gd
=====================================
# src/ui/global_hud/global_hud.gd
#
# This autoloaded scene is always present. Its main job is to manage the
# global mute button. It is now fully event-driven and decoupled from any
# specific menu scene.
extends Control

# Preload icons into constants for performance and safety.
const ICON_SOUND_ON = preload(AssetPaths.SPRITE_ICON_SOUND_ON)
const ICON_SOUND_OFF = preload(AssetPaths.SPRITE_ICON_SOUND_OFF)

var mute_button: TextureButton

# Subscription tokens for safe cleanup.
var _menu_opened_token: int
var _menu_closed_token: int
var _audio_settings_token: int

func _ready():
	mute_button = TextureButton.new()
	add_child(mute_button)

	var padding = 40
	await get_tree().process_frame
	mute_button.position = Vector2(get_viewport_rect().size.x - 120, padding)
	mute_button.visible = false # Start hidden by default

	# Connect signals for interaction.
	mute_button.pressed.connect(_on_mute_button_pressed)
	mute_button.mouse_entered.connect(CursorManager.set_pointer_state.bind(true))
	mute_button.mouse_exited.connect(CursorManager.set_pointer_state.bind(false))

	# Subscribe to all necessary events.
	_audio_settings_token = Settings.audio_settings_changed.connect(_update_icon)
	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
	
	# Set the initial icon state once on startup.
	_update_icon()

func _exit_tree():
	# Unsubscribe from all signals and events to prevent memory leaks.
	Settings.audio_settings_changed.disconnect(_update_icon)
	EventBus.off(_menu_opened_token)
	EventBus.off(_menu_closed_token)

# --- EventBus Handlers (The New Visibility Logic) ---

func _on_menu_opened(_payload):
	mute_button.visible = true

func _on_menu_closed(_payload):
	mute_button.visible = false

# --- Internal Functions ---

func _on_mute_button_pressed():
	# Toggle the setting. This emits the 'audio_settings_changed' signal,
	# which our _update_icon function is connected to.
	Settings.music_muted = not Settings.music_muted
	AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)

func _update_icon():
	if Settings.music_muted:
		mute_button.texture_normal = ICON_SOUND_OFF
	else:
		mute_button.texture_normal = ICON_SOUND_ON


=====================================
FILE: ./src/ui/global_hud/global_hud.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://dpcsg3wmlvabm"]

[ext_resource type="Script" path="res://src/ui/global_hud/global_hud.gd" id="1_hud_script"]

[node name="GlobalHUD" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
script = ExtResource("1_hud_script")

=====================================
FILE: ./src/ui/menu_manager/menu_manager.gd
=====================================
# src/ui/menu_manager/menu_manager.gd
# MODIFIED: The manager now correctly handles single-item menus.
extends Node

var menu_items: Array[Control] = []
var current_selection = 0

var _cursor_left: ColorRect
var _cursor_right: ColorRect

func _ready():
	_cursor_left = ColorRect.new()
	_cursor_left.size = Vector2(20, 20)
	_cursor_left.color = Palette.COLOR_UI_ACCENT_PRIMARY
	_cursor_left.visible = false
	add_child(_cursor_left)

	_cursor_right = ColorRect.new()
	_cursor_right.size = Vector2(20, 20)
	_cursor_right.color = Palette.COLOR_UI_ACCENT_PRIMARY
	_cursor_right.visible = false
	add_child(_cursor_right)

func setup_menu(items: Array[Control]):
	if items.is_empty(): return
	self.menu_items = items
	
	for item in menu_items:
		item.focus_entered.connect(_on_item_focused.bind(item))

func _unhandled_input(event):
	if menu_items.is_empty(): return

	if event.is_action_pressed("ui_down"):
		_change_selection(1)
		get_viewport().set_input_as_handled()
	elif event.is_action_pressed("ui_up"):
		_change_selection(-1)
		get_viewport().set_input_as_handled()

func _on_item_focused(focused_item: Control):
	var index = menu_items.find(focused_item)
	if index != -1:
		current_selection = index
	
	_update_cursors(focused_item)
	AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_MOVE)

func _change_selection(amount: int):
	# THE FIX: If there's only one item, play an error sound and stop.
	if menu_items.size() <= 1:
		AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_ERROR)
		return

	var new_selection = (current_selection + amount + menu_items.size()) % menu_items.size()
	menu_items[new_selection].grab_focus()

func _update_cursors(selected_item: Control):
	await get_tree().process_frame
	
	if not is_instance_valid(selected_item): return
	
	var item_pos = selected_item.global_position
	var item_size = selected_item.size
	var cursor_padding = 40
	
	_cursor_left.global_position.y = item_pos.y + (item_size.y - _cursor_left.size.y) / 2
	_cursor_left.global_position.x = item_pos.x - cursor_padding - _cursor_left.size.x
	
	_cursor_right.global_position.y = item_pos.y + (item_size.y - _cursor_right.size.y) / 2
	_cursor_right.global_position.x = item_pos.x + item_size.x + cursor_padding
	
	_cursor_left.visible = true
	_cursor_right.visible = true

=====================================
FILE: ./src/ui/screens/game_over_screen/game_over_screen.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://dnlf14n0wfxm1"]

[ext_resource type="Script" path="res://src/ui/screens/game_over_screen/game_over_screen.gd" id="1_goscr"]

[sub_resource type="LabelSettings" id="LabelSettings_1"]
font_size = 96
font_color = Color(0.8, 0.2, 0.2, 1)

[node name="GameOverScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_goscr")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -291.0
offset_top = -123.0
offset_right = 291.0
offset_bottom = 123.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 100
alignment = 1

[node name="TitleLabel" type="Label" parent="VBoxContainer"]
layout_mode = 2
text = "GAME OVER"
label_settings = SubResource("LabelSettings_1")
horizontal_alignment = 1

[node name="ReturnButton" type="TextureButton" parent="VBoxContainer"]
layout_mode = 2

=====================================
FILE: ./src/ui/screens/game_over_screen/game_over_screen.gd
=====================================
# src/ui/screens/game_over_screen/game_over_screen.gd
#
# This screen is shown when the player's health reaches zero.
extends Control

@onready var return_button: TextureButton = $VBoxContainer/ReturnButton

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	# Configure the button and connect its signal.
	return_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	return_button.pressed.connect(_on_return_button_pressed)

	# Set up the menu manager for keyboard/controller navigation.
	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(return_button, "BACK")])

func _on_return_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_title_screen()


=====================================
FILE: ./src/ui/screens/controls_menu/controls_menu.gd
=====================================
# src/ui/screens/controls_menu/controls_menu.gd
# Displays a static list of the game's controls using a layout that is
# pixel-perfect consistent with the Credits menu.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	
	# --- 1. Title (matches credits_menu.gd) ---
	var title_label = Label.new()
	title_label.text = "Controls"
	title_label.add_theme_font_override("font", load(AssetPaths.FONT_BLACK))
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80
	add_child(title_label)

	# --- 2. Content (centered vertically) ---
	var content_vbox = VBoxContainer.new()
	content_vbox.set_anchors_preset(Control.PRESET_CENTER)
	content_vbox.grow_horizontal = Control.GROW_DIRECTION_BOTH
	content_vbox.grow_vertical = Control.GROW_DIRECTION_BOTH
	content_vbox.add_theme_constant_override("separation", 20)
	add_child(content_vbox)

	var controls_data = [
		{ "action": "Movement", "keys": "Arrow Keys / WASD" },
		{ "action": "Jump", "keys": "Space / X / Period" },
		{ "action": "Attack", "keys": "C / Comma" },
		{ "action": "Dash", "keys": "Z / Slash / Shift" },
		{ "action": "Pause / Menu", "keys": "Enter / P / Escape" },
		{ "action": "Back / Cancel", "keys": "Escape / Backspace" }
	]
	
	for data in controls_data:
		content_vbox.add_child(_create_control_row(data))

	# --- 3. Back Button (matches credits_menu.gd) ---
	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	# CORRECTED: Use the exact centering formula and add as a direct child.
	back_button.position = Vector2((get_viewport_rect().size.x - back_button.size.x) / 2.0, 800)
	back_button.pressed.connect(_on_back_button_pressed)
	add_child(back_button)

	# --- Menu Manager ---
	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(back_button, "BACK")])

func _create_control_row(data: Dictionary) -> HBoxContainer:
	var hbox = HBoxContainer.new()
	hbox.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	hbox.add_theme_constant_override("separation", 40)
	
	var action_label = Label.new()
	action_label.text = data.action
	action_label.custom_minimum_size.x = 400
	action_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_RIGHT
	action_label.add_theme_font_override("font", load(AssetPaths.FONT_BOLD))
	action_label.add_theme_font_size_override("font_size", 36)
	hbox.add_child(action_label)

	var keys_label = Label.new()
	keys_label.text = data.keys
	keys_label.custom_minimum_size.x = 500
	keys_label.add_theme_font_override("font", load(AssetPaths.FONT_REGULAR))
	keys_label.add_theme_font_size_override("font_size", 36)
	hbox.add_child(keys_label)
	
	return hbox

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)


=====================================
FILE: ./src/ui/screens/controls_menu/controls_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cghquk5y1qjwg"]

[ext_resource type="Script" path="res://src/ui/screens/controls_menu/controls_menu.gd" id="1_controls_script"]

[node name="ControlsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_controls_script")

=====================================
FILE: ./src/ui/screens/credits_menu/credits_menu.gd
=====================================
# src/ui/screens/credits_menu/credits_menu.gd
# Displays game credits using a RichTextLabel to handle formatted text and URLs.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	var title_font = load(AssetPaths.FONT_BLACK)

	var title_label = Label.new()
	title_label.text = "Credits"
	add_child(title_label)
	title_label.add_theme_font_override("font", title_font)
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80

	var credits_label = RichTextLabel.new()
	add_child(credits_label)
	credits_label.mouse_filter = Control.MOUSE_FILTER_PASS
	credits_label.add_theme_font_override("normal_font", load(AssetPaths.FONT_REGULAR))
	credits_label.add_theme_font_size_override("normal_font_size", 38)
	credits_label.add_theme_color_override("default_color", Color.WHITE)
	credits_label.position = Vector2(0, 220)
	credits_label.size.x = get_viewport_rect().size.x
	credits_label.size.y = 550
	credits_label.bbcode_enabled = true

	credits_label.text = """
[center]A Game By Steven Casteel[/center]
[center][url=https://www.stevencasteel.com/]www.stevencasteel.com[/url][/center]

[center]Built with the [url=https://godotengine.org/]Godot Engine[/url][/center]
[center]AI-Assisted by [url=https://gemini.google.com/]Gemini[/url][/center]

[center]Find me on [url=https://www.youtube.com/@stevencasteel]YouTube[/url] and [url=http://github.com/stevencasteel]GitHub[/url][/center]
"""
	credits_label.meta_clicked.connect(_on_meta_clicked)
	credits_label.meta_hover_started.connect(func(_meta): CursorManager.set_pointer_state(true))
	credits_label.meta_hover_ended.connect(func(_meta): CursorManager.set_pointer_state(false))

	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	add_child(back_button)
	back_button.position.x = (get_viewport_rect().size.x - back_button.size.x) / 2
	back_button.position.y = 800
	back_button.pressed.connect(_on_back_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(back_button, "BACK")])

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_meta_clicked(meta):
	OS.shell_open(str(meta))

func _on_back_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)

=====================================
FILE: ./src/ui/screens/credits_menu/credits_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://b8txy2d7jrhwg"]

[ext_resource type="Script" path="res://src/ui/screens/credits_menu/credits_menu.gd" id="1_credits_script"]

[node name="CreditsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_credits_script")

=====================================
FILE: ./src/ui/screens/options_menu/options_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://ddgtf7n0tqvot"]

[ext_resource type="Script" path="res://src/ui/screens/options_menu/options_menu.gd" id="1_options_script"]

[node name="OptionsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_options_script")

=====================================
FILE: ./src/ui/screens/options_menu/options_menu.gd
=====================================
# src/ui/screens/options_menu/options_menu.gd
# Manages the Options menu, which acts as a hub to navigate to other screens.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	var title_font = load(AssetPaths.FONT_BLACK)
	
	var title_label = Label.new()
	title_label.text = "Options"
	add_child(title_label)
	title_label.add_theme_font_override("font", title_font)
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80
	
	var sound_button = TextureButton.new()
	sound_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_SOUND)
	add_child(sound_button)
	sound_button.position = Vector2((get_viewport_rect().size.x - sound_button.size.x) / 2, 300)
	
	var controls_button = TextureButton.new()
	controls_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_CONTROLS)
	add_child(controls_button)
	controls_button.position = Vector2((get_viewport_rect().size.x - controls_button.size.x) / 2, 450)

	var credits_button = TextureButton.new()
	credits_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_CREDITS)
	add_child(credits_button)
	credits_button.position = Vector2((get_viewport_rect().size.x - credits_button.size.x) / 2, 600)
	
	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	add_child(back_button)
	back_button.position = Vector2((get_viewport_rect().size.x - back_button.size.x) / 2, 800)
	
	sound_button.pressed.connect(_on_sound_button_pressed)
	controls_button.pressed.connect(_on_controls_button_pressed)
	credits_button.pressed.connect(_on_credits_button_pressed)
	back_button.pressed.connect(_on_back_button_pressed)
	
	var menu = MenuManager.new()
	add_child(menu)
	
	var menu_items = [
		MenuManager.MenuItem.new(sound_button, "SELECT"),
		MenuManager.MenuItem.new(controls_button, "SELECT"),
		MenuManager.MenuItem.new(credits_button, "SELECT"),
		MenuManager.MenuItem.new(back_button, "BACK")
	]
	menu.setup_menu(menu_items)

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_sound_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_SOUND_MENU)

func _on_controls_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_CONTROLS_MENU)

func _on_credits_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_CREDITS_MENU)

func _on_back_button_pressed():
	SceneManager.go_to_title_screen()

=====================================
FILE: ./src/ui/screens/sound_menu/sound_menu.gd
=====================================
# src/ui/screens/sound_menu/sound_menu.gd
# Manages the sound settings screen, now with a layout that is
# pixel-perfect consistent with the Credits menu.
extends Control

const CustomSliderScript = preload(AssetPaths.SCRIPT_CUSTOM_SLIDER)
const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

var master_volume_label: Label
var music_volume_label: Label
var sfx_volume_label: Label
var master_mute_checkbox: TextureButton
var music_mute_checkbox: TextureButton
var sfx_mute_checkbox: TextureButton

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	
	# --- 1. Title (matches credits_menu.gd) ---
	var title_label = Label.new()
	title_label.text = "Sound Settings"
	title_label.add_theme_font_override("font", load(AssetPaths.FONT_BLACK))
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80
	add_child(title_label)

	# --- 2. Content (centered vertically) ---
	var content_vbox = VBoxContainer.new()
	content_vbox.set_anchors_preset(Control.PRESET_CENTER)
	content_vbox.grow_horizontal = Control.GROW_DIRECTION_BOTH
	content_vbox.grow_vertical = Control.GROW_DIRECTION_BOTH
	content_vbox.add_theme_constant_override("separation", 50)
	add_child(content_vbox)
	
	content_vbox.add_child(_create_volume_row("MASTER", Settings.master_volume, "master"))
	content_vbox.add_child(_create_volume_row("MUSIC", Settings.music_volume, "music"))
	content_vbox.add_child(_create_volume_row("SFX", Settings.sfx_volume, "sfx"))

	# --- 3. Back Button (matches credits_menu.gd) ---
	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	# CORRECTED: Use the exact centering formula and add as a direct child.
	back_button.position = Vector2((get_viewport_rect().size.x - back_button.size.x) / 2.0, 800)
	back_button.pressed.connect(_on_back_button_pressed)
	add_child(back_button)

	# --- Menu Manager ---
	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(back_button, "BACK")])

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _process(_delta):
	if master_volume_label: master_volume_label.text = str(int(Settings.master_volume * 100))
	if music_volume_label: music_volume_label.text = str(int(Settings.music_volume * 100))
	if sfx_volume_label: sfx_volume_label.text = str(int(Settings.sfx_volume * 100))
	
	if master_mute_checkbox: _update_checkbox_texture(master_mute_checkbox, Settings.master_muted)
	if music_mute_checkbox: _update_checkbox_texture(music_mute_checkbox, Settings.music_muted)
	if sfx_mute_checkbox: _update_checkbox_texture(sfx_mute_checkbox, Settings.sfx_muted)

func _create_volume_row(label_text: String, initial_volume: float, type: String) -> HBoxContainer:
	var hbox = HBoxContainer.new()
	hbox.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	hbox.add_theme_constant_override("separation", 20)

	var row_label = Label.new()
	row_label.text = label_text
	row_label.custom_minimum_size.x = 220
	row_label.add_theme_font_override("font", load(AssetPaths.FONT_BOLD))
	row_label.add_theme_font_size_override("font_size", 48)
	hbox.add_child(row_label)

	var slider = CustomSliderScript.new()
	slider.set_value(initial_volume)
	slider.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	hbox.add_child(slider)

	var volume_label = Label.new()
	volume_label.custom_minimum_size.x = 120
	volume_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	volume_label.add_theme_font_override("font", load(AssetPaths.FONT_REGULAR))
	volume_label.add_theme_font_size_override("font_size", 48)
	hbox.add_child(volume_label)

	var checkbox = TextureButton.new()
	checkbox.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	hbox.add_child(checkbox)
	
	match type:
		"master":
			master_volume_label = volume_label
			master_mute_checkbox = checkbox
			slider.value_changed.connect(func(new_value): Settings.master_volume = new_value)
			checkbox.pressed.connect(func(): Settings.master_muted = not Settings.master_muted)
		"music":
			music_volume_label = volume_label
			music_mute_checkbox = checkbox
			slider.value_changed.connect(func(new_value): Settings.music_volume = new_value)
			checkbox.pressed.connect(func(): Settings.music_muted = not Settings.music_muted)
		"sfx":
			sfx_volume_label = volume_label
			sfx_mute_checkbox = checkbox
			slider.value_changed.connect(func(new_value): Settings.sfx_volume = new_value)
			checkbox.pressed.connect(func(): Settings.sfx_muted = not Settings.sfx_muted)
	
	return hbox

func _update_checkbox_texture(button_ref: TextureButton, is_muted: bool):
	var new_texture = load(AssetPaths.SPRITE_CHECKBOX_UNCHECKED)
	if is_muted:
		new_texture = load(AssetPaths.SPRITE_CHECKBOX_CHECKED)
	
	if button_ref.texture_normal != new_texture:
		button_ref.texture_normal = new_texture

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)


=====================================
FILE: ./src/ui/screens/sound_menu/sound_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://bapc10ey0j27g"]

[ext_resource type="Script" path="res://src/ui/screens/sound_menu/sound_menu.gd" id="1_sound_script"]

[node name="SoundMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_sound_script")

=====================================
FILE: ./src/ui/screens/victory_screen/victory_screen.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cx6i2wt2j05y4"]

[ext_resource type="Script" path="res://src/ui/screens/victory_screen/victory_screen.gd" id="1_vsscr"]

[sub_resource type="LabelSettings" id="LabelSettings_1"]
font_size = 96
font_color = Color(0.2, 0.8, 0.2, 1)

[node name="VictoryScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_vsscr")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 100
alignment = 1

[node name="TitleLabel" type="Label" parent="VBoxContainer"]
layout_mode = 2
text = "VICTORY"
label_settings = SubResource("LabelSettings_1")
horizontal_alignment = 1

[node name="ReturnButton" type="TextureButton" parent="VBoxContainer"]
layout_mode = 2

=====================================
FILE: ./src/ui/screens/victory_screen/victory_screen.gd
=====================================
# src/ui/screens/victory_screen/victory_screen.gd
# This screen is shown when the player defeats the boss.
extends Control

@onready var return_button: TextureButton = $VBoxContainer/ReturnButton

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	return_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	return_button.pressed.connect(_on_return_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(return_button, "BACK")])

func _on_return_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_title_screen()

=====================================
FILE: ./src/ui/screens/title_screen/title_screen.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cglqfxtqgxwul"]

[ext_resource type="Script" path="res://src/ui/screens/title_screen/title_screen.gd" id="1_title_script"]

[node name="TitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_title_script")

=====================================
FILE: ./src/ui/screens/title_screen/title_screen.gd
=====================================
# src/ui/screens/title_screen/title_screen.gd
# This script controls the main title screen.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	await get_tree().process_frame
	AudioManager.play_music(AssetPaths.AUDIO_MUSIC_TITLE)

	var title_graphic = TextureRect.new()
	title_graphic.texture = load(AssetPaths.SPRITE_TITLE)
	add_child(title_graphic)
	title_graphic.position = Vector2((get_viewport_rect().size.x - title_graphic.size.x) / 2, 220)

	var start_button = TextureButton.new()
	start_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_START)
	add_child(start_button)
	start_button.position = Vector2((get_viewport_rect().size.x - start_button.size.x) / 2, 450)

	var options_button = TextureButton.new()
	options_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_OPTIONS)
	add_child(options_button)
	options_button.position = Vector2((get_viewport_rect().size.x - options_button.size.x) / 2, 600)

	start_button.pressed.connect(_on_start_button_pressed)
	options_button.pressed.connect(_on_options_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	
	var menu_items = [
		MenuManager.MenuItem.new(start_button, "START"),
		MenuManager.MenuItem.new(options_button, "SELECT")
	]
	menu.setup_menu(menu_items)

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_start_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.start_game(AssetPaths.SCRIPT_ARENA_00_ENCOUNTER)

func _on_options_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)


=====================================
FILE: ./src/ui/components/styled_menu_item/styled_menu_item.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cgt63w7k4w5gq"]

[ext_resource type="Script" path="res://src/ui/components/styled_menu_item/styled_menu_item.gd" id="1_menu_item_script"]

[node name="StyledMenuItem" type="Control"]
custom_minimum_size = Vector2(400, 80)
layout_mode = 3
anchors_preset = 0
script = ExtResource("1_menu_item_script")

=====================================
FILE: ./src/ui/components/styled_menu_item/styled_menu_item.gd
=====================================
# src/ui/components/styled_menu_item/styled_menu_item.gd
# The core logic for our new, reusable, procedurally-drawn menu item.
@tool
class_name StyledMenuItem
extends Control

signal pressed

@export var text: String = "Menu Item" : set = set_text
@export var font_size: int = 48 : set = set_font_size

@export var glow_size: float = 0.0 : set = set_glow_size
@export var glow_alpha: float = 0.0 : set = set_glow_alpha

var is_hovered: bool = false
var is_pressed: bool = false
var is_selected: bool = false

var _font: Font
var _active_tween: Tween

func _ready() -> void:
	_font = load(AssetPaths.FONT_BOLD)
	focus_mode = FOCUS_ALL
	mouse_filter = MOUSE_FILTER_STOP
	
	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)
	resized.connect(queue_redraw)
	focus_entered.connect(_on_focus_entered)
	focus_exited.connect(_on_focus_exited)

func _gui_input(event: InputEvent) -> void:
	if event.is_action_pressed("ui_accept") and has_focus():
		get_viewport().set_input_as_handled()
		AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)
		emit_signal("pressed")
		_show_keyboard_press_feedback()
		return

	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.is_pressed():
			is_pressed = true
			queue_redraw()
		else:
			if is_pressed:
				AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)
				emit_signal("pressed")
				is_pressed = false
				queue_redraw()

func _show_keyboard_press_feedback() -> void:
	is_pressed = true
	queue_redraw()
	await get_tree().create_timer(0.1).timeout
	if not is_instance_valid(self): return
	is_pressed = false
	queue_redraw()

func _draw() -> void:
	var bg_color: Color
	var text_color: Color
	var border_color: Color
	var border_width: float = 3.0

	if is_pressed:
		bg_color = Palette.get_color(2)
		text_color = Palette.COLOR_TEXT_PRIMARY
		border_color = Palette.COLOR_UI_ACCENT_PRIMARY
	elif is_hovered or is_selected:
		bg_color = Palette.COLOR_UI_ACCENT_PRIMARY
		text_color = Palette.COLOR_BACKGROUND
		border_color = Palette.get_color(4)
	else:
		bg_color = Palette.COLOR_UI_PANEL_BG
		text_color = Palette.COLOR_TEXT_PRIMARY
		border_color = Palette.COLOR_UI_ACCENT_PRIMARY

	if (is_hovered or is_selected) and glow_size > 0.0 and glow_alpha > 0.0:
		var glow_base_color = Palette.COLOR_UI_GLOW
		var final_glow_color = Color(glow_base_color.r, glow_base_color.g, glow_base_color.b, glow_alpha)
		var glow_rect = Rect2(Vector2.ZERO, size).grow(glow_size)
		draw_rect(glow_rect, final_glow_color)

	draw_rect(Rect2(Vector2.ZERO, size), bg_color)
	draw_rect(Rect2(Vector2.ZERO, size), border_color, false, border_width)

	var text_width = _font.get_string_size(text, HORIZONTAL_ALIGNMENT_CENTER, -1, font_size).x
	var text_pos_x = (size.x - text_width) / 2
	var text_pos_y = (size.y / 2) + (font_size / 3.0)
	draw_string(_font, Vector2(text_pos_x, text_pos_y), text, HORIZONTAL_ALIGNMENT_LEFT, -1, font_size, text_color)

func set_text(new_text: String):
	if text != new_text:
		text = new_text
		queue_redraw()

func set_font_size(new_size: int):
	if font_size != new_size:
		font_size = new_size
		queue_redraw()

func set_glow_size(value: float):
	glow_size = value
	queue_redraw()

func set_glow_alpha(value: float):
	glow_alpha = value
	queue_redraw()

func _on_mouse_entered() -> void:
	is_hovered = true
	grab_focus()
	CursorManager.set_pointer_state(true)

func _on_mouse_exited() -> void:
	is_hovered = false
	if is_pressed:
		is_pressed = false
		queue_redraw()
	CursorManager.set_pointer_state(false)

func _on_focus_entered():
	is_selected = true
	_animate_selection(true)
	queue_redraw()

func _on_focus_exited():
	is_selected = false
	_animate_selection(false)
	queue_redraw()

func _animate_selection(p_is_selected: bool):
	if _active_tween and _active_tween.is_valid():
		_active_tween.kill()
	
	_active_tween = create_tween().set_parallel(true)
	var target_glow_size = 28.0 if p_is_selected else 0.0
	# THE FIX: Increased target alpha from 0.1 to 0.2
	var target_glow_alpha = 0.2 if p_is_selected else 0.0
	var duration = 0.3 if p_is_selected else 0.2
	
	_active_tween.tween_property(self, "glow_size", target_glow_size, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	_active_tween.tween_property(self, "glow_alpha", target_glow_alpha, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)


=====================================
FILE: ./src/ui/components/custom_slider/custom_slider.gd
=====================================
# src/ui/components/custom_slider/custom_slider.gd
#
# A self-contained, reusable custom slider component.
extends TextureRect

signal value_changed(value)

var knob: TextureRect
var is_dragging = false
var min_x = 0.0
var max_x = 0.0
var drag_offset = 0.0
var _initial_value = -1.0

func _ready():
	self.texture = load(AssetPaths.SPRITE_SLIDER_TRACK)
	
	knob = TextureRect.new()
	knob.texture = load(AssetPaths.SPRITE_SLIDER_KNOB)
	add_child(knob)
	
	knob.mouse_entered.connect(_on_knob_mouse_entered)
	knob.mouse_exited.connect(_on_knob_mouse_exited)
	
	# THE FIX: Wait for the next frame. This ensures any parent containers
	# have finished arranging their children before we calculate our bounds.
	await get_tree().process_frame
	
	knob.position.y = (size.y - knob.size.y) / 2
	min_x = global_position.x
	max_x = global_position.x + size.x - knob.size.x
	
	if _initial_value >= 0.0:
		var new_x_pos = min_x + (max_x - min_x) * _initial_value
		knob.global_position.x = clamp(new_x_pos, min_x, max_x)

func set_value(initial_value: float):
	_initial_value = initial_value

func _process(_delta):
	if is_dragging:
		var global_mouse_pos = get_global_mouse_position()
		knob.global_position.x = clamp(global_mouse_pos.x - drag_offset, min_x, max_x)
		
		if (max_x - min_x) > 0:
			var current_value = (knob.global_position.x - min_x) / (max_x - min_x)
			emit_signal("value_changed", current_value)

func _gui_input(event):
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var knob_rect = knob.get_global_rect()
		
		if event.is_pressed():
			if knob_rect.has_point(event.global_position):
				is_dragging = true
				drag_offset = event.global_position.x - knob.global_position.x
		else:
			is_dragging = false
			if not knob_rect.has_point(get_global_mouse_position()):
				CursorManager.set_pointer_state(false)
			drag_offset = 0.0

func _on_knob_mouse_entered():
	CursorManager.set_pointer_state(true)

func _on_knob_mouse_exited():
	if not is_dragging:
		CursorManager.set_pointer_state(false)

=====================================
FILE: ./src/ui/components/logo_display/logo_display.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://b1c2d3e4f5g6h"]

[ext_resource type="Script" path="res://src/ui/components/logo_display/logo_display.gd" id="1_logo_script"]

[node name="LogoDisplay" type="Control"]
custom_minimum_size = Vector2(200, 200)
layout_mode = 3
anchors_preset = 0
script = ExtResource("1_logo_script")

[node name="TextureRect" type="TextureRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
expand_mode = 1
stretch_mode = 5

=====================================
FILE: ./src/ui/components/logo_display/logo_display.gd
=====================================
@tool
class_name LogoDisplay
extends Control

signal pressed(logo_name)

@onready var texture_rect: TextureRect = $TextureRect

@export var texture: Texture2D:
	set(value):
		texture = value
		if is_instance_valid(texture_rect):
			texture_rect.texture = texture

@export var logo_name: String = "Logo"
@export var glow_size: float = 0.0 : set = set_glow_size
@export var glow_alpha: float = 0.0 : set = set_glow_alpha

var is_hovered: bool = false
var is_pressed: bool = false
var _active_tween: Tween

func _ready():
	mouse_filter = MOUSE_FILTER_STOP
	
	if is_instance_valid(texture_rect) and texture:
		texture_rect.texture = texture

	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)

func _gui_input(event: InputEvent) -> void:
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.is_pressed():
			is_pressed = true
			queue_redraw()
		else:
			if is_pressed:
				AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)
				emit_signal("pressed", logo_name)
				is_pressed = false
				queue_redraw()

func _draw() -> void:
	if is_hovered and glow_size > 0.0 and glow_alpha > 0.0:
		var glow_base_color = Palette.COLOR_UI_GLOW
		var final_glow_color = Color(glow_base_color.r, glow_base_color.g, glow_base_color.b, glow_alpha)
		var glow_rect = Rect2(Vector2.ZERO, size).grow(glow_size)
		draw_rect(glow_rect, final_glow_color)

func set_glow_size(value: float):
	glow_size = value
	queue_redraw()

func set_glow_alpha(value: float):
	glow_alpha = value
	queue_redraw()

func _on_mouse_entered():
	is_hovered = true
	CursorManager.set_pointer_state(true)
	AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_MOVE)
	_animate_hover(true)

func _on_mouse_exited():
	is_hovered = false
	if is_pressed:
		is_pressed = false
		queue_redraw()
	CursorManager.set_pointer_state(false)
	_animate_hover(false)

func _animate_hover(p_is_hovered: bool):
	if _active_tween and _active_tween.is_valid():
		_active_tween.kill()
	
	_active_tween = create_tween().set_parallel(true)
	var target_glow_size = 20.0 if p_is_hovered else 0.0
	# THE FIX: Increased target alpha from 0.1 to 0.2
	var target_glow_alpha = 0.2 if p_is_hovered else 0.0
	var duration = 0.3 if p_is_hovered else 0.2
	
	_active_tween.tween_property(self, "glow_size", target_glow_size, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	_active_tween.tween_property(self, "glow_alpha", target_glow_alpha, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)

=====================================
FILE: ./src/scenes/loading/loading_screen.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://loading_screen_scene_id"]

[ext_resource type="Script" path="res://src/scenes/loading/loading_screen.gd" id="1_loading_script"]

[node name="LoadingScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_loading_script")

[node name="ColorRect" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="Label" type="Label" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -75.0
offset_top = -16.5
offset_right = 75.0
offset_bottom = 16.5
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 30
text = "Loading..."
horizontal_alignment = 1
vertical_alignment = 1

[node name="ShaderPrewarmViewport" type="SubViewportContainer" parent="."]
custom_minimum_size = Vector2(1, 1)
layout_mode = 0
offset_left = -10.0
offset_top = -10.0
offset_right = -9.0
offset_bottom = -9.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="ShaderPrewarmViewport"]
handle_input_locally = false
size = Vector2i(1, 1)
render_target_update_mode = 4

=====================================
FILE: ./src/scenes/loading/loading_screen.gd
=====================================
# src/scenes/loading/loading_screen.gd
#
# This script handles the pre-building of the level AND pre-warming shaders
# to prevent stuttering.
extends Control

@onready var prewarm_viewport: SubViewport = $ShaderPrewarmViewport/SubViewport

const SHADER_PREWARM_SCENES = [
	AssetPaths.SCENE_PLAYER,
	AssetPaths.SCENE_BASE_BOSS,
	AssetPaths.SCENE_PLAYER_SHOT,
	AssetPaths.SCENE_BOSS_SHOT
]

func _ready():
	if GameManager.state.current_encounter_script_path.is_empty():
		print("ERROR: No encounter script specified in GameManager. Returning to title.")
		# CORRECTED: Use SceneManager for consistency.
		SceneManager.go_to_title_screen()
		return

	_load_level()

func _load_level():
	await get_tree().process_frame
	
	await _prewarm_shaders()
	
	# CORRECTED: The call now matches the updated signature and works correctly.
	GameManager.state.prebuilt_level = await ArenaBuilder.build_level_async()
	
	await get_tree().process_frame
	
	SceneManager.go_to_scene(AssetPaths.SCENE_GAME)

func _prewarm_shaders() -> void:
	print("Starting shader pre-warming...")
	for scene_path in SHADER_PREWARM_SCENES:
		var instance = load(scene_path).instantiate()
		prewarm_viewport.add_child(instance)
		await get_tree().process_frame
		instance.queue_free()
	
	print("Shader pre-warming complete.")


=====================================
FILE: ./src/scenes/game/game.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://game_scene_unique_id"]

[ext_resource type="Script" path="res://src/scenes/game/game.gd" id="1_game_script"]

[node name="Game" type="Node"]
script = ExtResource("1_game_script")

[node name="Camera2D" type="Camera2D" parent="."]

=====================================
FILE: ./src/scenes/game/game.gd
=====================================
# src/scenes/game/game.gd
# CORRECTED: Uses Identifiers constants for group checks.
extends Node

var player_node: Node = null
var level_container: Node = null
@onready var camera: Camera2D = $Camera2D
var _boss_died_token: int = 0
var _death_sequence_handle: SequenceHandle

func _ready():
	_boss_died_token = EventBus.on(EventCatalog.BOSS_DIED, _on_boss_died)
	if GameManager.state.prebuilt_level:
		level_container = GameManager.state.prebuilt_level
		GameManager.state.prebuilt_level = null
	else:
		level_container = await ArenaBuilder.build_level_async()
	
	if is_instance_valid(level_container):
		add_child(level_container)
		await get_tree().process_frame
		var build_data: LevelBuildData = level_container.get_meta("build_data")
		if build_data:
			CameraManager.center_camera_on_arena(camera, build_data.dimensions_tiles)
			await get_tree().process_frame
			var terrain_builder = TerrainBuilder.new()
			terrain_builder.fill_viewport(level_container, build_data, camera)

	player_node = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER)
	if is_instance_valid(player_node):
		player_node.died.connect(_on_player_died)

func _exit_tree():
	EventBus.off(_boss_died_token)
	if is_instance_valid(_death_sequence_handle):
		_death_sequence_handle.cancel()
	get_tree().paused = false

func _on_player_died():
	SceneManager.go_to_game_over()

func _on_boss_died(payload: Dictionary):
	if is_instance_valid(player_node): player_node.set_physics_process(false)
	var boss_node = payload.get("boss_node")

	_deactivate_all_minions()

	var wait_step_1 = WaitStep.new(); wait_step_1.duration = 1.0
	var wait_step_2 = WaitStep.new(); wait_step_2.duration = 1.5
	var death_sequence: Array[SequenceStep] = [wait_step_1, wait_step_2]
	
	_death_sequence_handle = Sequencer.run_sequence(death_sequence)
	await _death_sequence_handle.finished
	
	if is_instance_valid(boss_node): boss_node.queue_free()
	
	if is_instance_valid(_death_sequence_handle):
		SceneManager.go_to_victory()

func _deactivate_all_minions():
	var minions = get_tree().get_nodes_in_group(Identifiers.Groups.ENEMY)
	for minion in minions:
		if minion.has_method("deactivate"):
			minion.deactivate()

=====================================
FILE: ./src/scenes/dev/gui_sound_menu.gd
=====================================
# src/scenes/dev/gui_sound_menu.gd
@tool
extends Control

const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)
const CustomSliderScript = preload(AssetPaths.SCRIPT_CUSTOM_SLIDER)

@onready var menu_items_vbox: VBoxContainer = %MenuItemsVBox
@onready var back_button: StyledMenuItem = %BackButton

var master_volume_label: Label
var music_volume_label: Label
var sfx_volume_label: Label
var master_mute_checkbox: TextureButton
var music_mute_checkbox: TextureButton
var sfx_mute_checkbox: TextureButton

func _ready():
	for c in menu_items_vbox.get_children():
		c.queue_free()
	
	menu_items_vbox.add_child(_create_volume_row("MASTER", Settings.master_volume, "master"))
	menu_items_vbox.add_child(_create_volume_row("MUSIC", Settings.music_volume, "music"))
	menu_items_vbox.add_child(_create_volume_row("SFX", Settings.sfx_volume, "sfx"))

	_update_ui_from_settings()
	
	if not Engine.is_editor_hint():
		back_button.text = "BACK"
		back_button.pressed.connect(_on_back_button_pressed)
		
		Settings.audio_settings_changed.connect(_update_ui_from_settings)
		
		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		
		var menu_items: Array[Control] = [back_button]
		menu_manager.setup_menu(menu_items)
		
		await get_tree().process_frame
		back_button.grab_focus()
	else:
		back_button.text = "BACK"

func _exit_tree():
	if not Engine.is_editor_hint():
		if Settings.audio_settings_changed.is_connected(_update_ui_from_settings):
			Settings.audio_settings_changed.disconnect(_update_ui_from_settings)

func _update_ui_from_settings():
	if master_volume_label: master_volume_label.text = str(int(Settings.master_volume * 100))
	if music_volume_label: music_volume_label.text = str(int(Settings.music_volume * 100))
	if sfx_volume_label: sfx_volume_label.text = str(int(Settings.sfx_volume * 100))
	
	if master_mute_checkbox: _update_checkbox_texture(master_mute_checkbox, Settings.master_muted)
	if music_mute_checkbox: _update_checkbox_texture(music_mute_checkbox, Settings.music_muted)
	if sfx_mute_checkbox: _update_checkbox_texture(sfx_mute_checkbox, Settings.sfx_muted)

func _create_volume_row(label_text: String, initial_volume: float, type: String) -> HBoxContainer:
	var hbox = HBoxContainer.new()
	hbox.alignment = HBoxContainer.ALIGNMENT_CENTER
	hbox.add_theme_constant_override("separation", 20)

	var row_label = Label.new()
	row_label.text = label_text
	row_label.custom_minimum_size.x = 220
	row_label.add_theme_font_override("font", load(AssetPaths.FONT_BOLD))
	row_label.add_theme_font_size_override("font_size", 48)
	hbox.add_child(row_label)

	var slider = CustomSliderScript.new()
	slider.set_value(initial_volume)
	slider.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	slider.focus_mode = FOCUS_NONE
	hbox.add_child(slider)

	var volume_label = Label.new()
	volume_label.custom_minimum_size.x = 120
	volume_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	volume_label.add_theme_font_override("font", load(AssetPaths.FONT_REGULAR))
	volume_label.add_theme_font_size_override("font_size", 48)
	hbox.add_child(volume_label)

	var checkbox = TextureButton.new()
	checkbox.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	checkbox.focus_mode = FOCUS_NONE
	hbox.add_child(checkbox)
	
	match type:
		"master":
			master_volume_label = volume_label
			master_mute_checkbox = checkbox
			if not Engine.is_editor_hint():
				slider.value_changed.connect(func(new_value): Settings.master_volume = new_value)
				checkbox.pressed.connect(func(): Settings.master_muted = not Settings.master_muted)
		"music":
			music_volume_label = volume_label
			music_mute_checkbox = checkbox
			if not Engine.is_editor_hint():
				slider.value_changed.connect(func(new_value): Settings.music_volume = new_value)
				checkbox.pressed.connect(func(): Settings.music_muted = not Settings.music_muted)
		"sfx":
			sfx_volume_label = volume_label
			sfx_mute_checkbox = checkbox
			if not Engine.is_editor_hint():
				slider.value_changed.connect(func(new_value): Settings.sfx_volume = new_value)
				checkbox.pressed.connect(func(): Settings.sfx_muted = not Settings.sfx_muted)
	
	return hbox

func _update_checkbox_texture(button_ref: TextureButton, is_muted: bool):
	var new_texture = load(AssetPaths.SPRITE_CHECKBOX_UNCHECKED) if not is_muted else load(AssetPaths.SPRITE_CHECKBOX_CHECKED)
	if button_ref.texture_normal != new_texture:
		button_ref.texture_normal = new_texture

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_OPTIONS_MENU)

=====================================
FILE: ./src/scenes/dev/gui_mute_button.gd
=====================================
# src/scenes/dev/gui_mute_button.gd
@tool
extends TextureButton

const ICON_SOUND_ON = preload(AssetPaths.SPRITE_ICON_SOUND_ON)
const ICON_SOUND_OFF = preload(AssetPaths.SPRITE_ICON_SOUND_OFF)

func _ready():
	# THE FIX: Make this button invisible to keyboard/controller focus navigation.
	# It can still be clicked by the mouse.
	focus_mode = FOCUS_NONE
	
	_update_icon()

	if not Engine.is_editor_hint():
		self.pressed.connect(_on_pressed)
		Settings.audio_settings_changed.connect(_update_icon)
		mouse_entered.connect(CursorManager.set_pointer_state.bind(true))
		mouse_exited.connect(CursorManager.set_pointer_state.bind(false))

func _exit_tree():
	if not Engine.is_editor_hint():
		if Settings.audio_settings_changed.is_connected(_update_icon):
			Settings.audio_settings_changed.disconnect(_update_icon)

func _on_pressed():
	Settings.music_muted = not Settings.music_muted
	AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)

func _update_icon():
	if Settings.music_muted:
		self.texture_normal = ICON_SOUND_OFF
	else:
		self.texture_normal = ICON_SOUND_ON

=====================================
FILE: ./src/scenes/dev/gui_credits_menu.gd
=====================================
@tool
extends Control

const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

@onready var credits_label_container: Control = %CreditsLabelContainer
@onready var back_button: StyledMenuItem = %BackButton

const CREDITS_BBCODE = """
[center]A Game By Steven Casteel[/center]
[center][url=https://www.stevencasteel.com/]www.stevencasteel.com[/url][/center]

[center]Built with the [url=https://godotengine.org/]Godot Engine[/url][/center]
[center]AI-Assisted by [url=https://gemini.google.com/]Gemini[/url][/center]

[center]Find me on [url=https://www.youtube.com/@stevencasteel]YouTube[/url] and [url=http://github.com/stevencasteel]GitHub[/url][/center]
"""

func _ready():
	for c in credits_label_container.get_children():
		c.queue_free()
	
	var credits_label = RichTextLabel.new()
	credits_label.set_anchors_preset(Control.PRESET_FULL_RECT)
	credits_label.bbcode_enabled = true
	credits_label.mouse_filter = MOUSE_FILTER_PASS
	credits_label.add_theme_font_override("normal_font", load(AssetPaths.FONT_REGULAR))
	credits_label.add_theme_font_size_override("normal_font_size", 38)
	credits_label.add_theme_color_override("default_color", Color.WHITE)
	credits_label.text = CREDITS_BBCODE
	credits_label_container.add_child(credits_label)
	
	if not Engine.is_editor_hint():
		back_button.text = "BACK"
		back_button.pressed.connect(_on_back_button_pressed)
		
		credits_label.meta_clicked.connect(_on_meta_clicked)
		credits_label.meta_hover_started.connect(func(_meta): CursorManager.set_pointer_state(true))
		credits_label.meta_hover_ended.connect(func(_meta): CursorManager.set_pointer_state(false))
		
		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])
		
		await get_tree().process_frame
		back_button.grab_focus()
	else:
		back_button.text = "BACK"

func _on_meta_clicked(meta):
	OS.shell_open(str(meta))

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_OPTIONS_MENU)

=====================================
FILE: ./src/scenes/dev/gui_sound_menu.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://dsvv7o1v1j8t1"]

[ext_resource type="Script" path="res://src/scenes/dev/gui_sound_menu.gd" id="1_sound_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://8lowjix2qis2" path="res://assets/fonts/MPLUSRounded1c-Black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/scenes/dev/gui_mute_button.tscn" id="4_mute_button"]

[node name="GuiSoundMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_sound_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "SOUND"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 90)
layout_mode = 2

[node name="MenuItemsVBox" type="VBoxContainer" parent="MainVBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 40
alignment = 1

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="GuiMuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0

=====================================
FILE: ./src/scenes/dev/gui_options_menu.tscn
=====================================
[gd_scene load_steps=6 format=3 uid="uid://cuiywha4vccw"]

[ext_resource type="Script" uid="uid://qg7usjvxed13" path="res://src/scenes/dev/gui_options_menu.gd" id="1_options_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://8lowjix2qis2" path="res://assets/fonts/MPLUSRounded1c-Black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/scenes/dev/gui_mute_button.tscn" id="4_mute_button"]
[ext_resource type="Texture2D" uid="uid://d1v0th7v6k80q" path="res://assets/sprites/ui/icons/icon-sound-off.png" id="5_dh75f"]

[node name="GuiOptionsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_options_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "OPTIONS"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 60)
layout_mode = 2

[node name="MenuItemsVBox" type="VBoxContainer" parent="MainVBox"]
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 40
alignment = 1

[node name="SoundButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ControlsButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="CreditsButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="GuiMuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0
texture_normal = ExtResource("5_dh75f")


=====================================
FILE: ./src/scenes/dev/gui_credits_menu.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://c5v6x7y8z9a0b"]

[ext_resource type="Script" path="res://src/scenes/dev/gui_credits_menu.gd" id="1_credits_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://8lowjix2qis2" path="res://assets/fonts/MPLUSRounded1c-Black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/scenes/dev/gui_mute_button.tscn" id="4_mute_button"]

[node name="GuiCreditsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_credits_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "CREDITS"
horizontal_alignment = 1

[node name="CreditsLabelContainer" type="Control" parent="MainVBox"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 450)
layout_mode = 2

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="GuiMuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0

=====================================
FILE: ./src/scenes/dev/gui_options_menu.gd
=====================================
# src/scenes/dev/gui_options_menu.gd
extends Control

const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

# THE FIX: Removed the incorrect @onready var for CreditsLabelContainer.
# These are the only nodes this script needs to know about.
@onready var sound_button: StyledMenuItem = %SoundButton
@onready var controls_button: StyledMenuItem = %ControlsButton
@onready var credits_button: StyledMenuItem = %CreditsButton
@onready var back_button: StyledMenuItem = %BackButton

func _ready():
	sound_button.text = "SOUND"
	controls_button.text = "CONTROLS"
	credits_button.text = "CREDITS"
	back_button.text = "BACK"
	
	sound_button.pressed.connect(_on_sound_button_pressed)
	controls_button.pressed.connect(_on_controls_button_pressed)
	credits_button.pressed.connect(_on_credits_button_pressed)
	back_button.pressed.connect(_on_back_button_pressed)
	
	var menu_manager = MenuManagerScript.new()
	add_child(menu_manager)
	
	var menu_items: Array[Control] = [sound_button, controls_button, credits_button, back_button]
	menu_manager.setup_menu(menu_items)
	
	await get_tree().process_frame
	sound_button.grab_focus()

func _on_sound_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_SOUND_MENU)

func _on_controls_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_CONTROLS_MENU)

func _on_credits_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_CREDITS_MENU)

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_TITLE_SCREEN)


=====================================
FILE: ./src/scenes/dev/gui_title_screen.tscn
=====================================
[gd_scene load_steps=10 format=3 uid="uid://beattfyix2423"]

[ext_resource type="Script" uid="uid://i8wrnl0qhpb6" path="res://src/scenes/dev/gui_title_screen.gd" id="1_gui_title_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="PackedScene" uid="uid://b1c2d3e4f5g6h" path="res://src/ui/components/logo_display/logo_display.tscn" id="3_logo_display"]
[ext_resource type="Texture2D" uid="uid://t2u26wkw02xm" path="res://assets/sprites/ui/logos/newgrounds_logo.png" id="4_logo_ng"]
[ext_resource type="Texture2D" uid="uid://2gqa4m05wd20" path="res://assets/sprites/ui/logos/godot_logo.png" id="5_logo_godot"]
[ext_resource type="Texture2D" uid="uid://d0fuu548hoouq" path="res://assets/sprites/ui/logos/itch_logo.png" id="6_logo_itch"]
[ext_resource type="FontFile" uid="uid://8lowjix2qis2" path="res://assets/fonts/MPLUSRounded1c-Black.ttf" id="7_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/scenes/dev/gui_mute_button.tscn" id="8_mute_button"]
[ext_resource type="Texture2D" uid="uid://d1v0th7v6k80q" path="res://assets/sprites/ui/icons/icon-sound-off.png" id="9_xycyg"]

[node name="GuiTitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_gui_title_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("7_font_black")
theme_override_font_sizes/font_size = 128
text = "BOX BATTLE"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 30)
layout_mode = 2

[node name="MenuItemsVBox" type="VBoxContainer" parent="MainVBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 40
alignment = 1

[node name="StartButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="OptionsButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ExitButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="FooterHBox" type="HBoxContainer" parent="MainVBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 50
alignment = 1

[node name="NewgroundsLogo" parent="MainVBox/FooterHBox" instance=ExtResource("3_logo_display")]
unique_name_in_owner = true
layout_mode = 2
texture = ExtResource("4_logo_ng")
logo_name = "Newgrounds"

[node name="GodotLogo" parent="MainVBox/FooterHBox" instance=ExtResource("3_logo_display")]
unique_name_in_owner = true
layout_mode = 2
texture = ExtResource("5_logo_godot")
logo_name = "Godot"

[node name="ItchLogo" parent="MainVBox/FooterHBox" instance=ExtResource("3_logo_display")]
unique_name_in_owner = true
layout_mode = 2
texture = ExtResource("6_logo_itch")
logo_name = "Itch"

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 50)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="GuiMuteButton" parent="MuteButtonContainer" instance=ExtResource("8_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0
texture_normal = ExtResource("9_xycyg")


=====================================
FILE: ./src/scenes/dev/gui_controls_menu.gd
=====================================
# src/scenes/dev/gui_controls_menu.gd
@tool
extends Control

const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

@onready var controls_vbox: VBoxContainer = %ControlsVBox
@onready var back_button: StyledMenuItem = %BackButton

const CONTROLS_DATA = [
	{ "action": "Movement", "keys": "Arrow Keys / WASD / Mouse" },
	{ "action": "Primary Action", "keys": "X / . / Space / Left-Click" },
	{ "action": "Secondary Action", "keys": "C / , / Shift / Right-Click" },
	{ "action": "Tertiary Action", "keys": "Z / / / Ctrl / Middle-Click" },
	{ "action": "Pause / Menu", "keys": "Enter / P / Escape" },
	{ "action": "Back / Cancel", "keys": "Escape / Backspace" }
]

func _ready():
	for c in controls_vbox.get_children():
		c.queue_free()
	
	for data in CONTROLS_DATA:
		controls_vbox.add_child(_create_control_row(data))

	if not Engine.is_editor_hint():
		back_button.text = "BACK"
		back_button.pressed.connect(_on_back_button_pressed)
		
		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])
		
		await get_tree().process_frame
		back_button.grab_focus()
	else:
		back_button.text = "BACK"

func _create_control_row(data: Dictionary) -> HBoxContainer:
	var hbox = HBoxContainer.new()
	hbox.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	hbox.add_theme_constant_override("separation", 40)
	
	var action_label = Label.new()
	action_label.text = data.action
	action_label.custom_minimum_size.x = 400
	action_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_RIGHT
	action_label.add_theme_font_override("font", load(AssetPaths.FONT_BOLD))
	action_label.add_theme_font_size_override("font_size", 36)
	hbox.add_child(action_label)

	var keys_label = Label.new()
	keys_label.text = data.keys
	keys_label.custom_minimum_size.x = 500
	keys_label.add_theme_font_override("font", load(AssetPaths.FONT_REGULAR))
	keys_label.add_theme_font_size_override("font_size", 36)
	hbox.add_child(keys_label)
	
	return hbox

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_OPTIONS_MENU)

=====================================
FILE: ./src/scenes/dev/test_title_screen.gd
=====================================
# src/scenes/dev/test_title_screen.gd
# REFACTORED: This version uses a clean, hierarchical container system
# for a much simpler and more robust layout.
extends Control

const StyledMenuItemScene = preload(AssetPaths.SCENE_STYLED_MENU_ITEM)
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)
const LogoDisplayScene = preload(AssetPaths.SCENE_LOGO_DISPLAY)

func _ready():
	print("New Test Title Screen Initialized.")

	var bg = ColorRect.new()
	bg.color = Palette.COLOR_BACKGROUND
	bg.set_anchors_preset(Control.PRESET_FULL_RECT)
	add_child(bg)

	var main_vbox = VBoxContainer.new()
	main_vbox.set_anchors_preset(Control.PRESET_CENTER)
	main_vbox.grow_horizontal = Control.GROW_DIRECTION_BOTH
	main_vbox.grow_vertical = Control.GROW_DIRECTION_BOTH
	add_child(main_vbox)

	var title_label = Label.new()
	title_label.text = "BOX BATTLE"
	title_label.add_theme_font_override("font", load(AssetPaths.FONT_BLACK))
	title_label.add_theme_font_size_override("font_size", 128)
	title_label.add_theme_color_override("font_color", Palette.COLOR_TEXT_HEADER)
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER

	var menu_items_vbox = VBoxContainer.new()
	menu_items_vbox.alignment = VBoxContainer.ALIGNMENT_CENTER
	var start_button = StyledMenuItemScene.instantiate(); start_button.text = "START GAME"
	var options_button = StyledMenuItemScene.instantiate(); options_button.text = "OPTIONS"
	var exit_button = StyledMenuItemScene.instantiate(); exit_button.text = "EXIT"
	
	# SETTING 1: To increase space between OPTIONS and EXIT, change this value.
	exit_button.add_theme_constant_override("margin_top", 80)
	
	menu_items_vbox.add_child(start_button)
	menu_items_vbox.add_child(options_button)
	menu_items_vbox.add_child(exit_button)

	var footer_hbox = HBoxContainer.new()
	footer_hbox.alignment = HBoxContainer.ALIGNMENT_CENTER
	footer_hbox.add_theme_constant_override("separation", 50)
	var newgrounds_logo = LogoDisplayScene.instantiate(); newgrounds_logo.texture = load(AssetPaths.SPRITE_LOGO_NEWGROUNDS)
	var godot_logo = LogoDisplayScene.instantiate(); godot_logo.texture = load(AssetPaths.SPRITE_LOGO_GODOT)
	var itch_logo = LogoDisplayScene.instantiate(); itch_logo.texture = load(AssetPaths.SPRITE_LOGO_ITCH)
	footer_hbox.add_child(newgrounds_logo)
	footer_hbox.add_child(godot_logo)
	footer_hbox.add_child(itch_logo)

	# --- Add sections to the main container and SET SPACING ---
	
	# Set top padding to 0 as requested
	var top_spacer = Control.new(); top_spacer.custom_minimum_size.y = 0
	main_vbox.add_child(top_spacer)
	
	main_vbox.add_child(title_label)
	
	var title_menu_spacer = Control.new(); title_menu_spacer.custom_minimum_size.y = 20
	main_vbox.add_child(title_menu_spacer)
	
	main_vbox.add_child(menu_items_vbox)
	
	var expand_spacer = Control.new(); expand_spacer.size_flags_vertical = Control.SIZE_EXPAND_FILL
	main_vbox.add_child(expand_spacer)

	main_vbox.add_child(footer_hbox)
	
	# SETTING 2: To increase space between EXIT and the LOGOS, increase this value.
	# This adds padding to the bottom of the screen, pushing the logos up.
	var bottom_spacer = Control.new(); bottom_spacer.custom_minimum_size.y = 50
	main_vbox.add_child(bottom_spacer)
	
	menu_items_vbox.add_theme_constant_override("separation", 35)

	# --- Menu Manager Setup ---
	start_button.pressed.connect(_on_start_button_pressed)
	options_button.pressed.connect(_on_options_button_pressed)
	exit_button.pressed.connect(_on_exit_button_pressed)
	
	var menu_manager = MenuManagerScript.new()
	add_child(menu_manager)

	var menu_items: Array[Control] = [start_button, options_button, exit_button]
	menu_manager.setup_menu(menu_items)
	
	await get_tree().process_frame
	start_button.grab_focus()

# --- Signal Handlers ---
func _on_start_button_pressed():
	print("Start Button Pressed")

func _on_options_button_pressed():
	print("Options Button Pressed")

func _on_exit_button_pressed():
	print("Exit Button Pressed")
	get_tree().quit()


=====================================
FILE: ./src/scenes/dev/gui_controls_menu.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://df5wylg5n16f"]

[ext_resource type="Script" path="res://src/scenes/dev/gui_controls_menu.gd" id="1_controls_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://8lowjix2qis2" path="res://assets/fonts/MPLUSRounded1c-Black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/scenes/dev/gui_mute_button.tscn" id="4_mute_button"]

[node name="GuiControlsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_controls_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "CONTROLS"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 50)
layout_mode = 2

[node name="ControlsRowHBox" type="HBoxContainer" parent="MainVBox"]
layout_mode = 2
size_flags_horizontal = 3

[node name="LeftSpacer" type="Control" parent="MainVBox/ControlsRowHBox"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.8

[node name="ControlsVBox" type="VBoxContainer" parent="MainVBox/ControlsRowHBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 20
alignment = 1

[node name="RightSpacer" type="Control" parent="MainVBox/ControlsRowHBox"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 1.0

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="GuiMuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0

=====================================
FILE: ./src/scenes/dev/gui_mute_button.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://d1g2h3i4j5k6l"]

[ext_resource type="Script" path="res://src/scenes/dev/gui_mute_button.gd" id="1_mute_button_script"]

[node name="GuiMuteButton" type="TextureButton"]
script = ExtResource("1_mute_button_script")

=====================================
FILE: ./src/scenes/dev/test_ui.gd
=====================================
# src/scenes/dev/test_ui.gd
#
# A simple script for the UI test scene. Its only purpose is to
# provide a convenient way to close the scene by pressing Escape.
extends Control

func _unhandled_input(event: InputEvent) -> void:
	# If the Escape key is pressed, quit the running scene.
	if event.is_action_pressed("ui_cancel"):
		get_tree().quit()


=====================================
FILE: ./src/scenes/dev/test_title_screen.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://dkljf83kdjfhs"]

[ext_resource type="Script" path="res://src/scenes/dev/test_title_screen.gd" id="1_test_title"]

[node name="TestTitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_test_title")

=====================================
FILE: ./src/scenes/dev/test_ui.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://dma2j2a2h30d1"]

[ext_resource type="Script" uid="uid://d3gcr71ay74kd" path="res://src/scenes/dev/test_ui.gd" id="1_test_ui_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]

[node name="TestUI" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_test_ui_script")

[node name="Background" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.0627451, 0.0627451, 0.0627451, 1)

[node name="StyledMenuItem" parent="." instance=ExtResource("2_styled_menu_item")]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -200.0
offset_top = -40.0
offset_right = 200.0
offset_bottom = 40.0
grow_horizontal = 2
grow_vertical = 2
focus_mode = 2
text = "TEST BUTTON"


=====================================
FILE: ./src/scenes/dev/gui_title_screen.gd
=====================================
# src/scenes/dev/gui_title_screen.gd
# This script configures the layout and logic for the nodes defined in the .tscn file.
extends Control

const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

# Get references to the nodes from the scene tree
@onready var background_color: ColorRect = $BackgroundColor
@onready var start_button: StyledMenuItem = %StartButton
@onready var options_button: StyledMenuItem = %OptionsButton
@onready var exit_button: StyledMenuItem = %ExitButton
@onready var newgrounds_logo: LogoDisplay = %NewgroundsLogo
@onready var godot_logo: LogoDisplay = %GodotLogo
@onready var itch_logo: LogoDisplay = %ItchLogo

func _ready():
	# THE FIX: The music logic has been removed from here and moved to main.gd.
	
	# --- Configure elements that need runtime setup ---
	background_color.color = Palette.COLOR_BACKGROUND
	
	start_button.text = "START GAME"
	options_button.text = "OPTIONS"
	exit_button.text = "EXIT"

	# --- Connect signals and set up navigation logic ---
	start_button.pressed.connect(_on_start_button_pressed)
	options_button.pressed.connect(_on_options_button_pressed)
	exit_button.pressed.connect(get_tree().quit)
	
	newgrounds_logo.pressed.connect(_on_logo_pressed)
	godot_logo.pressed.connect(_on_logo_pressed)
	itch_logo.pressed.connect(_on_logo_pressed)
	
	var menu_manager = MenuManagerScript.new()
	add_child(menu_manager)
	var menu_items: Array[Control] = [start_button, options_button, exit_button]
	menu_manager.setup_menu(menu_items)
	
	await get_tree().process_frame
	start_button.grab_focus()

func _on_start_button_pressed():
	SceneManager.start_game(AssetPaths.SCRIPT_ARENA_00_ENCOUNTER)

func _on_options_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_OPTIONS_MENU)

func _on_logo_pressed(logo_name: String):
	print("%s Pressed" % logo_name)


=====================================
FILE: ./src/scenes/main/main.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://bt1c5p8wphc4a"]

[ext_resource type="Script" uid="uid://cu5lshffdfr4h" path="res://src/scenes/main/main.gd" id="1_main_script"]

[node name="Main" type="Node"]
script = ExtResource("1_main_script")


=====================================
FILE: ./src/scenes/main/main.gd
=====================================
# src/scenes/main/main.gd
extends Node

func _ready():
	if OS.is_debug_build():
		AssetPaths.validate_all_paths()
	
	# THE FIX: Start the menu music here, in the global entry point.
	# This ensures it runs once and persists across all menu scenes.
	AudioManager.play_music(AssetPaths.AUDIO_MUSIC_TITLE)
	
	SceneManager.go_to_scene(AssetPaths.SCENE_GUI_TITLE_SCREEN)

=====================================
FILE: ./src/core/sequencing/sequence_step.gd
=====================================
# src/core/sequencer/sequence_step.gd
# The abstract base class for all steps in a sequence.
# It defines the contract that all steps must follow: an `execute` method.
@tool
class_name SequenceStep
extends Resource

# This method will be implemented by all concrete step classes.
# It contains the logic for what the step actually does.
# It should return a Signal or Coroutine object if the sequence needs to pause.
#
# CORRECTED: The parameter is prefixed with an underscore to resolve the
# UNUSED_PARAMETER warning in this base class.
func execute(_sequencer_node: Node) -> Variant:
	return null


=====================================
FILE: ./src/core/sequencing/sequence_handle.gd
=====================================
# src/core/sequencing/sequence_handle.gd
#
# A handle that represents a running sequence. It allows for safe cancellation
# and emits a signal when the sequence is completed or cancelled.
class_name SequenceHandle
extends RefCounted

signal finished

var is_running: bool = true

func cancel() -> void:
	if is_running:
		is_running = false
		finished.emit() # Signal completion when cancelled.

=====================================
FILE: ./src/core/sequencing/sequencer.gd
=====================================
# src/core/sequencing/sequencer.gd
#
# An autoloaded singleton that runs sequences of timed events. It now tracks
# all active sequences and can safely cancel them all, preventing errors
# during scene transitions.
extends Node

var _active_handles: Array[SequenceHandle] = []

func run_sequence(steps: Array[SequenceStep]) -> SequenceHandle:
	var handle = SequenceHandle.new()
	
	# THE FIX: Track the new handle and connect to its finished signal for cleanup.
	_active_handles.append(handle)
	handle.finished.connect(_on_sequence_finished.bind(handle))
	
	_execute_sequence(steps, handle)
	return handle

# NEW: Public function to cancel all running sequences.
func cancel_all():
	# Iterate over a copy, because cancelling a handle will modify the original array.
	for handle in _active_handles.duplicate():
		handle.cancel()

# NEW: Private handler to clean up finished sequences from the tracking array.
func _on_sequence_finished(handle_to_remove: SequenceHandle):
	var index = _active_handles.find(handle_to_remove)
	if index != -1:
		_active_handles.remove_at(index)

func _execute_sequence(steps: Array[SequenceStep], handle: SequenceHandle) -> void:
	if steps.is_empty():
		if handle.is_running:
			handle.is_running = false
			handle.finished.emit()
		return

	for step in steps:
		# THE FIX: Check if the sequence has been cancelled before executing the next step.
		if not handle.is_running:
			return

		if not step is SequenceStep:
			push_warning("Sequencer: Invalid step found. Skipping.")
			continue
		
		var awaitable = await step.execute(self)
		if awaitable:
			await awaitable
	
	if handle.is_running:
		handle.is_running = false
		handle.finished.emit()

=====================================
FILE: ./src/core/sequencing/steps/emit_step.gd
=====================================
# src/core/sequencer/steps/emit_step.gd
# A sequence step that emits an event on the global EventBus.
@tool
class_name EmitStep
extends SequenceStep

@export var event_name: StringName = &""
@export var payload: Variant = null

# CORRECTED: The function signature now returns '-> Variant' to match its parent,
# SequenceStep. Since this step completes instantly, it returns null.
func execute(_sequencer_node: Node) -> Variant:
	if event_name == &"":
		push_warning("EmitStep: 'event_name' is not set.")
		return null
	EventBus.emit(event_name, payload)
	return null


=====================================
FILE: ./src/core/sequencing/steps/callable_step.gd
=====================================
# src/core/sequencing/steps/callable_step.gd
# A sequence step that calls a Callable.
@tool
class_name CallableStep
extends SequenceStep

@export var callable: Callable

# MODIFIED: The function signature is now async.
func execute(_sequencer_node: Node) -> Variant:
	if callable.is_valid():
		# CORRECTED: We now `await` the result of the call.
		# If the function is normal, it returns instantly.
		# If the function is async, it waits for it to complete.
		var result = await callable.call()
		
		# If the function itself returns ANOTHER awaitable (like a Signal),
		# we pass it up to the sequencer to be awaited as well.
		if result is Signal or (typeof(result) == TYPE_OBJECT and result.has_method("is_valid")):
			return result
	else:
		push_warning("CallableStep: 'callable' is not set or is invalid.")
	
	return null

=====================================
FILE: ./src/core/sequencing/steps/wait_step.gd
=====================================
# src/core/sequencer/steps/wait_step.gd
# A sequence step that pauses execution for a set duration.
@tool
class_name WaitStep
extends SequenceStep

@export var duration: float = 1.0

# CORRECTED: This function now returns the timer's 'timeout' signal.
# The sequencer will await this signal, making the pause explicit.
func execute(sequencer_node: Node) -> Variant:
	if duration > 0.0:
		return sequencer_node.get_tree().create_timer(duration).timeout
	return null

=====================================
FILE: ./src/core/util/combat_utils.gd
=====================================
# src/core/util/combat_utils.gd
# A collection of static helper functions for combat-related logic.
extends Node

# Finds any node that can be damaged by recursively searching up the scene tree.
# This remains the single source of truth for finding a damageable target.
static func find_damageable(from_node: Node) -> Node:
	if not is_instance_valid(from_node):
		return null
		
	var current_node = from_node
	while is_instance_valid(current_node):
		if current_node.has_method("apply_damage"):
			return current_node
		
		# HealthComponent is the primary implementer, check for it directly.
		var hc = current_node.get_node_or_null("HealthComponent")
		if is_instance_valid(hc) and hc.has_method("apply_damage"):
			return hc

		current_node = current_node.get_parent()
	
	return null

=====================================
FILE: ./src/core/util/grid_utils.gd
=====================================
# src/core/util/grid_utils.gd
# A singleton that provides a single source of truth for all calculations
# between the logical tile grid and world-space pixel coordinates.
extends Node

# Converts a grid coordinate (e.g., Vector2i(3, 4)) to the center
# of that tile in world pixels.
static func grid_to_world(tile_pos: Vector2i) -> Vector2:
	var half_tile = Constants.TILE_SIZE / 2.0
	return Vector2(tile_pos.x * Constants.TILE_SIZE + half_tile, tile_pos.y * Constants.TILE_SIZE + half_tile)

# Converts a world-space pixel position (e.g., from a mouse click)
# to the grid coordinate of the tile it is inside.
static func world_to_grid(world_pos: Vector2) -> Vector2i:
	return Vector2i(floor(world_pos.x / Constants.TILE_SIZE), floor(world_pos.y / Constants.TILE_SIZE))


=====================================
FILE: ./src/core/util/physics_layers.gd
=====================================
# src/core/util/physics_layers.gd
#
# An autoloaded singleton that provides named constants for the 2D physics
# layers defined in the project settings.
extends Node

const PLAYER = 1           # Layer 1
const WORLD = 2            # Layer 2
const ENEMY = 4            # Layer 3
const HAZARD = 8           # Layer 4
const ENEMY_PROJECTILE = 16  # Layer 5
const PLAYER_HITBOX = 32   # Layer 6
const PLAYER_HURTBOX = 64  # Layer 7

=====================================
FILE: ./src/core/util/scene_validator.gd
=====================================
# src/core/util/scene_validator.gd
#
# A central utility script for validating scene configurations in the editor.
# Its functions are static, allowing them to be called from any @tool script
# without needing to be an instance in the scene tree.
class_name SceneValidator
extends Object

# --- Static Validation Functions ---

# Validates the structure of any scene based on the BaseBoss contract.
static func validate_boss_scene(node: Node) -> PackedStringArray:
	var warnings = PackedStringArray()
	
	if not node.has_node("HealthComponent"):
		warnings.append("A HealthComponent node is required for the boss to function.")
	if not node.has_node("StateMachine"):
		warnings.append("A StateMachine node is required for the boss to function.")
	if not node.has_node("ArmorComponent"):
		warnings.append("An ArmorComponent node is required for the boss to function.")
		
	if node.get("phase_1_patterns") == null or node.get("phase_1_patterns").is_empty():
		warnings.append("Phase 1 has no attack patterns assigned. The boss will be unable to attack.")
		
	return warnings

=====================================
FILE: ./src/core/util/palette.gd
=====================================
# src/core/palette.gd
#
# An autoloaded singleton that holds the project's master color palette.
# It establishes a single source of truth for all visual elements, ensuring a
# cohesive aesthetic. It is designed around a 32-step grayscale value scale.
extends Node

# FIX: The Color("#hex") constructor is a valid constant expression, unlike
# Color.from_string(). This allows the entire palette and its semantic
# constants to be correctly defined at compile-time.
const _palette: Array[Color] = [
	Color("#000000"), Color("#080808"), Color("#101010"), Color("#191919"),
	Color("#212121"), Color("#292929"), Color("#313131"), Color("#3a3a3a"),
	Color("#424242"), Color("#4a4a4a"), Color("#525252"), Color("#5a5a5a"),
	Color("#636363"), Color("#6b6b6b"), Color("#737373"), Color("#7b7b7b"),
	Color("#848484"), Color("#8c8c8c"), Color("#949494"), Color("#9c9c9c"),
	Color("#a5a5a5"), Color("#adadad"), Color("#b5b5b5"), Color("#bdbdbd"),
	Color("#c5c5c5"), Color("#cecece"), Color("#d6d6d6"), Color("#dedede"),
	Color("#e6e6e6"), Color("#efefef"), Color("#f7f7f7"), Color("#ffffff")
]

# --- SEMANTIC CONSTANTS ---
# This is the most important part of the script. We refer to these constants
# in our code, not the raw index numbers. This makes the code readable and

# easy to update. If we want to make all hazards darker, we just change one
# line here.

# Gameplay
const COLOR_PLAYER: Color = _palette[31]
const COLOR_BOSS_PRIMARY: Color = _palette[30]
const COLOR_PLAYER_PROJECTILE: Color = _palette[29]
const COLOR_HAZARD_PRIMARY: Color = _palette[28] # Also Enemy Projectiles

# Environment
const COLOR_BACKGROUND: Color = _palette[0]
const COLOR_GRID: Color = _palette[2]
const COLOR_TERRAIN_PRIMARY: Color = _palette[4]
const COLOR_TERRAIN_SECONDARY: Color = _palette[6]

# UI/UX
const COLOR_TEXT_HEADER: Color = _palette[30]
const COLOR_UI_ACCENT_PRIMARY: Color = _palette[28]
const COLOR_TEXT_PRIMARY: Color = _palette[26]
const COLOR_TEXT_DISABLED: Color = _palette[16]
# THE FIX: Changed from _palette[12] to _palette[20] for a much brighter glow.
const COLOR_UI_GLOW: Color = _palette[20]
const COLOR_UI_PANEL_BG: Color = _palette[8]

# --- Helper Function ---
# Provides a safe way to get a color by its index if needed.
func get_color(index: int) -> Color:
	if index >= 0 and index < _palette.size():
		return _palette[index]
	push_warning("Palette: Invalid color index requested: %d" % index)
	return Color.MAGENTA # Return a highly visible error color

=====================================
FILE: ./src/core/util/identifiers.gd
=====================================
# src/core/util/identifiers.gd
# A central authority for all string-based identifiers used in the project,
# such as group names and pool keys. Using these constants prevents bugs
# caused by typos in raw strings.
extends Node

# Usage: Identifiers.Groups.PLAYER
class Groups:
	const PLAYER = "player"
	const ENEMY = "enemy"
	const WORLD = "world"
	const HAZARD = "hazard"
	const ONEWAY_PLATFORMS = "oneway_platforms"
	const PLAYER_PROJECTILE = "player_projectile"
	const ENEMY_PROJECTILE = "enemy_projectile"

# Usage: Identifiers.Pools.PLAYER_SHOTS
class Pools:
	const PLAYER_SHOTS = &"player_shots"
	const BOSS_SHOTS = &"boss_shots"
	const TURRET_SHOTS = &"turret_shots"

# This script is intentionally minimal and has no _ready() function.


=====================================
FILE: ./src/core/util/asset_paths.gd
=====================================
# src/core/util/asset_paths.gd
#
# This singleton provides a central, validated registry for all asset file paths.
# It is now organized by feature/system for better scalability and includes a
# validation function to prevent runtime errors from missing assets.
extends Node

# --- CORE SYSTEMS ---
const SCRIPT_COMBAT_UTILS = "res://src/core/util/combat_utils.gd"
const SCENE_MAIN = "res://src/scenes/main/main.tscn"
const SCENE_GAME = "res://src/scenes/game/game.tscn"
const SCENE_LOADING_SCREEN = "res://src/scenes/loading/loading_screen.tscn"
const SCRIPT_MENU_MANAGER = "res://src/ui/menu_manager/menu_manager.gd"
const SCRIPT_CUSTOM_SLIDER = "res://src/ui/components/custom_slider/custom_slider.gd"

# --- ARENAS ---
const SCRIPT_ARENA_00_LAYOUT = "res://src/arenas/arena_00_layout.gd"
const SCRIPT_ARENA_00_ENCOUNTER = "res://src/arenas/arena_00_encounter.gd"

# --- PLAYER & RELATED ---
const SCENE_PLAYER = "res://src/entities/player/player.tscn"
const SCENE_PLAYER_SHOT = "res://src/projectiles/player_shot.tscn"

# --- BOSS, MINIONS & RELATED ---
const SCENE_BASE_BOSS = "res://src/entities/boss/base_boss.tscn"
const SCENE_BOSS_SHOT = "res://src/projectiles/boss_shot.tscn"
const SCENE_TELEGRAPH_COMPONENT = "res://src/entities/components/telegraph_component.tscn"
const SCENE_TURRET = "res://src/entities/minions/turret.tscn"
const SCENE_TURRET_SHOT = "res://src/projectiles/turret_shot.tscn"

# --- UI & HUD ---
const SCENE_GAME_HUD = "res://src/ui/game_hud/game_hud.tscn"
const SCENE_GAME_OVER_SCREEN = "res://src/ui/screens/game_over_screen/game_over_screen.tscn"
const SCENE_VICTORY_SCREEN = "res://src/ui/screens/victory_screen/victory_screen.tscn"
const SCENE_TITLE_SCREEN = "res://src/ui/screens/title_screen/title_screen.tscn"
const SCENE_OPTIONS_MENU = "res://src/ui/screens/options_menu/options_menu.tscn"
const SCENE_SOUND_MENU = "res://src/ui/screens/sound_menu/sound_menu.tscn"
const SCENE_CONTROLS_MENU = "res://src/ui/screens/controls_menu/controls_menu.tscn"
const SCENE_CREDITS_MENU = "res://src/ui/screens/credits_menu/credits_menu.tscn"
const SCENE_TEST_TITLE_SCREEN = "res://src/scenes/dev/test_title_screen.tscn"
const SCENE_STYLED_MENU_ITEM = "res://src/ui/components/styled_menu_item/styled_menu_item.tscn"
const SCENE_LOGO_DISPLAY = "res://src/ui/components/logo_display/logo_display.tscn"
const SCENE_GUI_TITLE_SCREEN = "res://src/scenes/dev/gui_title_screen.tscn"
const SCENE_GUI_OPTIONS_MENU = "res://src/scenes/dev/gui_options_menu.tscn"
const SCENE_GUI_SOUND_MENU = "res://src/scenes/dev/gui_sound_menu.tscn"
const SCENE_GUI_CONTROLS_MENU = "res://src/scenes/dev/gui_controls_menu.tscn"
const SCENE_GUI_CREDITS_MENU = "res://src/scenes/dev/gui_credits_menu.tscn"
# NEW SCENE PATH
const SCENE_GUI_MUTE_BUTTON = "res://src/scenes/dev/gui_mute_button.tscn"

const SPRITE_TITLE = "res://assets/sprites/ui/title/box_battle_title.png"
const SPRITE_MENU_CURSOR = "res://assets/sprites/ui/menu/menu-cursor.png"
const SPRITE_MENU_ITEM_START = "res://assets/sprites/ui/menu/menu-item-start.png"
const SPRITE_MENU_ITEM_OPTIONS = "res://assets/sprites/ui/menu/menu-item-options.png"
const SPRITE_MENU_ITEM_SOUND = "res://assets/sprites/ui/menu/menu-item-sound.png"
const SPRITE_MENU_ITEM_CONTROLS = "res://assets/sprites/ui/menu/menu-item-controls.png"
const SPRITE_MENU_ITEM_CREDITS = "res://assets/sprites/ui/menu/menu-item-credits.png"
const SPRITE_MENU_ITEM_BACK = "res://assets/sprites/ui/menu/menu-item-back.png"
const SPRITE_CURSOR_DEFAULT = "res://assets/sprites/ui/cursors/cursor_default.png"
const SPRITE_CURSOR_POINTER = "res://assets/sprites/ui/cursors/cursor_pointer.png"
const SPRITE_SLIDER_TRACK = "res://assets/sprites/ui/slider/slider-track.png"
const SPRITE_SLIDER_KNOB = "res://assets/sprites/ui/slider/slider-knob.png"
const SPRITE_CHECKBOX_CHECKED = "res://assets/sprites/ui/checkbox/checkbox-checked.png"
const SPRITE_CHECKBOX_UNCHECKED = "res://assets/sprites/ui/checkbox/checkbox-unchecked.png"
const SPRITE_ICON_SOUND_ON = "res://assets/sprites/ui/icons/icon-sound-on.png"
const SPRITE_ICON_SOUND_OFF = "res://assets/sprites/ui/icons/icon-sound-off.png"
const SPRITE_LOGO_GODOT = "res://assets/sprites/ui/logos/godot_logo.png"
const SPRITE_LOGO_NEWGROUNDS = "res://assets/sprites/ui/logos/newgrounds_logo.png"
const SPRITE_LOGO_ITCH = "res://assets/sprites/ui/logos/itch_logo.png"

# --- FONTS ---
const FONT_BLACK = "res://assets/fonts/MPLUSRounded1c-Black.ttf"
const FONT_BOLD = "res://assets/fonts/MPLUSRounded1c-Bold.ttf"
const FONT_REGULAR = "res://assets/fonts/MPLUSRounded1c-Regular.ttf"

# --- AUDIO ---
const AUDIO_MUSIC_TITLE = "res://assets/audio/music/title-screen-loop.mp3"
const AUDIO_SFX_MENU_BACK = "res://assets/audio/sfx/menu-back.mp3"
const AUDIO_SFX_MENU_ERROR = "res://assets/audio/sfx/menu-error.mp3"
const AUDIO_SFX_MENU_MOVE = "res://assets/audio/sfx/menu-move.mp3"
const AUDIO_SFX_MENU_SELECT = "res://assets/audio/sfx/menu-select.mp3"
const AUDIO_SFX_START_CHIME = "res://assets/audio/sfx/start-chime.mp3"


# --- VALIDATION SYSTEM ---
# This function runs at startup to verify that every path defined in this
# script actually points to a real file.
func validate_all_paths() -> void:
	print("AssetPaths: Validating all asset paths...")
	var constants = get_script().get_script_constant_map()
	var missing_assets = false
	
	for key in constants:
		var value = constants[key]
		# We only care about string paths that are project resources.
		if value is String and value.begins_with("res://"):
			if not FileAccess.file_exists(value):
				push_error("Asset path validation failed! File not found for '%s': %s" % [key, value])
				missing_assets = true

	if not missing_assets:
		print("AssetPaths: All paths validated successfully.")

=====================================
FILE: ./src/core/util/constants.gd
=====================================
# src/core/util/constants.gd
#
# This singleton holds true global constants that are foundational to the
# engine's architecture or core systems.
#
# GUIDELINES FOR USE:
# - DO add values that define fundamental, project-wide numbers that are
#   unlikely to change (e.g., TILE_SIZE).
# - DO add system-level performance values (e.g., NUM_SFX_PLAYERS).
# - DO NOT add any values related to gameplay feel, balance, or tuning.
#   Those belong in a data resource like CombatConfig.tres.
extends Node

# --- Audio ---
# The number of simultaneous sound effects that can be played at once.
const NUM_SFX_PLAYERS = 8

# --- Arena Design ---
# The universal size (width and height) of a single grid tile in the arena.
const TILE_SIZE = 50

=====================================
FILE: ./src/core/README.md
=====================================
# Core Subsystem

This directory contains all of the project's global systems, singletons, and core logic that is not specific to a single entity or scene.

## Subdirectories

-   **/building**: Contains the classes responsible for procedural level generation (`ArenaBuilder`, `LevelParser`, etc.).
-   **/data**: Manages game data, including the new `Resource`-based configurations.
-   **/events**: Contains the global `EventBus` and all typed event definitions.
-   **/sequencing**: Manages the `Sequencer` for creating scripted, timed events.
-   **/systems**: Contains the primary global managers (`AudioManager`, `GameManager`, etc.).
-   **/util**: A collection of stateless utility singletons like `AssetPaths` and `Palette`.

## Autoloaded Singletons (Global Access)

The following scripts are registered as autoloads in `project.godot` and can be accessed globally:

-   `Settings`: Manages persistent game settings.
-   `AudioManager`: Controls all audio playback.
-   `CursorManager`: Manages the custom mouse cursor.
-   `Constants`: Holds engine-level constants.
-   `AssetPaths`: Provides safe, static paths to all project assets.
-   `GlobalHud`: The persistent UI layer for global elements.
-   `GameManager`: Manages game state and scene flow.
-   `ArenaBuilder`: The main entry point for level construction.
-   `EventBus`: The global event dispatcher.
-   `Sequencer`: Manages timed event sequences.
-   `Config`: Handles loading data from `Resource`-based configs.
-   `Palette`: Defines the global color scheme.
-   `ObjectPool`: Manages reusable nodes to improve performance.
-   `PhysicsLayers`: Provides named constants for physics collision layers.

## Public API

The primary public API for inter-system communication is the `EventBus`. Systems should emit events to signal state changes and listen for events to react to them, rather than calling each other directly.

=====================================
FILE: ./src/core/events/event_bus.gd
=====================================
# src/core/event_bus.gd
# SIMPLIFIED: Removed async queue, priority sorting, and unused debug features.
extends Node

var _subscribers: Dictionary = {}
var _by_id: Dictionary = {}
var _next_id: int = 1

func on(event_name: StringName, callback: Callable) -> int:
	assert(callback.is_valid(), "EventBus.on: callback must be a valid Callable")
	var subs: Array = _subscribers.get(event_name, [])
	var owner_node = callback.get_object()
	var weak_ref = weakref(owner_node) if owner_node is Node else null

	var entry := {
		"id": _next_id, "callback": callback, "owner_weak": weak_ref,
	}
	subs.append(entry)
	_subscribers[event_name] = subs
	
	# The key is the token ID, the value is the event name.
	_by_id[_next_id] = event_name
	
	_next_id += 1
	return entry.id

func off(token: int) -> void:
	if not _by_id.has(token): return
	
	# CORRECTED: Get the event name from the dictionary.
	var event_name: StringName = _by_id[token]
	
	if _subscribers.has(event_name):
		var subs = _subscribers[event_name]
		for i in range(subs.size() - 1, -1, -1):
			if subs[i].id == token:
				subs.remove_at(i)
				break
		if subs.is_empty():
			_subscribers.erase(event_name)
	
	_by_id.erase(token)

# CORRECTED: Added underscore to unused parameter `_source`.
func emit(event_name: StringName, payload = null, _source: Object = null) -> void:
	if not _subscribers.has(event_name): return

	var subs: Array = _subscribers[event_name]
	
	for i in range(subs.size() - 1, -1, -1):
		var sub = subs[i]
		
		if sub.owner_weak and not sub.owner_weak.get_ref():
			_by_id.erase(sub.id)
			subs.remove_at(i)
			continue
		
		sub.callback.call(payload)
	
	if subs.is_empty():
		_subscribers.erase(event_name)


=====================================
FILE: ./src/core/events/typed_events/boss_health_changed_event.gd
=====================================
# src/core/events/boss_health_changed_event.gd
# A typed payload for the BOSS_HEALTH_CHANGED event.
extends Resource
class_name BossHealthChangedEvent

@export var current_health: int = 0
@export var max_health: int = 0

=====================================
FILE: ./src/core/events/typed_events/player_health_changed_event.gd
=====================================
# src/core/events/player_health_changed_event.gd
# A typed payload for the PLAYER_HEALTH_CHANGED event. Using a Resource allows
# for type safety and IDE autocompletion in listener scripts.
extends Resource
class_name PlayerHealthChangedEvent

@export var current_health: int = 0
@export var max_health: int = 0

=====================================
FILE: ./src/core/events/typed_events/player_healing_charges_changed_event.gd
=====================================
# src/core/events/player_healing_charges_changed_event.gd
# A typed payload for the PLAYER_HEALING_CHARGES_CHANGED event.
extends Resource
class_name PlayerHealingChargesChangedEvent

@export var current_charges: int = 0

=====================================
FILE: ./src/core/events/event_catalog.gd
=====================================
# src/core/events/event_catalog.gd
# This script serves as the canonical, central list of all event names in the project.
extends Object
class_name EventCatalog

# --- Player Events ---
const PLAYER_HEALTH_CHANGED = "player.health_changed"
const PLAYER_HEALING_CHARGES_CHANGED = "player.healing_charges_changed"

# --- Boss / Entity Events ---
const BOSS_HEALTH_CHANGED = "boss.health_changed"
const BOSS_DIED = "boss.died"
const BOSS_PHASE_CHANGED = "boss.phase_changed" # NEW EVENT

# --- UI State Events ---
const MENU_OPENED = "ui.menu_opened"
const MENU_CLOSED = "ui.menu_closed"

=====================================
FILE: ./src/core/systems/camera_manager.gd
=====================================
# src/core/systems/camera_manager.gd
# A singleton responsible for all camera logic. It now focuses on
# centering the camera for our pixel-perfect setup.
extends Node

# This function now simply centers the camera on the arena.
# The zoom is assumed to be (1, 1) for pixel-perfect rendering.
func center_camera_on_arena(camera: Camera2D, arena_size_tiles: Vector2i):
	if not is_instance_valid(camera):
		push_error("CameraManager: Invalid Camera2D provided.")
		return

	var arena_pixel_size = Vector2(arena_size_tiles) * Constants.TILE_SIZE
	
	# The position is the exact center. The engine's pixel snap will handle the rest.
	camera.position = arena_pixel_size / 2.0

=====================================
FILE: ./src/core/systems/game_manager.gd
=====================================
# src/core/systems/game_manager.gd
#
# A simple singleton to manage the state of the game session. It now holds
# a reference to a GameStateData resource, standardizing our state pattern.
extends Node

var state = null

const GameStateDataScript = preload("res://src/core/data/game_state_data.gd")

func _ready():
	# Create a new, clean instance of the game state every time the
	# GameManager is initialized.
	state = GameStateDataScript.new()

# NEW: Implement _exit_tree for proper cleanup.
# This function is called automatically by the engine when the game is closing.
func _exit_tree():
	# Manually release our reference to the state resource. This allows
	# Godot's garbage collector to free it and any nodes it might be holding,
	# preventing memory leaks on exit.
	if is_instance_valid(state):
		state = null

=====================================
FILE: ./src/core/systems/scene_manager.gd
=====================================
# src/core/systems/scene_manager.gd
#
# A centralized singleton for handling all scene transitions. It now
# cleans up both the ObjectPool and the Sequencer for a clean slate.
extends Node

# The core, private function that handles the actual scene change.
func _switch_to_scene(path: String) -> void:
	# THE FIX: Clean up all active projectiles AND cancel all running sequences.
	ObjectPool.reset()
	Sequencer.cancel_all()
	get_tree().call_deferred("change_scene_to_file", path)


# --- Public API ---

func go_to_title_screen() -> void:
	_switch_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

func start_game(encounter_path: String) -> void:
	GameManager.state.current_encounter_script_path = encounter_path
	_switch_to_scene(AssetPaths.SCENE_LOADING_SCREEN)

func go_to_game_over() -> void:
	_switch_to_scene(AssetPaths.SCENE_GAME_OVER_SCREEN)

func go_to_victory() -> void:
	_switch_to_scene(AssetPaths.SCENE_VICTORY_SCREEN)

# A generic function for simple menu navigation.
func go_to_scene(path: String) -> void:
	_switch_to_scene(path)

=====================================
FILE: ./src/core/systems/object_pool.gd
=====================================
# src/core/systems/object_pool.gd
#
# This version is hardened against race conditions and now includes
# proper metadata on all projectile scenes for reliable pooling.
extends Node

const PlayerShotScene = preload(AssetPaths.SCENE_PLAYER_SHOT)
const BossShotScene = preload(AssetPaths.SCENE_BOSS_SHOT)
const TurretShotScene = preload(AssetPaths.SCENE_TURRET_SHOT)

var _pools: Dictionary = {}

func _ready():
	_create_pool_for_scene(Identifiers.Pools.PLAYER_SHOTS, PlayerShotScene, 15)
	_create_pool_for_scene(Identifiers.Pools.BOSS_SHOTS, BossShotScene, 30)
	_create_pool_for_scene(Identifiers.Pools.TURRET_SHOTS, TurretShotScene, 20)

func reset():
	for pool_name in _pools:
		var pool = _pools[pool_name]
		for child in pool.container.get_children():
			if not pool.inactive.has(child):
				return_instance(child)

func _create_pool_for_scene(p_pool_name: StringName, p_scene: PackedScene, p_initial_size: int):
	if _pools.has(p_pool_name):
		return
		
	var pool_container = Node.new()
	pool_container.name = p_pool_name
	add_child(pool_container)
	
	_pools[p_pool_name] = {
		"scene": p_scene,
		"inactive": [],
		"container": pool_container
	}
	
	for i in range(p_initial_size):
		var instance = p_scene.instantiate()
		pool_container.add_child(instance)
		instance.deactivate()
		_pools[p_pool_name].inactive.append(instance)

func get_instance(p_pool_name: StringName) -> Node:
	if not _pools.has(p_pool_name):
		push_error("ObjectPool: Pool '%s' does not exist." % p_pool_name)
		return null

	var pool = _pools[p_pool_name]
	var instance: Node
	
	if not pool.inactive.is_empty():
		instance = pool.inactive.pop_front()
	else:
		instance = pool.scene.instantiate()
		pool.container.add_child(instance)
	
	return instance

func return_instance(p_instance: Node):
	if not is_instance_valid(p_instance) or p_instance.process_mode == PROCESS_MODE_DISABLED:
		return

	var pool_name = p_instance.get_meta("pool_name", "")
	if pool_name == "" or not _pools.has(pool_name):
		p_instance.queue_free()
		return
	
	p_instance.call_deferred("deactivate")
	
	if not _pools[pool_name].inactive.has(p_instance):
		_pools[pool_name].inactive.append(p_instance)

=====================================
FILE: ./src/core/systems/audio_manager.gd
=====================================
# src/core/audio_manager.gd
#
# This singleton is responsible for all audio playback. This version includes
# a robust cleanup function to prevent memory leaks on exit.
extends Node

var sfx_players = []
var sfx_player_index = 0
var music_player: AudioStreamPlayer

func _ready():
	for i in range(Constants.NUM_SFX_PLAYERS):
		var player = AudioStreamPlayer.new()
		add_child(player)
		player.bus = "SFX"
		sfx_players.append(player)

	music_player = AudioStreamPlayer.new()
	add_child(music_player)
	music_player.bus = "Music"

	Settings.audio_settings_changed.connect(_on_audio_settings_changed)
	_on_audio_settings_changed()

# This function catches system-level notifications. It's our new, more
# reliable way to ensure cleanup happens before the application quits.
func _notification(what):
	if what == NOTIFICATION_WM_CLOSE_REQUEST:
		# The user has requested to close the game. Clean up the music stream now.
		if is_instance_valid(music_player):
			music_player.stop()
			music_player.stream = null

# The _exit_tree function is still good practice for when nodes are removed
# during gameplay, so we'll keep it as a secondary cleanup method.
func _exit_tree():
	if is_instance_valid(music_player):
		music_player.stop()
		music_player.stream = null

func _on_audio_settings_changed():
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear_to_db(Settings.master_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("Master"), Settings.master_muted)

	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Music"), linear_to_db(Settings.music_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("Music"), Settings.music_muted)

	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("SFX"), linear_to_db(Settings.sfx_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("SFX"), Settings.sfx_muted)

func play_sfx(sound_path: String):
	var player = sfx_players[sfx_player_index]
	player.stream = load(sound_path)
	player.play()
	sfx_player_index = (sfx_player_index + 1) % Constants.NUM_SFX_PLAYERS

func play_music(music_path: String):
	if music_player.stream and music_player.stream.resource_path == music_path and music_player.playing:
		return

	music_player.stream = load(music_path)
	music_player.play()

func stop_music():
	music_player.stop()

=====================================
FILE: ./src/core/systems/cursor_manager.gd
=====================================
# src/core/cursor_manager.gd
#
# This singleton manages the game's custom "fake" cursor, giving us full
# control over its appearance on all platforms. It draws on a high layer
# to ensure it's always on top of other UI and game elements.
extends CanvasLayer

var cursor_sprite: TextureRect

# We preload our cursor images using the AssetPaths singleton for safety and clarity.
const CURSOR_DEFAULT = preload(AssetPaths.SPRITE_CURSOR_DEFAULT)
const CURSOR_POINTER = preload(AssetPaths.SPRITE_CURSOR_POINTER)

func _ready():
	# A high layer number ensures the cursor renders above everything else.
	layer = 10
	# Hide the computer's default mouse cursor.
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)

	cursor_sprite = TextureRect.new()
	cursor_sprite.texture = CURSOR_DEFAULT

	# CRITICAL: This makes our cursor sprite "click-through," so it never
	# blocks mouse events intended for buttons or objects underneath it.
	cursor_sprite.mouse_filter = Control.MOUSE_FILTER_IGNORE

	add_child(cursor_sprite)

func _process(_delta):
	# On every frame, our custom cursor's position is synced to the real mouse position.
	cursor_sprite.position = get_viewport().get_mouse_position()

# Public function to change the cursor's appearance (e.g., when hovering a button).
func set_pointer_state(is_pointing: bool):
	if is_pointing:
		cursor_sprite.texture = CURSOR_POINTER
	else:
		cursor_sprite.texture = CURSOR_DEFAULT

=====================================
FILE: ./src/core/data/combat_db.gd
=====================================
# src/core/data/combat_db.gd
# This autoload provides global access to the combat config resource.
# It loads the config at runtime in _ready() to be robust against parse-order issues.
extends Node

const CONFIG_PATH: String = "res://data/combat_config.tres"
var config: CombatConfig = null

func _ready() -> void:
	config = load(CONFIG_PATH) as CombatConfig
	if not config:
		push_error("CombatDB: Failed to load CombatConfig at %s" % CONFIG_PATH)


=====================================
FILE: ./src/core/data/config/settings.gd
=====================================
# src/core/settings.gd
#
# This script is a "Singleton" (also known as an "Autoload" in Godot).
# It now emits a signal whenever an audio setting is changed, allowing other
# systems like the AudioManager to react efficiently without polling.
extends Node

# NEW: A signal that is emitted whenever any audio setting is changed.
signal audio_settings_changed

# --- Audio Settings ---
# The variables have been converted to properties with setters. This allows us
# to run code (emitting the signal) whenever their values are changed.

@export var master_volume: float = 1.0:
	set(value):
		# MODIFIED: Added validation to clamp the value between 0.0 and 1.0
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(master_volume, clamped_value):
			master_volume = clamped_value
			audio_settings_changed.emit()

@export var music_volume: float = 1.0:
	set(value):
		# MODIFIED: Added validation to clamp the value between 0.0 and 1.0
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(music_volume, clamped_value):
			music_volume = clamped_value
			audio_settings_changed.emit()

@export var sfx_volume: float = 1.0:
	set(value):
		# MODIFIED: Added validation to clamp the value between 0.0 and 1.0
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(sfx_volume, clamped_value):
			sfx_volume = clamped_value
			audio_settings_changed.emit()

@export var master_muted: bool = false:
	set(value):
		if master_muted != value:
			master_muted = value
			audio_settings_changed.emit()

@export var music_muted: bool = true:
	set(value):
		if music_muted != value:
			music_muted = value
			audio_settings_changed.emit()

@export var sfx_muted: bool = false:
	set(value):
		if sfx_muted != value:
			sfx_muted = value
			audio_settings_changed.emit()

=====================================
FILE: ./src/core/data/config/combat_config.gd
=====================================
# src/core/data/config/combat_config.gd
# A single, flat Resource that exposes all combat tuning values.
# It now uses @export_group and @export_range for a clean Inspector UI.
class_name CombatConfig
extends Resource

@export_group("General Physics")
@export_range(500, 3000, 10) var gravity: float = 1200.0

@export_group("Player Physics")
@export_range(100, 1000, 5) var player_speed: float = 450.0
@export_range(200, 1500, 10) var player_jump_force: float = 680.0
@export_range(200, 1000, 10) var player_pogo_force: float = 450.0
@export_range(0.0, 0.5, 0.01) var player_coyote_time: float = 0.1
@export_range(0.0, 0.5, 0.01) var player_jump_buffer: float = 0.1
@export_range(0.1, 1.0, 0.05) var player_jump_release_dampener: float = 0.4
@export_range(0.0, 0.5, 0.01) var player_wall_coyote_time: float = 0.05
@export_range(1.0, 3.0, 0.1) var player_fast_fall_gravity_multiplier: float = 1.4
@export var player_max_air_jumps: int = 0
@export_range(500, 2500, 50) var player_dash_speed: float = 1400.0
@export_range(0.05, 0.5, 0.01) var player_dash_duration: float = 0.15
@export_range(0.1, 2.0, 0.05) var player_dash_cooldown: float = 0.5
@export_range(50, 500, 5) var player_wall_slide_speed: float = 120.0
@export_range(500, 2500, 50) var player_wall_jump_force_x: float = 1650.0
@export_range(200, 1500, 10) var player_wall_jump_force_y: float = 680.0

@export_group("Player Combat")
@export_range(0.05, 1.0, 0.01) var player_attack_cooldown: float = 0.12
@export_range(0.1, 1.0, 0.01) var player_charge_time: float = 0.35
@export_range(0.05, 0.5, 0.01) var player_attack_duration: float = 0.1
@export_range(100, 5000, 100) var player_attack_friction: float = 2000.0
@export_range(100, 1500, 25) var player_knockback_speed: float = 700.0
@export_range(0.05, 0.5, 0.01) var player_knockback_duration: float = 0.1
@export_range(100, 1500, 25) var player_hazard_knockback_speed: float = 400.0
@export_range(1, 100, 1) var player_determination_per_charge: int = 10

@export_group("Player Health / Healing")
@export_range(1, 20, 1) var player_max_health: int = 5
@export_range(0.1, 5.0, 0.1) var player_heal_duration: float = 2.0
@export_range(1, 10, 1) var player_max_healing_charges: int = 1
@export_range(0.1, 5.0, 0.1) var player_invincibility_duration: float = 1.5

@export_group("Boss")
@export_range(10, 500, 5) var boss_health: int = 30
@export_range(50, 500, 5) var boss_patrol_speed: float = 100.0
@export_range(0.0, 2.0, 0.01) var boss_invincibility_duration: float = 0.1

=====================================
FILE: ./src/core/data/game_state_data.gd
=====================================
# src/core/data/game_state_data.gd
#
# A Resource that holds all shared runtime state for the game session.
# This standardizes our state management to follow the same pattern as
# PlayerStateData and BossStateData.
class_name GameStateData
extends Resource

# The resource path to the encounter script for the next level to be loaded.
var current_encounter_script_path: String = ""

# A reference to the fully constructed, but currently hidden, level node.
# This is used by the loading screen to pass the level to the game scene.
var prebuilt_level: Node = null

=====================================
FILE: ./src/core/DEPRECATION.md
=====================================
# Core Subsystem Deprecation Map

This document tracks file renames and moves specifically within `src/core`.

| Old Path | New Path | Reason | Date | Migration Note |
|---|---|---|---|---|
| `res://src/core/data/Config.gd` | `res://src/core/data/config/config.gd` | Naming convention and grouping. | 2025-08-10 | Autoload path was updated in `project.godot`. |
| `res://src/core/data/settings.gd` | `res://src/core/data/config/settings.gd` | Grouped with other data configs. | 2025-08-10 | Autoload path was updated in `project.godot`. |

=====================================
FILE: ./src/core/building/level_parser.gd
=====================================
# src/core/building/level_parser.gd
#
# The parser is now capable of identifying and storing data for
# multiple, user-defined minion spawn markers.
class_name LevelParser
extends RefCounted

const GridUtilsScript = preload("res://src/core/util/grid_utils.gd")

func parse_level_data(encounter_script: Script) -> LevelBuildData:
	var data = LevelBuildData.new()
	if not is_instance_valid(encounter_script): return data

	data.encounter_script_object = encounter_script

	var constants = encounter_script.get_script_constant_map()
	if not constants.has("LAYOUT_SCRIPT_PATH"): return data

	var layout_script: Script = load(constants["LAYOUT_SCRIPT_PATH"])
	if not is_instance_valid(layout_script): return data
	
	var terrain_data_array: Array = layout_script.TERRAIN_DATA
	var grid_height = terrain_data_array.size()
	var grid_width = 0
	if grid_height > 0: grid_width = terrain_data_array[0].length()
	data.dimensions_tiles = Vector2i(grid_width, grid_height)
	
	# Get the minion spawn dictionary from the encounter script.
	var minion_spawn_dict = constants.get("MINION_SPAWNS", {})

	for y in range(grid_height):
		var row_string: String = terrain_data_array[y]
		for x in range(row_string.length()):
			var tile_char: String = row_string[x]
			var tile_grid_pos = Vector2i(x, y)
			var tile_world_pos = GridUtilsScript.grid_to_world(tile_grid_pos)

			match tile_char:
				'#': data.terrain_tiles.append(tile_world_pos)
				'-': data.oneway_platforms.append(tile_world_pos)
				'^': data.hazard_tiles.append(tile_world_pos)
				'.': data.background_tiles.append(tile_grid_pos)
				_:
					data.background_tiles.append(tile_grid_pos)
					if tile_char == constants["PLAYER_SPAWN_MARKER"]:
						data.player_spawn_pos = tile_world_pos
					elif tile_char == constants["BOSS_SPAWN_MARKER"]:
						data.boss_spawn_pos = tile_world_pos
					# NEW: Check if the character is a defined minion marker.
					elif minion_spawn_dict.has(tile_char):
						var scene_path = minion_spawn_dict[tile_char]
						var spawn_data = LevelBuildData.MinionSpawnData.new(scene_path, tile_world_pos)
						data.minion_spawns.append(spawn_data)
	
	return data


=====================================
FILE: ./src/core/building/terrain_builder.gd
=====================================
# src/core/builders/terrain_builder.gd
#
# Responsibility: To create all static level geometry. It now uses Polygon2D
# for visuals to prevent conflicts with the debug drawing system.
class_name TerrainBuilder
extends Node

const GridUtilsScript = preload("res://src/core/util/grid_utils.gd")

func build_terrain_async(parent_node: Node, build_data: LevelBuildData, tree: SceneTree) -> void:
	const BATCH_SIZE = 20

	for i in range(build_data.terrain_tiles.size()):
		_create_solid_tile(parent_node, build_data.terrain_tiles[i])
		if i % BATCH_SIZE == 0: await tree.process_frame

	for i in range(build_data.oneway_platforms.size()):
		_create_oneway_platform(parent_node, build_data.oneway_platforms[i])
		if i % BATCH_SIZE == 0: await tree.process_frame

	for i in range(build_data.hazard_tiles.size()):
		_create_hazard_tile(parent_node, build_data.hazard_tiles[i])
		if i % BATCH_SIZE == 0: await tree.process_frame
	
	await tree.process_frame

func fill_viewport(parent_node: Node, build_data: LevelBuildData, camera: Camera2D):
	var view_transform = camera.get_viewport().get_canvas_transform().affine_inverse()
	var world_top_left = view_transform.origin
	var world_bottom_right = world_top_left + camera.get_viewport_rect().size * view_transform.get_scale()
	
	var grid_top_left = GridUtilsScript.world_to_grid(world_top_left)
	var grid_bottom_right = GridUtilsScript.world_to_grid(world_bottom_right)
	
	var existing_bg_tiles = {}
	for pos in build_data.background_tiles:
		existing_bg_tiles[pos] = true

	for y in range(grid_top_left.y, grid_bottom_right.y + 1):
		for x in range(grid_top_left.x, grid_bottom_right.x + 1):
			var grid_pos = Vector2i(x, y)
			if not existing_bg_tiles.has(grid_pos):
				_create_background_tile(parent_node, grid_pos)

func _create_background_tile(parent_node: Node, grid_pos: Vector2i):
	var visual_rect = ColorRect.new()
	visual_rect.color = Palette.COLOR_GRID
	visual_rect.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	visual_rect.position = Vector2(grid_pos) * Constants.TILE_SIZE
	parent_node.add_child(visual_rect)
	parent_node.move_child(visual_rect, 0)

func _create_solid_tile(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = 2
	static_body.add_to_group(Identifiers.Groups.WORLD)
	
	var collision_shape := CollisionShape2D.new()
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	collision_shape.shape = rectangle_shape
	static_body.add_child(collision_shape)
	
	var visual_poly := Polygon2D.new()
	var half_size = Constants.TILE_SIZE / 2.0
	visual_poly.polygon = [
		Vector2(-half_size, -half_size), Vector2(half_size, -half_size),
		Vector2(half_size, half_size), Vector2(-half_size, half_size)
	]
	visual_poly.color = Palette.COLOR_TERRAIN_PRIMARY
	static_body.add_child(visual_poly)
	
	parent_node.add_child(static_body)

func _create_oneway_platform(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = 2
	static_body.add_to_group(Identifiers.Groups.WORLD)
	static_body.add_to_group(Identifiers.Groups.ONEWAY_PLATFORMS)
	
	var collision_shape := CollisionShape2D.new()
	collision_shape.one_way_collision = true
	var rectangle_shape := RectangleShape2D.new()
	var platform_height = 10.0
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, platform_height)
	collision_shape.shape = rectangle_shape
	collision_shape.position.y = -(Constants.TILE_SIZE / 2.0) + (rectangle_shape.size.y / 2.0)
	static_body.add_child(collision_shape)

	var visual_poly := Polygon2D.new()
	var half_width = Constants.TILE_SIZE / 2.0
	var half_height = platform_height / 2.0
	visual_poly.position = collision_shape.position
	visual_poly.polygon = [
		Vector2(-half_width, -half_height), Vector2(half_width, -half_height),
		Vector2(half_width, half_height), Vector2(-half_width, half_height)
	]
	visual_poly.color = Palette.COLOR_TERRAIN_SECONDARY
	static_body.add_child(visual_poly)
	
	parent_node.add_child(static_body)

func _create_hazard_tile(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = 10
	static_body.add_to_group(Identifiers.Groups.WORLD)
	static_body.add_to_group(Identifiers.Groups.HAZARD)
	
	var collision_shape := CollisionShape2D.new()
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	collision_shape.shape = rectangle_shape
	static_body.add_child(collision_shape)
	
	var visual_poly := Polygon2D.new()
	var half_size = Constants.TILE_SIZE / 2.0
	visual_poly.polygon = [
		Vector2(-half_size, -half_size), Vector2(half_size, -half_size),
		Vector2(half_size, half_size), Vector2(-half_size, half_size)
	]
	visual_poly.color = Palette.COLOR_HAZARD_PRIMARY
	static_body.add_child(visual_poly)
	
	parent_node.add_child(static_body)

=====================================
FILE: ./src/core/building/level_build_data.gd
=====================================
# src/core/builders/level_build_data.gd
#
# A custom Resource script that acts as a data container. It now
# holds a list of minion spawn data.
class_name LevelBuildData
extends Resource

# Inner class to hold data for a single minion spawn.
class MinionSpawnData extends RefCounted:
	var scene_path: String
	var position: Vector2
	func _init(p_path: String, p_pos: Vector2):
		scene_path = p_path
		position = p_pos

var terrain_tiles: Array[Vector2] = []
var oneway_platforms: Array[Vector2] = []
var hazard_tiles: Array[Vector2] = []
var background_tiles: Array[Vector2i] = []
var player_spawn_pos: Vector2 = Vector2.ZERO
var boss_spawn_pos: Vector2 = Vector2.ZERO
var encounter_script_object: Object = null
var dimensions_tiles: Vector2i = Vector2i.ZERO
var minion_spawns: Array[MinionSpawnData] = []

=====================================
FILE: ./src/core/building/arena_builder.gd
=====================================
# src/core/building/arena_builder.gd
#
# The ArenaBuilder now correctly awaits the completion of the intro
# sequence handle, ensuring the boss is spawned before the level is returned.
extends Node

var _current_build_data: LevelBuildData
var _current_level_container: Node
var _intro_sequence_handle: SequenceHandle

func build_level_async() -> Node:
	if is_instance_valid(_intro_sequence_handle): _intro_sequence_handle.cancel()
	_intro_sequence_handle = null
	
	_current_level_container = Node.new(); _current_level_container.name = "LevelContainer"

	var encounter_path: String = GameManager.state.current_encounter_script_path
	if encounter_path.is_empty(): return _current_level_container
		
	var encounter_script: Script = load(encounter_path)
	if not is_instance_valid(encounter_script): return _current_level_container
		
	var parser = LevelParser.new()
	_current_build_data = parser.parse_level_data(encounter_script)
	_current_level_container.set_meta("build_data", _current_build_data)
	
	await get_tree().process_frame

	var terrain_builder = TerrainBuilder.new()
	await terrain_builder.build_terrain_async(_current_level_container, _current_build_data, get_tree())

	await _spawn_player_async()
	await _spawn_hud_async()
	await _spawn_minions_async()
	
	# THE FIX: Store the handle returned by the sequencer.
	_intro_sequence_handle = _run_intro_sequence()
	# Now, wait for the intro sequence to fully complete before proceeding.
	if is_instance_valid(_intro_sequence_handle):
		await _intro_sequence_handle.finished

	await get_tree().process_frame
	
	return _current_level_container

func _spawn_player_async() -> void:
	var instance = load(AssetPaths.SCENE_PLAYER).instantiate()
	instance.global_position = _current_build_data.player_spawn_pos
	_current_level_container.add_child(instance)
	await get_tree().process_frame

func _spawn_boss_async() -> Node:
	var boss_scene: PackedScene = _current_build_data.encounter_script_object.BOSS_SCENE
	if not boss_scene: return null
	var instance = boss_scene.instantiate()
	instance.global_position = _current_build_data.boss_spawn_pos
	_current_level_container.add_child(instance)
	await get_tree().process_frame
	return instance

func _spawn_hud_async() -> void:
	var instance = load(AssetPaths.SCENE_GAME_HUD).instantiate()
	_current_level_container.add_child(instance)
	await get_tree().process_frame

func _spawn_minions_async() -> void:
	for spawn_data in _current_build_data.minion_spawns:
		var instance = load(spawn_data.scene_path).instantiate()
		instance.global_position = spawn_data.position
		_current_level_container.add_child(instance)
		await get_tree().process_frame

func _run_intro_sequence() -> SequenceHandle:
	var wait_step = WaitStep.new(); wait_step.duration = 0.5
	var spawn_boss_step = CallableStep.new()
	spawn_boss_step.callable = Callable(self, "_spawn_boss_async")
	var intro_steps: Array[SequenceStep] = [wait_step, spawn_boss_step]
	return Sequencer.run_sequence(intro_steps)

=====================================
FILE: ./src/arenas/arena_00_layout.gd
=====================================
# src/arenas/arena_00_layout.gd
#
# This file defines the physical terrain for Arena 00.
# It now includes two Turret (T) spawn points.
extends Node

const TERRAIN_DATA = [
	"####################",
	"#..................#",
	"#....@.............#",
	"#............&.....#",
	"#.........#--#.....#",
	"#.........#..#.....#",
	"#.........#--#.....#",
	"#.........#..#.....#",
	"#..T......#..#.....#",
	"#.........#..#.....#",
	"#..................#",
	"#..................#",
	"#.........####.....#",
	"#.........####.....#",
	"#.........####.....#",
	"####......####.....#",
	"####......####..T..#",
	"####...............#",
	"#..................#",
	"###############^^^##"
]


# --- COORDINATE LEGEND ---
#
#    A B C D E F G H I J K L M N O P Q R S T
# 1  # # # # # # # # # # # # # # # # # # # #
# 2  # . . . . . . . . . . . . . . . . . . #
# 3  # . . . . @ . . . . . . . . . . . . . #
# 4  # . . . . . . . . . . . . & . . . . . #
# 5  # . . . . . . . . . # - - # . . . . . #
# 6  # . . . . . . . . . # . . # . . . . . #
# 7  # . . . . . . . . . # - - # . . . . . #
# 8  # . . . . . . . . . # . . # . . . . . #
# 9  # . . . . . . . . . # . . # . . . . . #
# 10 # . . . . . . . . . # . . # . . . . . #
# 11 # . . . . . . . . . . . . . . . . . . #
# 12 # . . . . . . . . . . . . . . . . . . #
# 13 # . . . . . . . . . # # # # . . . . . #
# 14 # . . . . . . . . . # # # # . . . . . #
# 15 # . . . . . . . . . # # # # . . . . . #
# 16 # # # # . . . . . . # # # # . . . . . #
# 17 # # # # . . . . . . # # # # . . . . . #
# 18 # # # # . . . . . . . . . . . . . . . #
# 19 # . . . . . . . . . . . . . . . . . . #
# 20 # # # # # # # # # # # # # # # ^ ^ ^ # #
#
# --- TERRAIN LEGEND ---
# # = Solid Wall/Floor
# - = Oneway Platform
# ^ = Hazard
# . = Empty Space
#
# --- ENTITY MARKERS (For visual reference only) ---
# @ = Player Spawn
# & = Boss Spawn
# NEEDS UPDATED TURRET


=====================================
FILE: ./src/arenas/arena_00_encounter.gd
=====================================
# src/arenas/arena_00_encounter.gd
# This encounter file now defines a list of spawnable minions.
extends Node

const LAYOUT_SCRIPT_PATH = "res://src/arenas/arena_00_layout.gd"

# --- BOSS DATA ---
const BOSS_SCENE = preload(AssetPaths.SCENE_BASE_BOSS)
const BOSS_SPAWN_MARKER = "&"

# --- PLAYER DATA ---
const PLAYER_SPAWN_MARKER = "@"

# --- MINION DATA ---
const MINION_SPAWNS = {
	"T": AssetPaths.SCENE_TURRET
}

=====================================
FILE: ./src/api/combat/damage_info.gd
=====================================
# src/api/combat/damage_info.gd
# A typed Resource to define a complete damage event.
class_name DamageInfo
extends Resource

@export var amount: int = 1
var source_node: Node = null # FIX: Removed @export. This is a runtime-only property.
@export var bypass_invincibility: bool = false


=====================================
FILE: ./src/api/combat/damage_result.gd
=====================================
# src/api/combat/damage_result.gd
# A typed Resource for the return value of apply_damage.
class_name DamageResult
extends Resource

@export var was_damaged: bool = false
@export var knockback_velocity: Vector2 = Vector2.ZERO


=====================================
FILE: ./src/api/interfaces/i_damageable.gd
=====================================
# src/api/interfaces/i_damageable.gd
#
# The "Interface" contract for any object that can take damage. This is a
# conceptual interface and is not meant to be extended directly. It serves as
# project documentation for the damage system's API.
#
# We check for compliance by using `target.has_method("apply_damage")`.
class_name IDamageable

# --- The Contract ---
#
# func apply_damage(damage_info: DamageInfo) -> DamageResult:
#   Must accept a DamageInfo resource.
#   Must return a DamageResult resource.
#

=====================================
FILE: ./src/api/interfaces/component_interface.gd
=====================================
# src/api/interfaces/component_interface.gd
#
# This script defines the formal "contract" or "interface" for all components
# in the project (HealthComponent, CombatComponent, etc.).
class_name ComponentInterface
extends Node

# The setup function is now more flexible.
# It takes the owner and an optional dictionary for any other dependencies.
# MODIFIED: Prefixed parameters with an underscore to silence UNUSED_PARAMETER
# warnings, as this base implementation is intentionally empty.
func setup(_p_owner: Node, _p_dependencies: Dictionary = {}) -> void:
	pass

func teardown() -> void:
	pass


=====================================
FILE: ./src/projectiles/player_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cmdkxwvysirh1"]

[ext_resource type="Script" path="res://src/projectiles/player_shot.gd" id="1_4wg7x"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playershot"]
size = Vector2(40, 40)

[node name="PlayerShot" type="Area2D" groups=["player_projectile"]]
collision_layer = 0
collision_mask = 22
script = ExtResource("1_4wg7x")
metadata/pool_name = &"player_shots"

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
color = Color(0.92549, 0.92549, 0.92549, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_playershot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-20, -20, 40, 40)

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/turret_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://d1e2f3g4h5i6j"]

[ext_resource type="Script" path="res://src/projectiles/turret_shot.gd" id="1_turret_shot_script"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_turretshot"]
size = Vector2(20, 20)

[node name="TurretShot" type="Area2D"]
collision_layer = 16
collision_mask = 65
script = ExtResource("1_turret_shot_script")
metadata/pool_name = &"turret_shots"

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -10.0
offset_top = -10.0
offset_right = 10.0
offset_bottom = 10.0
color = Color(0.898039, 0.898039, 0.898039, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_turretshot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-10, -10, 20, 20)

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/boss_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cxnmr7yrvchve"]

[ext_resource type="Script" path="res://src/projectiles/boss_shot.gd" id="1_4qgog"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bossshot"]
size = Vector2(60, 60)

[node name="BossShot" type="Area2D"]
collision_layer = 16
collision_mask = 0
script = ExtResource("1_4qgog")
metadata/pool_name = &"boss_shots"

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0.8, 0.4, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_bossshot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-30, -30, 60, 60)

[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/turret_shot.gd
=====================================
# src/projectiles/turret_shot.gd
# CORRECTED: Uses Identifiers constants for group checks.
extends Area2D

const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

@onready var collision_shape: CollisionShape2D = $CollisionShape2D

var direction = Vector2.LEFT
var speed = 500.0
var damage = 1

func _ready():
	add_to_group(Identifiers.Groups.ENEMY_PROJECTILE)
	$ColorRect.color = Palette.COLOR_UI_ACCENT_PRIMARY

func activate():
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

func deactivate():
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000)

func _physics_process(delta):
	global_position += direction * speed * delta

func _on_body_entered(body: Node) -> void:
	var damageable = CombatUtilsScript.find_damageable(body)
	if is_instance_valid(damageable):
		var damage_info = DamageInfo.new()
		damage_info.amount = damage
		damage_info.source_node = self
		damageable.apply_damage(damage_info)
	
	ObjectPool.return_instance(self)

func _on_screen_exited():
	ObjectPool.return_instance(self)


=====================================
FILE: ./src/projectiles/player_shot.gd
=====================================
# src/projectiles/player_shot.gd
# CORRECTED: Uses the correct static function call syntax.
extends Area2D

const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

@onready var collision_shape: CollisionShape2D = $CollisionShape2D

var direction = Vector2.RIGHT
var speed = 1000.0
var damage = 2

func _ready():
	$ColorRect.color = Palette.COLOR_PLAYER_PROJECTILE

func activate():
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

func deactivate():
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000)

func _physics_process(delta):
	global_position += direction * speed * delta

func _on_body_entered(body: Node) -> void:
	var damageable = CombatUtilsScript.find_damageable(body) # CORRECTED CALL
	if is_instance_valid(damageable):
		var damage_info = DamageInfo.new()
		damage_info.amount = damage
		damage_info.source_node = self
		damageable.apply_damage(damage_info)
	
	ObjectPool.return_instance(self)

func _on_area_entered(area: Area2D) -> void:
	if area.is_in_group("enemy_projectile"):
		ObjectPool.return_instance(area)
	ObjectPool.return_instance(self)

func _on_screen_exited():
	ObjectPool.return_instance(self)


=====================================
FILE: ./src/projectiles/boss_shot.gd
=====================================
# src/projectiles/boss_shot.gd
#
# Final, stable pool-aware version.
extends Area2D

@onready var collision_shape: CollisionShape2D = $CollisionShape2D

var direction = Vector2.LEFT
var speed = 400.0

func _ready():
	$ColorRect.color = Palette.COLOR_HAZARD_PRIMARY
	add_to_group("enemy_projectile")

func activate():
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

func deactivate():
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000) # Move to the graveyard

func _physics_process(delta):
	global_position += direction * speed * delta

func _on_screen_exited():
	ObjectPool.return_instance(self)

=====================================
FILE: ./src/entities/boss/attack_patterns/lunge_attack.tres
=====================================
[gd_resource type="Resource" script_class="AttackPattern" load_steps=2 format=3]

[ext_resource type="Script" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="1_attack_pattern"]

[resource]
script = ExtResource("1_attack_pattern")
attack_id = &"lunge"
telegraph_duration = 0.8
attack_duration = 0.5
cooldown = 2.0


=====================================
FILE: ./src/entities/boss/attack_patterns/attack_pattern.gd
=====================================
# src/entities/boss/attack_patterns/attack_pattern.gd
#
# A data resource that defines the properties of a single boss attack.
# This allows for designing and tuning attacks directly in the editor.
class_name AttackPattern
extends Resource

# The unique identifier for this attack, used by the state machine to
# determine which logic to execute.
@export var attack_id: StringName = &""

# The duration in seconds that the attack's warning visual is displayed.
@export var telegraph_duration: float = 0.5

# The duration in seconds that the attack is active.
# (More useful for continuous attacks like beams, but good to have).
@export var attack_duration: float = 0.1

# The time in seconds after this attack completes before the boss can
# start the telegraph for a new attack.
@export var cooldown: float = 1.5


=====================================
FILE: ./src/entities/boss/attack_patterns/volley_shot.tres
=====================================
[gd_resource type="Resource" script_class="AttackPattern" load_steps=2 format=3]

[ext_resource type="Script" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="1_attack_pattern"]

[resource]
script = ExtResource("1_attack_pattern")
attack_id = &"volley_shot"
telegraph_duration = 0.7
attack_duration = 0.6
cooldown = 2.5


=====================================
FILE: ./src/entities/boss/attack_patterns/single_shot.tres
=====================================
[gd_resource type="Resource" script_class="AttackPattern" load_steps=2 format=3]

[ext_resource type="Script" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="1_attack_pattern"]

[resource]
script = ExtResource("1_attack_pattern")
attack_id = &"single_shot"
telegraph_duration = 0.5
attack_duration = 0.1
cooldown = 1.5


=====================================
FILE: ./src/entities/boss/boss_state_data.gd
=====================================
# src/entities/boss/data/boss_state_data.gd
#
# A Resource that holds all shared state data for the Boss.
class_name BossStateData
extends Resource

# --- Configuration Reference ---
var config: CombatConfig

# --- Health & Combat ---
var max_health: int = 30
var health: int = 30:
	set(value):
		health = clamp(value, 0, max_health)

var is_invincible: bool = false
var current_attack: int # Using the enum from base_boss.gd

# --- Physics & Movement ---
var facing_direction: float = -1.0

=====================================
FILE: ./src/entities/boss/base_boss.tscn
=====================================
[gd_scene load_steps=10 format=3 uid="uid://dmej4a7ykn2q0"]

[ext_resource type="Script" uid="uid://5bkyx4fguxor" path="res://src/entities/boss/base_boss.gd" id="1_26qjf"]
[ext_resource type="Script" uid="uid://dy4xl0q65hagu" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="2_30ufx"]
[ext_resource type="Script" uid="uid://ctgxiw44ctnwu" path="res://src/entities/components/health_component.gd" id="2_b0so8"]
[ext_resource type="Script" uid="uid://bbtepurljrp6c" path="res://src/entities/components/base_state_machine.gd" id="3_fsm"]
[ext_resource type="Script" uid="uid://uood4w1gjnxv" path="res://src/entities/components/armor_component.gd" id="4_armor"]
[ext_resource type="Resource" path="res://src/entities/boss/attack_patterns/single_shot.tres" id="5_pattern_single"]
[ext_resource type="Resource" path="res://src/entities/boss/attack_patterns/volley_shot.tres" id="6_pattern_volley"]
[ext_resource type="Resource" path="res://src/entities/boss/attack_patterns/lunge_attack.tres" id="7_pattern_lunge"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bossbody"]
size = Vector2(60, 60)

[node name="BaseBoss" type="CharacterBody2D" groups=["enemy"]]
collision_layer = 12
collision_mask = 3
script = ExtResource("1_26qjf")
phase_1_patterns = Array[ExtResource("2_30ufx")]([ExtResource("5_pattern_single"), ExtResource("6_pattern_volley")])
phase_2_patterns = Array[ExtResource("2_30ufx")]([ExtResource("5_pattern_single"), ExtResource("6_pattern_volley"), ExtResource("7_pattern_lunge")])
phase_3_patterns = Array[ExtResource("2_30ufx")]([ExtResource("6_pattern_volley"), ExtResource("7_pattern_lunge")])

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0.6, 0.6, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_bossbody")

[node name="CooldownTimer" type="Timer" parent="."]
wait_time = 1.5
one_shot = true

[node name="PatrolTimer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_b0so8")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("3_fsm")

[node name="ArmorComponent" type="Node" parent="."]
script = ExtResource("4_armor")

[connection signal="timeout" from="CooldownTimer" to="." method="_on_cooldown_timer_timeout"]
[connection signal="timeout" from="PatrolTimer" to="." method="_on_patrol_timer_timeout"]


=====================================
FILE: ./src/entities/boss/states/state_boss_idle.gd
=====================================
# src/entities/boss/states/state_boss_idle.gd
# This state now safely handles cases where no attack patterns are configured.
extends BaseState
class_name BossStateIdle

func enter(_msg := {}):
	owner.velocity.x = 0
	
	# THE FIX: Add a guard clause to prevent a crash if the patterns array is empty.
	if owner.current_attack_patterns.is_empty():
		push_warning("BossStateIdle: No attack patterns defined for the current phase. Defaulting to Cooldown.")
		# Transition to cooldown to prevent getting stuck in an idle->attack loop.
		state_machine.change_state(owner.State.COOLDOWN)
		return
	
	var chosen_pattern = owner.current_attack_patterns[randi() % owner.current_attack_patterns.size()]
	
	state_machine.change_state(owner.State.ATTACK, {"pattern": chosen_pattern})

func process_physics(_delta: float):
	pass


=====================================
FILE: ./src/entities/boss/states/state_boss_lunge.gd
=====================================
# src/entities/boss/states/state_boss_lunge.gd
# This state executes a high-speed, armored lunge attack.
extends BaseState
class_name BossStateLunge

var boss: BaseBoss
var lunge_duration: float
const LUNGE_SPEED = 1200.0

func enter(msg := {}):
	self.boss = owner as BaseBoss
	if not boss: return

	# Get the duration from the AttackPattern resource.
	var pattern = msg.get("pattern")
	if pattern:
		lunge_duration = pattern.attack_duration
	else:
		lunge_duration = 0.5 # Default fallback
	
	# Activate armor and set velocity for the lunge.
	boss.armor_component.activate()
	boss.velocity = Vector2(state_data.facing_direction * LUNGE_SPEED, 0)

func process_physics(delta: float):
	lunge_duration -= delta
	if lunge_duration <= 0:
		# Lunge is over. Deactivate armor and transition to cooldown.
		boss.armor_component.deactivate()
		state_machine.change_state(boss.State.COOLDOWN)


=====================================
FILE: ./src/entities/boss/states/state_boss_cooldown.gd
=====================================
# src/entities/boss/states/state_boss_cooldown.gd
# The state for when the boss is waiting after an attack.
extends BaseState
class_name BossStateCooldown

func enter(_msg := {}):
	owner.velocity.x = 0
	owner.cooldown_timer.start()

func process_physics(_delta: float):
	# The state itself does nothing; it's just waiting for the timer.
	pass


=====================================
FILE: ./src/entities/boss/states/state_boss_attack.gd
=====================================
# src/entities/boss/states/state_boss_attack.gd
# This state now displays a different telegraph shape for the lunge attack
# to clearly communicate the boss's intent to the player.
extends BaseState
class_name BossStateAttack

const TelegraphScene = preload(AssetPaths.SCENE_TELEGRAPH_COMPONENT)

var current_pattern: AttackPattern
var boss: BaseBoss

func enter(msg := {}):
	self.boss = owner as BaseBoss
	if not boss:
		push_error("BossStateAttack: Owner is not a BaseBoss. Aborting.")
		state_machine.change_state(owner.State.COOLDOWN)
		return

	if not msg.has("pattern"):
		push_error("BossStateAttack: No 'pattern' provided. Aborting.")
		state_machine.change_state(boss.State.COOLDOWN)
		return
	
	current_pattern = msg.get("pattern")
	
	_start_telegraph()

func _start_telegraph() -> void:
	var telegraph = TelegraphScene.instantiate()
	boss.add_child(telegraph)
	
	var telegraph_duration = current_pattern.telegraph_duration
	var telegraph_position: Vector2
	var telegraph_size: Vector2
	var telegraph_color = Palette.COLOR_HAZARD_PRIMARY

	# MODIFIED: Choose telegraph shape based on the attack ID.
	match current_pattern.attack_id:
		&"lunge":
			# For a lunge, show a long, thin rectangle covering the lunge path.
			var lunge_width = 800
			telegraph_size = Vector2(lunge_width, 60) # A thin rectangle
			# Position it in front of the boss, centered vertically.
			var x_offset = (lunge_width / 2.0) + (boss.get_node("CollisionShape2D").shape.size.x / 2.0)
			telegraph_position = boss.global_position + Vector2(state_data.facing_direction * x_offset, 0)
		_: # Default case for projectile attacks
			# For projectiles, show a square where the attack will originate.
			telegraph_size = Vector2(150, 150)
			telegraph_position = boss.global_position + Vector2(state_data.facing_direction * 100, 0)

	telegraph.start_telegraph(telegraph_duration, telegraph_size, telegraph_position, telegraph_color)
	await telegraph.telegraph_finished
	
	_execute_attack()

func _execute_attack():
	# If the attack was a lunge, the state change is handled here.
	if current_pattern.attack_id == &"lunge":
		state_machine.change_state(boss.State.LUNGE, {"pattern": current_pattern})
		return

	# Otherwise, execute the projectile attack.
	match current_pattern.attack_id:
		&"single_shot":
			boss.fire_shot_at_player()
		&"volley_shot":
			match boss.phases_remaining:
				3: boss.fire_volley(1)
				2: boss.fire_volley(3)
				1: boss.fire_volley(5)

	boss.cooldown_timer.wait_time = current_pattern.cooldown
	state_machine.change_state(boss.State.COOLDOWN)


=====================================
FILE: ./src/entities/boss/states/state_boss_patrol.gd
=====================================
# src/entities/boss/states/state_boss_patrol.gd
# The state responsible for the boss's back-and-forth movement.
extends BaseState
class_name BossStatePatrol

func enter(_msg := {}):
	owner.patrol_timer.start()

func process_physics(_delta: float):
	owner.velocity.x = state_data.facing_direction * state_data.config.boss_patrol_speed

=====================================
FILE: ./src/entities/boss/base_boss.gd
=====================================
# src/entities/boss/base_boss.gd
# REFACTORED: The _ready function is now broken into smaller helper methods
# to improve readability and adhere to the Single Responsibility Principle.
@tool
class_name BaseBoss
extends CharacterBody2D

const Validator = preload("res://src/core/util/scene_validator.gd")

enum State { IDLE, ATTACK, COOLDOWN, PATROL, LUNGE }

# --- Node References ---
var visual_sprite: ColorRect
var cooldown_timer: Timer
var patrol_timer: Timer
var health_component: HealthComponent
var state_machine: BaseStateMachine
var armor_component: ArmorComponent

# --- DATA ---
var b_data: BossStateData
var player: CharacterBody2D = null
var _active_attack_tween: Tween
var _is_dead: bool = false
var phases_remaining: int = 3

# --- EDITOR CONFIGURATION ---
@export_group("Phase Configuration")
@export_range(0.0, 1.0, 0.01) var phase_2_threshold: float = 0.7
@export_range(0.0, 1.0, 0.01) var phase_3_threshold: float = 0.4

@export_group("Attack Patterns")
@export var phase_1_patterns: Array[AttackPattern] = []
@export var phase_2_patterns: Array[AttackPattern] = []
@export var phase_3_patterns: Array[AttackPattern] = []
var current_attack_patterns: Array[AttackPattern] = []

func _get_configuration_warnings() -> PackedStringArray:
	return Validator.validate_boss_scene(self)

func _ready():
	visual_sprite = $ColorRect
	cooldown_timer = $CooldownTimer
	patrol_timer = $PatrolTimer
	health_component = $HealthComponent
	state_machine = $StateMachine
	armor_component = $ArmorComponent

	if Engine.is_editor_hint(): return
	
	_initialize_data()
	_initialize_components()
	_initialize_state_machine()
	_connect_signals()
	
	player = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER)

func _notification(what):
	if what == NOTIFICATION_PREDELETE:
		if is_instance_valid(state_machine): state_machine.teardown()
		if is_instance_valid(health_component): health_component.teardown()
		b_data = null

func _physics_process(delta):
	if Engine.is_editor_hint(): return
	if not is_on_floor(): 
		velocity.y += b_data.config.gravity * delta
	
	move_and_slide()
	if state_machine.current_state == state_machine.states[State.PATROL] and is_on_wall():
		b_data.facing_direction *= -1.0

# --- Private Helper Functions ---

func _initialize_data():
	add_to_group(Identifiers.Groups.ENEMY)
	visual_sprite.color = Palette.COLOR_BOSS_PRIMARY
	current_attack_patterns = phase_1_patterns
	b_data = BossStateData.new()
	b_data.config = CombatDB.config

func _initialize_components():
	health_component.setup(self, { "data_resource": b_data, "config": b_data.config })
	armor_component.setup(self)

func _initialize_state_machine():
	var states = {
		State.IDLE: BossStateIdle.new(self, state_machine, b_data),
		State.ATTACK: BossStateAttack.new(self, state_machine, b_data),
		State.COOLDOWN: BossStateCooldown.new(self, state_machine, b_data),
		State.PATROL: BossStatePatrol.new(self, state_machine, b_data),
		State.LUNGE: BossStateLunge.new(self, state_machine, b_data),
	}
	state_machine.setup(self, { "states": states, "initial_state_key": State.COOLDOWN })

func _connect_signals():
	health_component.health_changed.connect(_on_health_component_health_changed)
	health_component.died.connect(_on_health_component_died)
	health_component.health_threshold_reached.connect(_on_health_threshold_reached)

# --- Public API & Logic ---

func get_health_thresholds() -> Array[float]: return [phase_2_threshold, phase_3_threshold]

func die():
	if _is_dead: return
	_is_dead = true
	if is_instance_valid(_active_attack_tween): _active_attack_tween.kill()
	set_physics_process(false)
	hide()
	EventBus.emit(EventCatalog.BOSS_DIED, {"boss_node": self})

func fire_volley(shot_count: int):
	if is_instance_valid(_active_attack_tween): _active_attack_tween.kill()
	_active_attack_tween = get_tree().create_tween()
	for i in range(shot_count):
		_active_attack_tween.tween_callback(fire_shot_at_player)
		if i < shot_count - 1: _active_attack_tween.tween_interval(0.2)
	
func _update_player_tracking():
	if is_instance_valid(player):
		var dir_to_player = player.global_position.x - global_position.x
		if not is_zero_approx(dir_to_player): b_data.facing_direction = sign(dir_to_player)
	self.scale.x = b_data.facing_direction
	
func fire_shot_at_player():
	if _is_dead: return
	if not is_instance_valid(player): return
	var shot = ObjectPool.get_instance(Identifiers.Pools.BOSS_SHOTS)
	if not shot: return
	_update_player_tracking()
	shot.direction = (player.global_position - global_position).normalized()
	shot.global_position = global_position
	shot.activate()

# --- Signal Handlers ---
	
func _on_health_threshold_reached(health_percentage: float):
	var new_phases_remaining = phases_remaining
	if health_percentage <= phase_3_threshold and phases_remaining > 1: new_phases_remaining = 1
	elif health_percentage <= phase_2_threshold and phases_remaining > 2: new_phases_remaining = 2

	if new_phases_remaining != phases_remaining:
		phases_remaining = new_phases_remaining
		match phases_remaining:
			2: current_attack_patterns = phase_2_patterns
			1: current_attack_patterns = phase_3_patterns
		EventBus.emit(EventCatalog.BOSS_PHASE_CHANGED, {"phases_remaining": phases_remaining})

func _on_cooldown_timer_timeout():
	if state_machine.current_state == state_machine.states[State.COOLDOWN]: state_machine.change_state(State.PATROL)
func _on_patrol_timer_timeout():
	if state_machine.current_state == state_machine.states[State.PATROL]: state_machine.change_state(State.IDLE)
func _on_health_component_health_changed(current, max_val):
	var ev = BossHealthChangedEvent.new(); ev.current_health = current; ev.max_health = max_val
	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev)
func _on_health_component_died(): die()

=====================================
FILE: ./src/entities/README.md
=====================================
Entities: how to add components & states
=======================================

Purpose
-------
Explain the minimal conventions for adding new components and states to the entity system.

Component contract (example)
----------------------------
Create components by extending the ComponentInterface base. Keep them small and single-purpose.

Example components (GDScript):

# res://src/entities/ComponentInterface.gd
extends Node2D
class_name ComponentInterface

# Called once when the entity or builder attaches the component.
func setup(config: Dictionary) -> void:
    pass

# Called when the component or entity is being destroyed / swapped.
func teardown() -> void:
    pass

# Example concrete component: HealthComponent
# res://src/entities/components/HealthComponent.gd
extends ComponentInterface
class_name HealthComponent

@export var max_hp: int = 100
var hp: int = 100

func setup(config: Dictionary) -> void:
    if config.has("max_hp"):
        max_hp = int(config["max_hp"])
    hp = max_hp

func receive_damage(amount: int) -> void:
    hp -= amount
    if hp <= 0:
        _on_dead()

func _on_dead() -> void:
    # notify EventBus / play death FX via ObjectPool
    EventBus.emit("entity_dead", { "entity": get_parent() })
    queue_free()

State machine (example)
-----------------------
BaseState provides enter/exit and processing hooks. States are swapped by the entity's BaseStateMachine.

# res://src/core/BaseState.gd
extends Node
class_name BaseState

func enter(data = null) -> void: pass
func exit() -> void: pass
func physics_process(delta: float) -> void: pass

# res://src/core/BaseStateMachine.gd
extends Node
class_name BaseStateMachine

var current_state: BaseState = null

func change_state(new_state: BaseState, data = null) -> void:
    if current_state:
        current_state.exit()
        current_state.queue_free() # if state is a node instance
    current_state = new_state
    add_child(current_state)
    current_state.enter(data)

Best practices
--------------
- Keep state logic deterministic; side-effects should be limited and explicit.
- Components must clean themselves up in `teardown()` (disconnect signals, stop timers).
- Use the `EventBus` for cross-system signals rather than global references.
- Store tunable numbers in `.tres` resources and refer to them in `setup()`.

Example workflow to add a component
----------------------------------
1. Create `res://src/entities/components/MyComponent.gd` extending `ComponentInterface`.
2. Expose tuning via `@export` variables or read from a provided config dictionary in `setup()`.
3. Add the component as a child to the entity scene or let entity builder attach it at spawn time.
4. Ensure `teardown()` reverses all runtime connections.



=====================================
FILE: ./src/entities/components/base_state_machine.gd
=====================================
# src/entities/components/base_state_machine.gd
#
# A reusable, node-based state machine manager. It now conforms to the
# ComponentInterface contract for a unified entity architecture.
class_name BaseStateMachine
extends ComponentInterface

var states: Dictionary = {}
var current_state: BaseState
var owner_node: Node

func _ready():
	owner_node = get_parent()

func _unhandled_input(event: InputEvent):
	if current_state:
		current_state.process_input(event)

func _physics_process(delta: float):
	if current_state:
		current_state.process_physics(delta)

func setup(_p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	# The setup method now conforms to the standard interface.
	# It expects a dictionary containing the states and the initial state key.
	assert(p_dependencies.has("states"), "StateMachine setup requires a 'states' dictionary.")
	assert(p_dependencies.has("initial_state_key"), "StateMachine setup requires an 'initial_state_key'.")
	
	self.states = p_dependencies["states"]
	var initial_state_key = p_dependencies["initial_state_key"]
	
	change_state(initial_state_key)

func teardown():
	if current_state:
		current_state.exit()
	for state in states.values():
		if state.has_method("teardown"):
			state.teardown()
	states.clear()
	current_state = null

func change_state(new_state_key, msg := {}):
	if not states.has(new_state_key):
		push_warning("StateMachine: Attempted to change to unknown state '%s'." % new_state_key)
		return

	if current_state == states.get(new_state_key):
		return

	if current_state:
		current_state.exit()

	current_state = states[new_state_key]
	current_state.enter(msg)

func _exit_tree():
	teardown()

=====================================
FILE: ./src/entities/components/telegraph_component.gd
=====================================
# src/entities/components/telegraph_component.gd
# A self-contained, reusable component for displaying attack telegraphs.
# It shows a visual warning for a set duration, then emits a signal
# and destroys itself.
class_name TelegraphComponent
extends Node2D

signal telegraph_finished

@onready var visual: ColorRect = $Visual

# The main public function. Call this to start the telegraph process.
func start_telegraph(duration: float, p_size: Vector2, p_position: Vector2, p_color: Color):
	# Configure the visual warning's appearance.
	self.global_position = p_position
	visual.size = p_size
	visual.color = p_color
	# Center the ColorRect on the component's position.
	visual.position = -p_size / 2.0
	
	# Use a tween to handle the timing. A tween is a node that animates
	# properties, but it can also just be used as a flexible timer.
	var tween = create_tween()
	
	# Wait for the specified duration.
	await tween.tween_interval(duration).finished
	
	# After the wait, emit the signal and clean up.
	# We check if the node is still valid in case the parent was destroyed
	# during the telegraph.
	if is_instance_valid(self):
		telegraph_finished.emit()
		queue_free()


=====================================
FILE: ./src/entities/components/combat_component.gd
=====================================
# src/entities/components/combat_component.gd
# CORRECTED: Uses Identifiers constants for group checks.
class_name CombatComponent
extends ComponentInterface

const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

signal damage_dealt
signal pogo_bounce_requested

var owner_node: CharacterBody2D
var p_data: PlayerStateData

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	self.p_data = p_dependencies.get("data_resource")
	
	if not p_data:
		push_error("CombatComponent.setup: Missing required dependency ('data_resource').")
		return

func teardown() -> void:
	owner_node = null
	p_data = null

func fire_shot():
	p_data.attack_cooldown_timer = p_data.config.player_attack_cooldown
	
	var shot = ObjectPool.get_instance(Identifiers.Pools.PLAYER_SHOTS)
	if not shot: return
	
	var shot_dir = Vector2(p_data.facing_direction, 0)
	if Input.is_action_pressed("ui_up"): shot_dir = Vector2.UP
	elif Input.is_action_pressed("ui_down"): shot_dir = Vector2.DOWN
	
	shot.direction = shot_dir
	shot.global_position = owner_node.global_position + (shot_dir * 60)
	shot.activate()

func trigger_pogo(pogo_target: Node) -> bool:
	if not is_instance_valid(pogo_target): return false

	var should_bounce = false
	
	if p_data.is_pogo_attack and pogo_target.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		should_bounce = true
		ObjectPool.return_instance(pogo_target)
	
	var damageable = CombatUtilsScript.find_damageable(pogo_target)
	if is_instance_valid(damageable):
		should_bounce = true
		var damage_info = DamageInfo.new()
		damage_info.amount = 1
		damage_info.source_node = owner_node
		damage_info.bypass_invincibility = true
		var damage_result = damageable.apply_damage(damage_info)
		if damage_result.was_damaged:
			damage_dealt.emit()

	if pogo_target is StaticBody2D and pogo_target.is_in_group(Identifiers.Groups.WORLD):
		should_bounce = true

	if should_bounce:
		pogo_bounce_requested.emit()
		return true

	return false


=====================================
FILE: ./src/entities/components/armor_component.gd
=====================================
# src/entities/components/armor_component.gd
#
# A simple component that manages an "armored" state. When active, it can
# be queried by other components (like HealthComponent) to determine if
# damage should be ignored.
class_name ArmorComponent
extends ComponentInterface

var is_armored: bool = false

func setup(_p_owner: Node, _p_dependencies: Dictionary = {}) -> void:
	# This component currently requires no setup.
	pass

func teardown() -> void:
	# This component holds no references, so no teardown is needed.
	pass

func activate():
	is_armored = true

func deactivate():
	is_armored = false

=====================================
FILE: ./src/entities/components/telegraph_component.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://b1i2c3d4e5f6g"]

[ext_resource type="Script" path="res://src/entities/components/telegraph_component.gd" id="1_telegraph_script"]

[node name="TelegraphComponent" type="Node2D"]
script = ExtResource("1_telegraph_script")

[node name="Visual" type="ColorRect" parent="."]
offset_right = 40.0
offset_bottom = 40.0
color = Color(1, 1, 1, 0.392157)


=====================================
FILE: ./src/entities/components/health_component.gd
=====================================
# src/entities/components/health_component.gd
# CORRECTED: Uses Identifiers constants for group checks.
class_name HealthComponent
extends ComponentInterface

signal health_changed(current_health: int, max_health: int)
signal died
signal health_threshold_reached(health_percentage: float)

var entity_data: Resource
var owner_node: CharacterBody2D
var armor_component: ArmorComponent

@onready var invincibility_timer: Timer = Timer.new()
@onready var hit_flash_timer: Timer = Timer.new()

var max_health: int
var invincibility_duration: float
var knockback_speed: float
var hazard_knockback_speed: float

func _ready():
	add_child(invincibility_timer)
	add_child(hit_flash_timer)
	invincibility_timer.one_shot = true
	hit_flash_timer.wait_time = 0.4
	
	invincibility_timer.timeout.connect(func(): entity_data.is_invincible = false)
	hit_flash_timer.timeout.connect(_on_hit_flash_timer_timeout)

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	self.entity_data = p_dependencies.get("data_resource")
	var cfg: CombatConfig = p_dependencies.get("config")
	
	self.armor_component = owner_node.get_node_or_null("ArmorComponent")
	
	if not entity_data or not cfg:
		push_error("HealthComponent.setup: Missing required dependencies ('data_resource', 'config').")
		return

	max_health = entity_data.max_health
	
	if owner_node.is_in_group(Identifiers.Groups.PLAYER):
		invincibility_duration = cfg.player_invincibility_duration
		knockback_speed = cfg.player_knockback_speed
		hazard_knockback_speed = cfg.player_hazard_knockback_speed
	else:
		invincibility_duration = cfg.boss_invincibility_duration
		knockback_speed = 0
		hazard_knockback_speed = 0
	
	entity_data.health = max_health
	
	var sprite = get_visual_sprite()
	if is_instance_valid(sprite) and not sprite.has_meta("original_color"):
		sprite.set_meta("original_color", sprite.color)
	
	health_changed.emit(entity_data.health, max_health)

func teardown() -> void:
	entity_data = null
	owner_node = null
	armor_component = null

func apply_damage(damage_info: DamageInfo) -> DamageResult:
	var result = DamageResult.new()
	
	if is_instance_valid(armor_component) and armor_component.is_armored:
		return result

	var is_dash_invincible = entity_data.get("is_dash_invincible") if "is_dash_invincible" in entity_data else false
	
	if (entity_data.is_invincible or is_dash_invincible) and not damage_info.bypass_invincibility:
		return result

	var health_before_damage = entity_data.health
	entity_data.health -= damage_info.amount
	health_changed.emit(entity_data.health, max_health)
	
	_trigger_hit_flash()
	
	entity_data.is_invincible = true
	invincibility_timer.start(invincibility_duration)
	
	result.knockback_velocity = _calculate_knockback(damage_info.source_node)
	
	_check_for_threshold_crossing(health_before_damage, entity_data.health)
	
	if entity_data.health <= 0:
		died.emit()
	
	result.was_damaged = true
	return result

func _check_for_threshold_crossing(health_before: int, health_after: int):
	if not owner_node.has_method("get_health_thresholds"): return
	var thresholds: Array[float] = owner_node.get_health_thresholds()
	var old_percent = float(health_before) / max_health
	var new_percent = float(health_after) / max_health
	
	for threshold in thresholds:
		if old_percent > threshold and new_percent <= threshold:
			health_threshold_reached.emit(threshold)

func _calculate_knockback(source: Node) -> Vector2:
	if knockback_speed == 0 or not is_instance_valid(source): return Vector2.ZERO
	var knockback_dir = (owner_node.global_position - source.global_position).normalized()
	var speed = knockback_speed
	if source.is_in_group(Identifiers.Groups.HAZARD):
		speed = hazard_knockback_speed
	return (knockback_dir + Vector2.UP * 0.5).normalized() * speed

func _trigger_hit_flash():
	var sprite = get_visual_sprite()
	if is_instance_valid(sprite):
		if not sprite.has_meta("original_color"):
			sprite.set_meta("original_color", sprite.color)
			
		sprite.color = Palette.COLOR_UI_ACCENT_PRIMARY
		hit_flash_timer.start()

func get_visual_sprite() -> ColorRect:
	if is_instance_valid(owner_node):
		return owner_node.get_node_or_null("ColorRect")
	return null

func _on_hit_flash_timer_timeout():
	var sprite = get_visual_sprite()
	if is_instance_valid(sprite):
		if sprite.has_meta("original_color"):
			sprite.color = sprite.get_meta("original_color")

=====================================
FILE: ./src/entities/components/input_component.gd
=====================================
# src/entities/components/input_component.gd
#
# A component that centralizes all input polling. It is now fully decoupled
# from global singletons and receives all dependencies from its owner.
class_name InputComponent
extends ComponentInterface

var owner_node: CharacterBody2D
var p_data: PlayerStateData
var combat_component: CombatComponent
var state_machine: BaseStateMachine
var _config: CombatConfig # Internal reference to the injected config

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	
	# THE FIX: Store references to all injected dependencies.
	self.p_data = p_dependencies.get("data_resource")
	self.state_machine = p_dependencies.get("state_machine")
	self.combat_component = p_dependencies.get("combat_component")
	self._config = p_dependencies.get("config")
	
	if not p_data or not state_machine or not combat_component or not _config:
		push_error("InputComponent.setup: Missing one or more required dependencies.")
		return

func teardown() -> void:
	owner_node = null
	p_data = null
	combat_component = null
	state_machine = null
	_config = null

func _physics_process(_delta):
	# THE FIX: Use the internal _config reference instead of the global singleton.
	if Input.is_action_just_pressed("ui_jump"):
		p_data.jump_buffer_timer = _config.player_jump_buffer
	
	if not state_machine.states.find_key(state_machine.current_state) in owner_node.ACTION_ALLOWED_STATES:
		return
	
	if Input.is_action_just_pressed("ui_attack") and p_data.attack_cooldown_timer <= 0:
		p_data.is_charging = true
		p_data.charge_timer = 0.0
	
	if Input.is_action_just_released("ui_attack"):
		if p_data.is_charging:
			# THE FIX: Use the internal _config reference.
			if p_data.charge_timer >= _config.player_charge_time:
				combat_component.fire_shot()
			else:
				state_machine.change_state(owner_node.State.ATTACK)
			p_data.is_charging = false
	
	if Input.is_action_just_pressed("ui_dash") and p_data.can_dash and p_data.dash_cooldown_timer <= 0:
		state_machine.change_state(owner_node.State.DASH)
	
	if owner_node.is_on_floor() and Input.is_action_pressed("ui_down") and Input.is_action_pressed("ui_jump") and p_data.healing_charges > 0 and is_zero_approx(owner_node.velocity.x):
		state_machine.change_state(owner_node.State.HEAL)

func _unhandled_input(event: InputEvent):
	if is_instance_valid(state_machine) and is_instance_valid(state_machine.current_state):
		state_machine.current_state.process_input(event)

=====================================
FILE: ./src/entities/components/base_state.gd
=====================================
# src/entities/components/base_state.gd
#
# The single, unified base class for all state machine states in the project.
# It defines the "contract" that every state must adhere to.
class_name BaseState
extends Object

var owner: Node
var state_machine: Node
var state_data: Resource

func _init(p_owner: Node, p_state_machine: Node, p_state_data: Resource):
	self.owner = p_owner
	self.state_machine = p_state_machine
	self.state_data = p_state_data

# NEW: Teardown function to break cyclic references and prevent memory leaks.
func teardown():
	owner = null
	state_machine = null
	state_data = null

func enter(_msg := {}):
	pass

func exit():
	pass

func process_physics(_delta: float):
	pass

func process_input(_event: InputEvent):
	pass

=====================================
FILE: ./src/entities/minions/turret.gd
=====================================
# src/entities/minions/turret.gd
# CORRECTED: Uses Identifiers constants for group checks.
class_name Turret
extends CharacterBody2D

enum State { IDLE, ATTACK }

@onready var visual: Polygon2D = $Visual
@onready var health_component: HealthComponent = $HealthComponent
@onready var state_machine: BaseStateMachine = $StateMachine
@onready var attack_timer: Timer = $AttackTimer
@onready var range_detector_shape: CollisionShape2D = $RangeDetector/CollisionShape2D

var t_data: TurretStateData
var player: CharacterBody2D

var fire_rate: float = 2.0
var detection_radius: float = 400.0

func _ready():
	add_to_group(Identifiers.Groups.ENEMY)
	t_data = TurretStateData.new()
	t_data.config = CombatDB.config
	
	var circle_shape = CircleShape2D.new()
	circle_shape.radius = detection_radius
	range_detector_shape.shape = circle_shape
	
	health_component.setup(self, {
		"data_resource": t_data,
		"config": t_data.config
	})
	
	var states = {
		State.IDLE: load("res://src/entities/minions/states/state_turret_idle.gd").new(self, state_machine, t_data),
		State.ATTACK: load("res://src/entities/minions/states/state_turret_attack.gd").new(self, state_machine, t_data)
	}
	state_machine.setup(self, { "states": states, "initial_state_key": State.IDLE })
	
	health_component.died.connect(die)
	
	player = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER)
	
	visual.color = Palette.COLOR_TERRAIN_SECONDARY

func _notification(what):
	if what == NOTIFICATION_PREDELETE:
		if is_instance_valid(state_machine): state_machine.teardown()
		if is_instance_valid(health_component): health_component.teardown()
		t_data = null

func die():
	queue_free()

func fire_at_player():
	if not is_instance_valid(player): return
	var shot = ObjectPool.get_instance(Identifiers.Pools.TURRET_SHOTS)
	if not shot: return
	shot.direction = (player.global_position - global_position).normalized()
	shot.global_position = global_position
	shot.activate()

func deactivate():
	if is_instance_valid(state_machine):
		state_machine.teardown()
	if is_instance_valid(attack_timer):
		attack_timer.stop()
	set_physics_process(false)
	$RangeDetector.monitoring = false

func _on_range_detector_body_entered(body):
	if not t_data: return
	if body.is_in_group(Identifiers.Groups.PLAYER):
		t_data.is_player_in_range = true

func _on_range_detector_body_exited(body):
	if not t_data: return
	if body.is_in_group(Identifiers.Groups.PLAYER):
		t_data.is_player_in_range = false


=====================================
FILE: ./src/entities/minions/turret_state_data.gd
=====================================
# src/entities/minions/turret_state_data.gd
# A Resource that holds all shared state data for the Turret minion.
class_name TurretStateData
extends Resource

# --- Configuration Reference ---
var config: CombatConfig

# --- Health & Combat ---
var max_health: int = 3
var health: int = 3:
	set(value):
		health = clamp(value, 0, max_health)

var is_invincible: bool = false

# --- Targeting ---
var is_player_in_range: bool = false

=====================================
FILE: ./src/entities/minions/states/state_turret_attack.gd
=====================================
# src/entities/minions/states/state_turret_attack.gd
# The state for when the turret is actively firing. The re-firing logic
# is now correctly placed in process_physics.
extends BaseState
class_name TurretStateAttack

var turret: Turret

func enter(_msg := {}):
	self.turret = owner as Turret
	if not turret: return
	
	# Fire the first shot immediately upon entering the state.
	turret.fire_at_player()
	turret.attack_timer.start(turret.fire_rate)

func process_physics(_delta: float):
	if not turret: return

	# Condition 1: If the player leaves the detection range, go back to idle.
	if not state_data.is_player_in_range:
		state_machine.change_state(turret.State.IDLE)
		return

	# Condition 2: If the attack cooldown has finished, fire again.
	if turret.attack_timer.is_stopped():
		turret.fire_at_player()
		turret.attack_timer.start(turret.fire_rate)


=====================================
FILE: ./src/entities/minions/states/state_turret_idle.gd
=====================================
# src/entities/minions/states/state_turret_idle.gd
# The state for when the turret is waiting for the player.
extends BaseState
class_name TurretStateIdle

var turret: Turret

func enter(_msg := {}):
	self.turret = owner as Turret
	if not turret: return

func exit():
	# Ensure the timer is stopped so the Attack state starts fresh.
	if is_instance_valid(turret):
		turret.attack_timer.stop()

func process_physics(_delta: float):
	if not turret: return
	
	if state_data.is_player_in_range:
		state_machine.change_state(turret.State.ATTACK)

=====================================
FILE: ./src/entities/minions/turret.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://c7d8e9f0g1h2i"]

[ext_resource type="Script" path="res://src/entities/minions/turret.gd" id="1_turret_script"]
[ext_resource type="Script" path="res://src/entities/components/health_component.gd" id="2_health_comp"]
[ext_resource type="Script" path="res://src/entities/components/base_state_machine.gd" id="3_fsm"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_turretbody"]
size = Vector2(50, 50)

[node name="Turret" type="CharacterBody2D" groups=["enemy"]]
collision_layer = 4
collision_mask = 3
script = ExtResource("1_turret_script")

[node name="Visual" type="Polygon2D" parent="."]
color = Color(0.490196, 0.490196, 0.490196, 1)
polygon = PackedVector2Array(-25, -25, 25, -25, 25, 25, -25, 25)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_turretbody")

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_health_comp")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("3_fsm")

[node name="AttackTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="RangeDetector" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 1

[node name="CollisionShape2D" type="CollisionShape2D" parent="RangeDetector"]

[connection signal="body_entered" from="RangeDetector" to="." method="_on_range_detector_body_entered"]
[connection signal="body_exited" from="RangeDetector" to="." method="_on_range_detector_body_exited"]


=====================================
FILE: ./src/entities/player/player.tscn
=====================================
[gd_scene load_steps=9 format=3 uid="uid://c6vknl71ea1bo"]

[ext_resource type="Script" path="res://src/entities/player/player.gd" id="1_4d1td"]
[ext_resource type="Script" path="res://src/entities/components/health_component.gd" id="2_hcomp"]
[ext_resource type="Script" path="res://src/entities/components/combat_component.gd" id="3_combat_comp"]
[ext_resource type="Script" path="res://src/entities/components/input_component.gd" id="4_input_comp"]
[ext_resource type="Script" path="res://src/entities/components/base_state_machine.gd" id="5_fsm"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playerbody"]
size = Vector2(40, 40)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_meleebox"]
size = Vector2(80, 40)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_pogobox"]
size = Vector2(40, 40)

[node name="Player" type="CharacterBody2D"]
collision_layer = 1
collision_mask = 14
script = ExtResource("1_4d1td")

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
color = Color(0.941176, 0.941176, 0.941176, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_playerbody")

[node name="MeleeHitbox" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 20

[node name="CollisionShape2D" type="CollisionShape2D" parent="MeleeHitbox"]
position = Vector2(60, 0)
shape = SubResource("RectangleShape2D_meleebox")
disabled = true

[node name="PogoHitbox" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 22

[node name="CollisionShape2D" type="CollisionShape2D" parent="PogoHitbox"]
shape = SubResource("RectangleShape2D_pogobox")
disabled = true

[node name="Hurtbox" type="Area2D" parent="."]
collision_layer = 64
collision_mask = 28

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hurtbox"]
shape = SubResource("RectangleShape2D_playerbody")

[node name="HealingTimer" type="Timer" parent="."]
one_shot = true

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_hcomp")

[node name="CombatComponent" type="Node" parent="."]
script = ExtResource("3_combat_comp")

[node name="InputComponent" type="Node" parent="."]
script = ExtResource("4_input_comp")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("5_fsm")

[connection signal="timeout" from="HealingTimer" to="." method="_on_healing_timer_timeout"]

=====================================
FILE: ./src/entities/player/player.gd
=====================================
# src/entities/player/player.gd
# REFACTORED: The _ready function is now broken into smaller helper methods
# to improve readability and adhere to the Single Responsibility Principle.
extends CharacterBody2D

const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

# --- Signals ---
signal health_changed(current_health, max_health)
signal healing_charges_changed(current_charges)
signal died

# --- State Enum ---
enum State {MOVE, JUMP, FALL, DASH, WALL_SLIDE, ATTACK, HURT, HEAL}

# --- Node References ---
@onready var visual_sprite: ColorRect = $ColorRect
@onready var hurtbox: Area2D = $Hurtbox
@onready var healing_timer: Timer = $HealingTimer
@onready var health_component: HealthComponent = $HealthComponent
@onready var combat_component: CombatComponent = $CombatComponent
@onready var input_component: InputComponent = $InputComponent
@onready var state_machine: BaseStateMachine = $StateMachine

@onready var melee_hitbox: Area2D = $MeleeHitbox
@onready var pogo_hitbox: Area2D = $PogoHitbox
@onready var melee_hitbox_shape: CollisionShape2D = $MeleeHitbox/CollisionShape2D
@onready var pogo_hitbox_shape: CollisionShape2D = $PogoHitbox/CollisionShape2D

# --- Constants ---
const CLOSE_RANGE_THRESHOLD = 75.0

# --- Data ---
var p_data: PlayerStateData
const ACTION_ALLOWED_STATES = [State.MOVE, State.FALL, State.JUMP, State.WALL_SLIDE]

# --- Engine Functions ---

func _ready():
	add_to_group(Identifiers.Groups.PLAYER)
	
	_initialize_data()
	_initialize_components()
	_initialize_state_machine()
	_connect_signals()

	visual_sprite.color = Palette.COLOR_PLAYER
	_emit_healing_charges_changed_event()

func _notification(what):
	if what == NOTIFICATION_PREDELETE:
		if is_instance_valid(state_machine): state_machine.teardown()
		if is_instance_valid(health_component): health_component.teardown()
		if is_instance_valid(combat_component): combat_component.teardown()
		if is_instance_valid(input_component): input_component.teardown()
		p_data = null

func _physics_process(delta):
	_update_timers(delta)
	move_and_slide()
	_check_for_contact_damage()
	if is_on_wall() and not is_on_floor():
		p_data.wall_coyote_timer = p_data.config.player_wall_coyote_time
		p_data.last_wall_normal = get_wall_normal()

# --- Private Helper Functions ---

func _initialize_data():
	p_data = PlayerStateData.new()
	p_data.config = CombatDB.config

func _initialize_components():
	health_component.setup(self, { "data_resource": p_data, "config": p_data.config })
	combat_component.setup(self, { "data_resource": p_data })
	input_component.setup(self, { "data_resource": p_data, "state_machine": state_machine, "combat_component": combat_component, "config": p_data.config })

func _initialize_state_machine():
	var states = {
		State.MOVE: load("res://src/entities/player/states/state_move.gd").new(self, state_machine, p_data),
		State.FALL: load("res://src/entities/player/states/state_fall.gd").new(self, state_machine, p_data),
		State.JUMP: load("res://src/entities/player/states/state_jump.gd").new(self, state_machine, p_data),
		State.DASH: load("res://src/entities/player/states/state_dash.gd").new(self, state_machine, p_data),
		State.WALL_SLIDE: load("res://src/entities/player/states/state_wall_slide.gd").new(self, state_machine, p_data),
		State.ATTACK: load("res://src/entities/player/states/state_attack.gd").new(self, state_machine, p_data),
		State.HURT: load("res://src/entities/player/states/state_hurt.gd").new(self, state_machine, p_data),
		State.HEAL: load("res://src/entities/player/states/state_heal.gd").new(self, state_machine, p_data),
	}
	state_machine.setup(self, { "states": states, "initial_state_key": State.FALL })

func _connect_signals():
	melee_hitbox.body_entered.connect(_on_melee_hitbox_body_entered)
	pogo_hitbox.body_entered.connect(_on_pogo_hitbox_body_entered)
	melee_hitbox.area_entered.connect(_on_hitbox_area_entered)
	pogo_hitbox.area_entered.connect(_on_hitbox_area_entered)
	hurtbox.area_entered.connect(_on_hurtbox_area_entered)
	health_component.health_changed.connect(_on_health_component_health_changed)
	health_component.died.connect(_on_health_component_died)
	combat_component.damage_dealt.connect(_on_damage_dealt)
	combat_component.pogo_bounce_requested.connect(_on_pogo_bounce_requested)

func apply_horizontal_movement():
	velocity.x = Input.get_axis("ui_left", "ui_right") * p_data.config.player_speed
	if not is_zero_approx(velocity.x):
		p_data.facing_direction = sign(velocity.x)

func _cancel_heal():
	if healing_timer.is_stopped(): return
	healing_timer.stop()

func _update_timers(delta):
	p_data.coyote_timer = max(0.0, p_data.coyote_timer - delta)
	p_data.jump_buffer_timer = max(0.0, p_data.jump_buffer_timer - delta)
	p_data.dash_cooldown_timer = max(0.0, p_data.dash_cooldown_timer - delta)
	p_data.dash_duration_timer = max(0.0, p_data.dash_duration_timer - delta)
	p_data.attack_duration_timer = max(0.0, p_data.attack_duration_timer - delta)
	p_data.attack_cooldown_timer = max(0.0, p_data.attack_cooldown_timer - delta)
	p_data.knockback_timer = max(0.0, p_data.knockback_timer - delta)
	p_data.wall_coyote_timer = max(0.0, p_data.wall_coyote_timer - delta)
	p_data.pogo_fall_prevention_timer = max(0.0, p_data.pogo_fall_prevention_timer - delta)
	if p_data.is_charging and Input.is_action_pressed("ui_attack"):
		p_data.charge_timer += delta

func _emit_healing_charges_changed_event():
	var ev = PlayerHealingChargesChangedEvent.new()
	ev.current_charges = p_data.healing_charges
	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev)
	healing_charges_changed.emit(p_data.healing_charges)

func _check_for_contact_damage():
	if p_data.is_invincible: return
	for i in range(get_slide_collision_count()):
		var col = get_slide_collision(i)
		if not col: continue
		
		var collider = col.get_collider()
		if not (is_instance_valid(collider) and (collider.is_in_group(Identifiers.Groups.ENEMY) or collider.is_in_group(Identifiers.Groups.HAZARD))): continue
		
		var damage_info = DamageInfo.new()
		damage_info.amount = 1
		damage_info.source_node = collider
		var damage_result = health_component.apply_damage(damage_info)
		
		if damage_result.was_damaged:
			self.velocity = damage_result.knockback_velocity
			state_machine.change_state(State.HURT)
		break

func _on_damage_dealt():
	if p_data.healing_charges >= p_data.config.player_max_healing_charges: return
	p_data.determination_counter += 1
	if p_data.determination_counter >= p_data.config.player_determination_per_charge:
		p_data.determination_counter = 0; p_data.healing_charges += 1
		_emit_healing_charges_changed_event()

# --- Signal Handlers (Connected in Editor or _ready) ---
func _on_melee_hitbox_body_entered(body: Node) -> void:
	var target_id = body.get_instance_id()
	if p_data.hit_targets_this_swing.has(target_id): return
	p_data.hit_targets_this_swing[target_id] = true
	
	var damageable = CombatUtilsScript.find_damageable(body)
	if is_instance_valid(damageable):
		var damage_info = DamageInfo.new()
		damage_info.source_node = self
		var distance = self.global_position.distance_to(body.global_position)
		damage_info.amount = 5 if distance <= CLOSE_RANGE_THRESHOLD else 1
			
		var damage_result = damageable.apply_damage(damage_info)
		if damage_result.was_damaged:
			_on_damage_dealt()

func _on_pogo_hitbox_body_entered(body: Node) -> void:
	combat_component.trigger_pogo(body)

func _on_hitbox_area_entered(area: Area2D) -> void:
	if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		if p_data.is_pogo_attack:
			combat_component.trigger_pogo(area)
		else:
			ObjectPool.return_instance(area)

func _on_hurtbox_area_entered(area: Area2D) -> void:
	if p_data.is_invincible or p_data.is_dash_invincible:
		if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE): ObjectPool.return_instance(area)
		return
	
	if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		var damage_info = DamageInfo.new()
		damage_info.amount = 1
		damage_info.source_node = area
		var damage_result = health_component.apply_damage(damage_info)
		
		if damage_result.was_damaged:
			self.velocity = damage_result.knockback_velocity
			state_machine.change_state(State.HURT)
		
		ObjectPool.return_instance(area)

func _on_healing_timer_timeout():
	if state_machine.current_state == state_machine.states[State.HEAL]:
		p_data.health += 1; p_data.healing_charges -= 1
		_on_health_component_health_changed(p_data.health, p_data.max_health)
		_emit_healing_charges_changed_event()
		state_machine.change_state(State.MOVE)

func _on_health_component_health_changed(current: int, max_val: int) -> void:
	var ev = PlayerHealthChangedEvent.new()
	ev.current_health = current
	ev.max_health = max_val
	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev)
	health_changed.emit(current, max_val)

func _on_health_component_died():
	died.emit()

func _on_pogo_bounce_requested():
	velocity.y = -p_data.config.player_pogo_force
	position.y -= 1
	p_data.can_dash = true
	p_data.air_jumps_left = p_data.config.player_max_air_jumps
	state_machine.change_state(State.FALL)


=====================================
FILE: ./src/entities/player/states/state_jump.gd
=====================================
# src/entities/player/states/state_jump.gd
# Handles the player's upward movement (jump).
extends BaseState

func enter(_msg := {}):
	# THE FIX: Read directly from the injected config via the state_data resource.
	owner.velocity.y = -state_data.config.player_jump_force
	state_data.coyote_timer = 0
	state_data.jump_buffer_timer = 0

func process_physics(delta: float):
	owner.apply_horizontal_movement()
	
	# THE FIX: Read directly from the injected config.
	if Input.is_action_just_released("ui_jump") and owner.velocity.y < 0:
		owner.velocity.y *= state_data.config.player_jump_release_dampener

	_apply_gravity(delta)
	
	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

	_check_for_wall_slide()

func _apply_gravity(delta):
	# THE FIX: Read directly from the injected config.
	owner.velocity.y += state_data.config.gravity * delta
	if owner.velocity.y > 0.0:
		state_machine.change_state(owner.State.FALL)

func _check_for_wall_slide():
	if state_data.wall_coyote_timer > 0 and not owner.is_on_floor() and Input.get_axis("ui_left", "ui_right") != 0 and sign(Input.get_axis("ui_left", "ui_right")) == -state_data.last_wall_normal.x:
		state_machine.change_state(owner.State.WALL_SLIDE)

=====================================
FILE: ./src/entities/player/states/state_dash.gd
=====================================
# src/entities/player/states/state_dash.gd
# EXPERIMENTAL: All momentum is now cancelled at the end of a dash
# to test the "hard stop" game feel.
extends BaseState

var _dash_direction: Vector2

func enter(_msg := {}):
	state_data.is_dash_invincible = true
	state_data.can_dash = false
	state_data.dash_duration_timer = state_data.config.player_dash_duration
	state_data.dash_cooldown_timer = state_data.config.player_dash_cooldown
	
	_dash_direction = _get_dash_direction()
	owner.velocity = _dash_direction * state_data.config.player_dash_speed

func exit():
	state_data.is_dash_invincible = false
	
	if _dash_direction.y != 0:
		owner.velocity.y = 0.0
	if _dash_direction.x != 0:
		owner.velocity.x = 0.0

func process_physics(_delta: float):
	if state_data.dash_duration_timer <= 0:
		state_machine.change_state(owner.State.FALL)

func _get_dash_direction():
	if Input.is_action_pressed("ui_up"): return Vector2.UP
	if Input.is_action_pressed("ui_down"): return Vector2.DOWN
	return Vector2(state_data.facing_direction, 0)

=====================================
FILE: ./src/entities/player/states/state_heal.gd
=====================================
# src/entities/player/states/state_heal.gd
# Handles the player's healing state.
extends BaseState

func enter(_msg := {}):
	owner.velocity = Vector2.ZERO
	owner.healing_timer.start(state_data.config.player_heal_duration)

func exit():
	owner._cancel_heal()

func process_physics(_delta: float):
	if not Input.is_action_pressed("ui_down") or not Input.is_action_pressed("ui_jump") or not is_zero_approx(owner.velocity.x) or not owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)

=====================================
FILE: ./src/entities/player/states/state_wall_slide.gd
=====================================
# src/entities/player/states/state_wall_slide.gd
# Handles the player's wall sliding state.
extends BaseState

func enter(_msg := {}):
	state_data.can_dash = true
	state_data.air_jumps_left = state_data.config.player_max_air_jumps

func exit():
	if state_data.last_wall_normal != Vector2.ZERO:
		state_data.facing_direction = sign(state_data.last_wall_normal.x)

func process_physics(delta: float):
	var gravity = state_data.config.gravity
	var wall_slide_speed = state_data.config.player_wall_slide_speed
	owner.velocity.y = min(owner.velocity.y + gravity * delta, wall_slide_speed)
	
	state_data.facing_direction = sign(-state_data.last_wall_normal.x)
	
	if state_data.jump_buffer_timer > 0:
		_perform_wall_jump()
		return
	
	if Input.get_axis("ui_left", "ui_right") * -state_data.last_wall_normal.x < 0.8:
		state_machine.change_state(owner.State.FALL)
		return
		
	if state_data.wall_coyote_timer <= 0:
		state_machine.change_state(owner.State.FALL)
		return

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

func _perform_wall_jump():
	owner.velocity.y = -state_data.config.player_wall_jump_force_y
	owner.velocity.x = state_data.last_wall_normal.x * state_data.config.player_wall_jump_force_x
	state_data.jump_buffer_timer = 0
	state_data.coyote_timer = 0
	state_data.wall_coyote_timer = 0
	state_machine.change_state(owner.State.JUMP)

=====================================
FILE: ./src/entities/player/states/state_attack.gd
=====================================
# src/entities/player/states/state_attack.gd
# This state now dynamically changes the hitbox shape for upward attacks,
# ensuring the correct behavior for all melee directions.
extends BaseState

# Pre-create the shape resources for performance.
const FORWARD_ATTACK_SHAPE = preload("res://src/entities/player/data/forward_attack_shape.tres")
const UPWARD_ATTACK_SHAPE = preload("res://src/entities/player/data/upward_attack_shape.tres")

func enter(_msg := {}):
	state_data.is_pogo_attack = Input.is_action_pressed("ui_down")
	state_data.hit_targets_this_swing.clear()

	if state_data.is_pogo_attack:
		owner.pogo_hitbox.position = Vector2(0, 40)
		owner.pogo_hitbox_shape.disabled = false
		
		if not _check_for_immediate_pogo():
			state_machine.change_state(owner.State.FALL)
			return
	else:
		state_data.attack_duration_timer = state_data.config.player_attack_duration
		state_data.attack_cooldown_timer = state_data.config.player_attack_cooldown
		
		if Input.is_action_pressed("ui_up"):
			owner.melee_hitbox_shape.shape = UPWARD_ATTACK_SHAPE
			owner.melee_hitbox_shape.position = Vector2(0, -40)
		else:
			owner.melee_hitbox_shape.shape = FORWARD_ATTACK_SHAPE
			owner.melee_hitbox_shape.position = Vector2(state_data.facing_direction * 60, 0)
		
		owner.melee_hitbox_shape.disabled = false

func exit():
	owner.melee_hitbox_shape.call_deferred("set", "disabled", true)
	owner.pogo_hitbox_shape.call_deferred("set", "disabled", true)
	state_data.is_pogo_attack = false
	state_data.hit_targets_this_swing.clear()

func process_physics(delta: float):
	if not state_data.is_pogo_attack:
		var friction = state_data.config.player_attack_friction
		owner.velocity = owner.velocity.move_toward(Vector2.ZERO, friction * delta)
	
	if state_data.attack_duration_timer <= 0:
		state_machine.change_state(owner.State.FALL)

func _check_for_immediate_pogo() -> bool:
	var query = PhysicsShapeQueryParameters2D.new()
	query.shape = owner.pogo_hitbox_shape.shape
	query.transform = owner.global_transform * owner.pogo_hitbox.transform
	query.collision_mask = PhysicsLayers.WORLD | PhysicsLayers.ENEMY | PhysicsLayers.HAZARD | PhysicsLayers.ENEMY_PROJECTILE
	query.exclude = [owner]
	query.collide_with_areas = true
	
	var results = owner.get_world_2d().direct_space_state.intersect_shape(query)
	
	if results.is_empty(): return false
	
	for result in results:
		var pogo_target = result.collider
		if owner.combat_component.trigger_pogo(pogo_target):
			return true
	
	return false

=====================================
FILE: ./src/entities/player/states/state_hurt.gd
=====================================
# src/entities/player/states/state_hurt.gd
# This state now correctly implements a short stun duration, decoupled
# from the longer invincibility timer.
extends BaseState

func enter(_msg := {}):
	state_data.knockback_timer = state_data.config.player_knockback_duration
	state_data.is_charging = false
	owner._cancel_heal()

func process_physics(delta: float):
	owner.velocity.y += state_data.config.gravity * delta
	owner.velocity.x = move_toward(owner.velocity.x, 0, 800 * delta)

	if state_data.knockback_timer <= 0:
		state_machine.change_state(owner.State.FALL)

=====================================
FILE: ./src/entities/player/states/state_fall.gd
=====================================
# src/entities/player/states/state_fall.gd
# Handles the player's falling state.
extends BaseState

func process_physics(delta: float):
	owner.apply_horizontal_movement()
	_apply_gravity(delta)

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

	_check_for_wall_slide()

	if state_data.jump_buffer_timer > 0:
		if state_data.wall_coyote_timer > 0:
			_perform_wall_jump()
		elif state_data.coyote_timer > 0:
			state_machine.change_state(owner.State.JUMP)
		elif state_data.air_jumps_left > 0:
			_perform_air_jump()

func _apply_gravity(delta):
	var gravity_multiplier = 1.0
	if Input.is_action_pressed("ui_down"):
		gravity_multiplier = state_data.config.player_fast_fall_gravity_multiplier
	owner.velocity.y += state_data.config.gravity * gravity_multiplier * delta

func _check_for_wall_slide():
	if state_data.wall_coyote_timer > 0 and not owner.is_on_floor() and Input.get_axis("ui_left", "ui_right") != 0 and sign(Input.get_axis("ui_left", "ui_right")) == -state_data.last_wall_normal.x:
		state_machine.change_state(owner.State.WALL_SLIDE)

func _perform_air_jump():
	state_data.air_jumps_left -= 1
	state_machine.change_state(owner.State.JUMP)
	
func _perform_wall_jump():
	owner.velocity.x = state_data.last_wall_normal.x * state_data.config.player_wall_jump_force_x
	state_data.coyote_timer = 0
	state_data.wall_coyote_timer = 0
	state_machine.change_state(owner.State.JUMP)

=====================================
FILE: ./src/entities/player/states/state_move.gd
=====================================
# src/entities/player/states/state_move.gd
# Handles the player's grounded movement state.
extends BaseState

func enter(_msg := {}):
	state_data.air_jumps_left = state_data.config.player_max_air_jumps
	state_data.can_dash = true

func process_physics(delta: float):
	state_data.coyote_timer = state_data.config.player_coyote_time
	
	owner.velocity.y += state_data.config.gravity * delta
	owner.apply_horizontal_movement()

	if not owner.is_on_floor():
		state_machine.change_state(owner.State.FALL)
		return
	
	if Input.is_action_pressed("ui_down") and Input.is_action_just_pressed("ui_jump"):
		if owner.get_last_slide_collision():
			var floor_collider = owner.get_last_slide_collision().get_collider()
			if is_instance_valid(floor_collider) and floor_collider.is_in_group(Identifiers.Groups.ONEWAY_PLATFORMS):
				owner.position.y += 2
				state_data.jump_buffer_timer = 0
				state_machine.change_state(owner.State.FALL)
				return
	
	if state_data.jump_buffer_timer > 0:
		state_machine.change_state(owner.State.JUMP)
		return

=====================================
FILE: ./src/entities/player/data/player_state_data.gd
=====================================
# src/entities/player/data/player_state_data.gd
#
# A Resource that holds all shared state data for the Player. It now includes
# validation logic in its setters and a dictionary to track melee hits.
class_name PlayerStateData
extends Resource

# --- NEW: Configuration Reference ---
var config: CombatConfig # This will hold the reference to the global combat config.

# --- Health & Combat ---
var max_health: int = 5
var max_healing_charges: int = 1

var health: int = 5:
	set(value):
		health = clamp(value, 0, max_health)

var healing_charges: int = 0:
	set(value):
		healing_charges = clamp(value, 0, max_healing_charges)

var determination_counter: int = 0
var is_invincible: bool = false
var is_dash_invincible: bool = false
var hit_targets_this_swing: Dictionary = {}

# --- Physics & Movement ---
var air_jumps_left: int = 0
var facing_direction: int = 1
var last_wall_normal: Vector2 = Vector2.ZERO
var can_dash: bool = true
var pogo_fall_prevention_timer: float = 0.0

# --- Timers ---
var coyote_timer: float = 0.0
var jump_buffer_timer: float = 0.0
var wall_coyote_timer: float = 0.0
var dash_duration_timer: float = 0.0
var dash_cooldown_timer: float = 0.0
var attack_duration_timer: float = 0.0
var attack_cooldown_timer: float = 0.0
var knockback_timer: float = 0.0

# --- State Flags ---
var is_charging: bool = false
var charge_timer: float = 0.0
var is_pogo_attack: bool = false

=====================================
FILE: ./src/entities/player/data/upward_attack_shape.tres
=====================================
[gd_resource type="RectangleShape2D" load_steps=0 format=3 uid="uid://c0dt7jqwtnbr"]

[resource]
size = Vector2(40, 40)


=====================================
FILE: ./src/entities/player/data/forward_attack_shape.tres
=====================================
[gd_resource type="RectangleShape2D" load_steps=0 format=3 uid="uid://c1b2d3e4f5g6h"]

[resource]
size = Vector2(80, 40)


