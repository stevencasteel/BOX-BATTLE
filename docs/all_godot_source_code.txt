+---------------------------------+
|       B O X  B A T T L E        |
|  Godot Project Source Context   |
+---------------------------------+
Generated on: Mon Aug 11 08:55:35 CDT 2025

=====================================
PROJECT DIRECTORY STRUCTURE:
=====================================
.
├── README.md
├── data
│   └── combat_config.tres
├── default_bus_layout.tres
├── docs
│   ├── ARCHITECTURE.txt
│   ├── ARENA_CONCEPTS.txt
│   ├── ASSETS.txt
│   ├── BRAINSTORM.txt
│   ├── BUGS.txt
│   ├── CHANGELOG.txt
│   ├── CHANGELOG_archive_pre-0.4.0.txt
│   ├── DEPRECATION.md
│   ├── DESIGN.txt
│   ├── DOCS_PROTOCOL.txt
│   ├── LICENSE
│   ├── PLAYTESTING.txt
│   ├── ROADMAP.txt
│   ├── TODO.txt
│   ├── all_godot_source_code.txt
│   ├── all_script_errors.txt
│   ├── create_all_godot_source_code_txt.command
│   ├── create_all_godot_source_code_txt.sh
│   └── sprint_0_audit
│       ├── ADR-002_Communication_Patterns.md
│       ├── ADR.md
│       ├── ADR.mdADR-001_Service_Locator_Pattern.md
│       ├── ARCH-001_Refactoring_Principles.md
│       ├── ARCH-002_Acceptance_Criteria.md
│       ├── EVENT-001_Event_Flow_Map.md
│       ├── FSM-001_Entity_State_Flows.md
│       ├── TEST-001_Baseline_Metrics.md
│       ├── TEST-002_Smoke_Tests.md
│       ├── TEST-003_Regression_Checklist.md
│       ├── config_usage.txt
│       ├── event_usage.txt
│       ├── singleton_map.txt
│       └── state_machine_flow.md
├── icon.svg
├── pico.save
├── progess
│   └── progress_001-1.jpg
├── project.godot
└── src
    ├── api
    │   └── interfaces
    │       ├── component_interface.gd
    │       └── i_damageable.gd
    ├── arenas
    │   ├── arena_00_encounter.gd
    │   └── arena_00_layout.gd
    ├── core
    │   ├── DEPRECATION.md
    │   ├── README.md
    │   ├── building
    │   │   ├── arena_builder.gd
    │   │   ├── encounter_director.gd
    │   │   ├── level_build_data.gd
    │   │   ├── level_parser.gd
    │   │   └── terrain_builder.gd
    │   ├── data
    │   │   ├── combat_db.gd
    │   │   ├── config
    │   │   │   ├── combat_config.gd
    │   │   │   └── settings.gd
    │   │   └── game_state_data.gd
    │   ├── events
    │   │   ├── event_bus.gd
    │   │   ├── event_catalog.gd
    │   │   └── typed_events
    │   │       ├── boss_health_changed_event.gd
    │   │       ├── player_healing_charges_changed_event.gd
    │   │       └── player_health_changed_event.gd
    │   ├── sequencing
    │   │   ├── sequence_step.gd
    │   │   ├── sequencer.gd
    │   │   └── steps
    │   │       ├── emit_step.gd
    │   │       └── wait_step.gd
    │   ├── systems
    │   │   ├── audio_manager.gd
    │   │   ├── cursor_manager.gd
    │   │   ├── game_manager.gd
    │   │   ├── object_pool.gd
    │   │   └── scene_manager.gd
    │   └── util
    │       ├── asset_paths.gd
    │       ├── combat_utils.gd
    │       ├── constants.gd
    │       ├── palette.gd
    │       └── physics_layers.gd
    ├── entities
    │   ├── README.md
    │   ├── boss
    │   │   ├── base_boss.gd
    │   │   ├── base_boss.tscn
    │   │   ├── boss_state_data.gd
    │   │   └── states
    │   │       ├── state_boss_attack.gd
    │   │       ├── state_boss_cooldown.gd
    │   │       ├── state_boss_idle.gd
    │   │       └── state_boss_patrol.gd
    │   ├── components
    │   │   ├── base_state.gd
    │   │   ├── base_state_machine.gd
    │   │   ├── combat_component.gd
    │   │   ├── health_component.gd
    │   │   └── input_component.gd
    │   └── player
    │       ├── data
    │       │   └── player_state_data.gd
    │       ├── player.gd
    │       ├── player.tscn
    │       └── states
    │           ├── state_attack.gd
    │           ├── state_dash.gd
    │           ├── state_fall.gd
    │           ├── state_heal.gd
    │           ├── state_hurt.gd
    │           ├── state_jump.gd
    │           ├── state_move.gd
    │           └── state_wall_slide.gd
    ├── projectiles
    │   ├── boss_shot.gd
    │   ├── boss_shot.tscn
    │   ├── player_shot.gd
    │   └── player_shot.tscn
    ├── scenes
    │   ├── dev
    │   │   ├── test_ui.gd
    │   │   └── test_ui.tscn
    │   ├── game
    │   │   ├── game.gd
    │   │   └── game.tscn
    │   ├── loading
    │   │   ├── loading_screen.gd
    │   │   └── loading_screen.tscn
    │   └── main
    │       ├── main.gd
    │       └── main.tscn
    ├── tests
    └── ui
        ├── components
        │   ├── custom_slider
        │   │   └── custom_slider.gd
        │   └── styled_menu_item
        │       ├── styled_menu_item.gd
        │       └── styled_menu_item.tscn
        ├── game_hud
        │   ├── game_hud.gd
        │   └── game_hud.tscn
        ├── global_hud
        │   ├── global_hud.gd
        │   └── global_hud.tscn
        ├── menu_manager
        │   └── menu_manager.gd
        └── screens
            ├── controls_menu
            │   ├── controls_menu.gd
            │   └── controls_menu.tscn
            ├── credits_menu
            │   ├── credits_menu.gd
            │   └── credits_menu.tscn
            ├── game_over_screen
            │   ├── game_over_screen.gd
            │   └── game_over_screen.tscn
            ├── options_menu
            │   ├── options_menu.gd
            │   └── options_menu.tscn
            ├── sound_menu
            │   ├── sound_menu.gd
            │   └── sound_menu.tscn
            ├── title_screen
            │   ├── title_screen.gd
            │   └── title_screen.tscn
            └── victory_screen
                ├── victory_screen.gd
                └── victory_screen.tscn

48 directories, 131 files


=====================================
FILE: ./docs/TODO.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ████████╗ ██████╗ ██████╗  ██████╗                                         ║
║   ╚══██╔══╝██╔═══██╗██╔══██╗██╔═══██╗                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ╚██████╔╝██████╔╝╚██████╔╝                                        ║
║      ╚═╝    ╚═════╝ ╚═════╝  ╚═════╝                                         ║
║                                                                              ║
║                  Immediate Work Items & Actionable Tasks                     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              PHASE 1: THE CORE SYSTEMS REFACTOR                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This phase is our highest priority. We will refactor the existing code to  ║
║   align with professional design principles. This is the hard, foundational ║
║   work that enables all future features to be built cleanly and efficiently. ║
║                                                                              ║
║   ■  1. Implement the Event Bus                                              ║
║      ░  WHY: This is the new central nervous system for the game. It will    ║
║      ░  decouple all our systems, from UI to gameplay to audio, making the   ║
║      ░  entire codebase more modular and easier to manage (Dependency Inversion).║
║      ░  HOW:                                                                 ║
║      ░    1. Create a new autoload singleton: `EventBus.gd`.                 ║
║      ░    2. Implement three core functions: `on(event, callback)`,          ║
║      ░       `off(event, callback)`, and `emit(event, payload)`.             ║
║      ░    3. Create `EventCatalog.gd` to store all event names as constants. ║
║      ░    4. Refactor existing direct signal connections (e.g., in `game_hud.gd`)║
║      ░       to use the Event Bus. The HUD will listen for global events like ║
║      ░       `EventCatalog.PLAYER_HEALTH_CHANGED` instead of connecting directly.║
║                                                                              ║
║   ■  2. Refactor Player to use the State Pattern                             ║
║      ░  WHY: `player.gd` is a large, monolithic script. This refactor will   ║
║      ░  decouple the logic for each state into its own class, making the     ║
║      ░  system cleaner and easier to extend (Open/Closed Principle).         ║
║      ░  HOW: Follow the detailed plan to create a `states` subdirectory for  ║
║      ░  the player, create a `PlayerState` base class, and migrate the logic ║
║      ░  for each state into its own file. `player.gd` will become a "Context"║
║      ░  that simply manages the current state object.                        ║
║                                                                              ║
║   ■  3. Implement the Centralized Sequencer                                  ║
║      ░  WHY: To eliminate scattered `Timer` nodes and `await` calls for      ║
║      ░  scripted events. This provides a clean, readable way to create       ║
║      ░  cinematic sequences like boss intros or multi-stage attacks.         ║
║      ░  HOW: Create a new autoload singleton: `Sequencer.gd`. Implement a    ║
║      ░  `run_sequence(steps: Array)` function that can process a list of     ║
║      ░  commands like `wait`, `emit` (on Event Bus), and `call` (a function).║
║                                                                              ║
║   ■  4. Refactor Base Boss to use the State Pattern                          ║
║      ░  WHY: To mirror the player's clean architecture, preparing the boss   ║
║      ░  for the advanced "kitchen sink" mechanics planned for a later phase. ║
║      ░  HOW: Apply the exact same State Pattern as used for the Player,      ║
║      ░  creating a `states` subdirectory and migrating state logic into      ║
║      ░  separate, focused class files.                                       ║
║                                                                              ║
║   ■  5. Refactor ArenaBuilder using Single Responsibility Principle (SRP)    ║
║      ░  WHY: `ArenaBuilder.gd` currently has too many jobs. Separating these ║
║      ░  roles will make the level generation pipeline more robust and easier ║
║      ░  to maintain.                                                         ║
║      ░  HOW: Split the current logic into three new classes:                 ║
║      ░    - `LevelParser.gd`: Reads data from layout/encounter files.        ║
║      ░    - `TerrainBuilder.gd`: Creates the static level geometry (tiles).  ║
║      ░    - `EncounterDirector.gd`: Spawns all dynamic entities (player, boss).║
║      ░  `ArenaBuilder.gd` will become a simple coordinator of these new classes.║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            PHASE 2: DATA-DRIVEN & VISUAL FOUNDATION                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This phase separates hard-coded values from our logic and builds the key   ║
║   visual components needed to achieve our "Framer + Geometry Wars" aesthetic.║
║                                                                              ║
║   ■  1. Implement Data-Driven Configs (JSON)                                 ║
║      ░  WHY: To centralize all tuning and balancing numbers (damage, health, ║
║      ░  cooldowns) into external, human-readable files. This allows for rapid║
║      ░  iteration without changing any code.                                 ║
║      ░  HOW: Create a `Config.gd` singleton that loads `.json` files on start.║
║      ░  Move all combat-related values from `Constants.gd` into a new        ║
║      ░  `combat_config.json`. Refactor code to pull values from this config. ║
║                                                                              ║
║   ■  2. Implement the Global Palette System                                  ║
║      ░  WHY: To enforce a consistent, project-wide color scheme. This is a   ║
║      ░  critical prerequisite for the UI overhaul.                           ║
║      ░  HOW: Create a `Palette.gd` singleton. Define the 32-step grayscale   ║
║      ░  array and create semantic constant names (e.g., `COLOR_PLAYER`).     ║
║      ░  Replace all hard-coded colors with calls to this new Palette.        ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              PHASE 3: GAMEPLAY & FEEL ENHANCEMENT                    ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   With a solid architecture, we can now focus on making the game feel amazing.║
║                                                                              ║
║   □  1. Refine Player Combat Mechanics ("Game Juice")                        ║
║      ░  □ Enhanced Melee Hitbox: Implement a two-part hitbox where the inner ║
║      ░    box deals 1.5x damage and the outer deals 1.0x damage.             ║
║      ░  □ Input Buffering: Add buffering for attack and dash inputs.         ║
║      ░  □ Pogo-Fall Prevention: Add a brief grace period after a pogo to     ║
║      ░    prevent accidental fast-falling.                                   ║
║                                                                              ║
║   □  2. Implement "Kitchen Sink" Base Boss Features                          ║
║      ░  □ Health Phases: Boss transitions to new states at health thresholds.║
║      ░  □ Armor/Weak Points: Implement an `is_armored` state.                ║
║      ░  □ Clear Attack Telegraphing: Create a dedicated `Telegraph` state.   ║
║                                                                              ║
║   □  3. Implement a Minion Enemy Type                                        ║
║      ░  Create a simple Turret enemy to test our data-driven spawning and    ║
║      ░  component-based architecture (e.g., by reusing the HealthComponent). ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           PHASE 4: FUTURE EXPANSION & DEFERRED TASKS                 ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of lower-priority goals to be addressed after the core loop is solid.║
║                                                                              ║
║   □  UI Overhaul Part 1: The `StyledMenuItem`                                ║
║      ░  WHY: To create the cornerstone visual component for our new UI. We   ║
║      ░  will perfect this one piece before replacing the entire menu system. ║
║      ░  HOW: Create a new scene, `StyledMenuItem.tscn`, that extends `Control`.║
║      ░  It will use the `_draw()` function and shaders to render itself      ║
║      ░  procedurally with frosted glass, backlighting, and reactive effects, ║
║      ░  all driven by the `Palette` and `EventBus`.                          ║
║                                                                              ║
║   ░  Full UI System Replacement (using `StyledMenuItem`)                     ║
║   ░  Diegetic UI Implementation                                              ║
║   ░  Dynamic Music Layering System                                           ║
║   ░  Adaptive Boss AI Tactics Layer                                          ║
║   ░  Player Loadout System                                                   ║
║   ░  Special Game Modes (Boss Rush, Time Attack)                             ║
║   ░  Cleanup or remove `test_ui` scene and related dev assets.               ║
║   ░  Screen Shake (Explicitly deferred to avoid visual noise during debugging)║
║   ░  Dynamic Camera (Explicitly deferred per design decision)                ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/all_script_errors.txt
=====================================
Run in Box Battle folder for all errors in Terminal


"/Applications/Godot.app/Contents/MacOS/Godot" --verbose --check-only "/Users/stevencasteel/Desktop/GODOT/BOX BATTLE" > all_script_errors.txt


=====================================
FILE: ./docs/DESIGN.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗ ███████╗███████╗██╗ ██████╗ ███╗   ██╗                             ║
║   ██╔══██╗██╔════╝██╔════╝██║██╔════╝ ████╗  ██║                             ║
║   ██║  ██║█████╗  ███████╗██║██║  ███╗██╔██╗ ██║                             ║
║   ██║  ██║██╔══╝  ╚════██║██║██║   ██║██║╚██╗██║                             ║
║   ██████╔╝███████╗███████║██║╚██████╔╝██║ ╚████║                             ║
║   ╚═════╝ ╚══════╝╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝                             ║
║                                                                              ║
║      The official documentation for game mechanics and design philosophy.    ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         DESIGN PHILOSOPHY                            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Sublime Movement by Default: The player is given a complete, perfected, ║
║      and expressive moveset from the beginning. The joy of the game comes    ║
║      from mastering these tools, not from unlocking them.                    ║
║                                                                              ║
║   █  Aesthetic Minimalism, Technical Maximalism: The visual style will be    ║
║      clean, minimalist, and beautiful, inspired by high-end web design       ║
║      (e.g., Framer websites). We will use advanced shaders, procedural       ║
║      generation, and particle effects to create a polished, "expensive"      ║
║      look with elements like frosted glass, backlighting, and subtle gradients.║
║                                                                              ║
║   █  Robust, Maintainable Code: Development will adhere to the SOLID principles║
║      (Single Responsibility, Open/Closed, etc.) to ensure the codebase is    ║
║      scalable, easy to debug, and a pleasure to work on. We refactor first.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                           CORE MECHANICS                             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▓  Player Movement                                                         ║
║      ░ ■ Coyote Time & Jump Buffering for forgiving platforming.             ║
║      ░ ■ 4-directional Dash with a cooldown.                                 ║
║      ░ ■ Wall-Sliding and Wall-Jumping for verticality.                      ║
║      ░ ■ Fast-Fall: Holding 'Down' in the air increases gravity.             ║
║                                                                              ║
║   ▓  Combat System                                                           ║
║      ░ ■ Primary Melee: A fast, close-range attack.                          ║
║      ░ ■ Charged Shot: A long-range projectile attack.                       ║
║      ░ ■ Pogo Attack: A downward aerial attack that bounces on enemies.      ║
║      ░ ■ Dash Invincibility: The player cannot take damage during a dash.    ║
║                                                                              ║
║   ▓  Planned Combat Refinements                                              ║
║      ░ ■ Enhanced Melee Hitbox: The melee swing will have two hitboxes. The  ║
║      ░   inner box (close to the player) will deal 1.5x damage, rewarding    ║
║      ░   risky positioning. The outer box will deal 1.0x damage.             ║
║      ░ ■ Input Buffering: Attack and dash inputs will be buffered just like  ║
║      ░   the jump input, making the controls feel more responsive.           ║
║      ░ ■ Pogo-Fall Prevention: A brief window after a pogo will prevent      ║
║      ░   accidental fast-falling.                                            ║
║                                                                              ║
║   ▓  Health and Healing: The Determination System                            ║
║      ░  Healing is a resource earned by dealing damage. Landing hits fills a ║
║      ░  `determination_counter` to grant a `healing_charge`.                 ║
║                                                                              ║
║   ▓  Boss Design Template (The "Kitchen Sink")                               ║
║      ░  Our `base_boss` will be a template with a library of toggleable mechanics:║
║      ░  ■ Health Phases: Boss behavior and attacks change at health thresholds.║
║      ░  ■ Armor / Weak Points: Boss can enter armored states where it takes  ║
║      ░    no damage, punctuated by moments of vulnerability.                 ║
║      ░  ■ Clear Telegraphing: All attacks will be preceded by clear visual/audio║
║      ░    cues, ensuring tough but fair encounters.                          ║
║      ░  ■ Modular Movement: Bosses can be configured to fly, dash, jump, etc.║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 ARENA & BOSS BATTLE CONCEPTS                         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Each boss battle is a unique mechanical challenge inspired by a classic    ║
║   arcade game loop. The player's sublime moveset is the constant tool used to║
║   solve these varied combat puzzles.                                         ║
║                                                                              ║
║   ▒  Beat Box (Rhythm Game): Platforms appear/disappear on a musical beat.   ║
║   ▒  Sandbox (Momentum Vampirism): Boss steals player momentum on hit.       ║
║   ▒  Circuit Box (Tempest-like): Central core protected by rotating shields. ║
║   ▒  Garden Box (Centipede-like): Segmented boss weaves through obstacles.   ║
║   ▒  Traffic Box (Frogger-like): Cross "lanes" of projectiles to reach boss. ║
║   ▒  Gravity Box (Gravity Man-inspired): Gravity reverses periodically.      ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/ROADMAP.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗  ██████╗  █████╗ ██████╗ ███╗   ███╗ █████╗ ██████╗                ║
║   ██╔══██╗██╔═══██╗██╔══██╗██╔══██╗████╗ ████║██╔══██╗██╔══██╗               ║
║   ██████╔╝██║   ██║███████║██║  ██║██╔████╔██║███████║██████╔╝               ║
║   ██╔══██╗██║   ██║██╔══██║██║  ██║██║╚██╔╝██║██╔══██║██╔═══╝                ║
║   ██║  ██║╚██████╔╝██║  ██║██████╔╝██║ ╚═╝ ██║██║  ██║██║                    ║
║   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝                    ║
║                                                                              ║
║          The long-term vision and planned features for the project.          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              VERSION 1.0 GOALS - THE POLISHED SLICE                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The primary objective is to create a single, complete, and highly          ║
║   polished gameplay loop that serves as a benchmark for the entire game.     ║
║                                                                              ║
║   █  A Dynamic Boss: Arena 00 boss is fully functional with multiple,        ║
║      telegraphed attack patterns and basic AI (patrolling, facing player).   ║
║                                                                              ║
║   █  Functional HUD: Clear displays for player health, boss health, and      ║
║      healing charges.                                                        ║
║                                                                              ║
║   █  Satisfying Feedback: All core actions are accompanied by appropriate    ║
║      SFX, VFX (hit-flash, particles), and screen shake. The game feels good. ║
║                                                                              ║
║   █  Complete Flow: Player can go from Title -> Game -> Win/Loss -> Title    ║
║      with smooth transitions.                                                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         FUTURE VERSIONS                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▓  v1.1 - "The Content Expansion"                                          ║
║      Focus shifts to expanding content and adding a new dimension to combat. ║
║      ░  ■ Introduce a Second Arena & Boss (e.g., a flying or agile enemy).   ║
║      ░  ■ Introduce a "Minion" Enemy Type for more varied encounters.        ║
║      ░  ■ Refine Player Combat Indicators (Fizzle & Charge Meter).           ║
║                                                                              ║
║   ▓  v2.0 - "The Full Game Loop"                                             ║
║      Transforms the project from encounters into a cohesive game.            ║
║      ░  ■ Implement a Stage Select Screen.                                   ║
║      ░  ■ Basic Progression (Defeating a boss unlocks the next stage).       ║
║      ░  ■ Introduce More Enemy Variety (e.g., a stationary turret).          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         DREAM FEATURES                               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A "blue sky" list of ideas to explore once the core game is robust.        ║
║                                                                              ║
║   ■  Advanced Boss Mechanics (Multi-stage health, cinematic `Path2D` moves). ║
║   ■  Expanded Player Abilities (Unlockable weapons/skills post-boss fight).  ║
║   ■  Deeper Lore & Narrative (Expand on "Determination" theme).              ║
║   ■  Official GitHub Wiki for community documentation.                       ║
║   ■  Robust Debug Tools (More hotkeys and overlays).                         ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/PLAYTESTING.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═════════════╗
║  ██████╗ ██╗      █████╗ ██╗   ██╗████████╗███████╗███████╗████████╗██╗███╗   ██╗ ██████╗  ║
║  ██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║████╗  ██║██╔════╝  ║
║  ██████╔╝██║     ███████║ ╚████╔╝    ██║   █████╗  ███████╗   ██║   ██║██╔██╗ ██║██║  ███╗ ║
║  ██╔═══╝ ██║     ██╔══██║  ╚██╔╝     ██║   ██╔══╝  ╚════██║   ██║   ██║██║╚██╗██║██║   ██║ ║
║  ██║     ███████╗██║  ██║   ██║      ██║   ███████╗███████║   ██║   ██║██║ ╚████║╚██████╔╝ ║
║  ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝  ║ 
║                                                                              ╔═════════════╝
║           A log of all playtesting sessions and resulting feedback.          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PLAYTEST SESSION LOG                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   (New playtest session reports should be added here, most recent at top.)   ║
║                                                                              ║
║  --------------------------------------------------------------------------  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                      TEST SESSION TEMPLATE                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Date: YYYY-MM-DD                                                        ║
║   █  Tester: [Name or description, e.g., "Developer," "Friend A"]            ║
║   █  Build Version: [e.g., 0.1.0]                                            ║
║   █  Session Goal: [e.g., "Test boss fight fairness", "Check menu UI"]       ║
║                                                                              ║
║   ▓  General Observations & Player Behavior                                  ║
║      ░  What did the player do? Did they understand the goals? Where did     ║
║      ░  they go first? (e.g., "Tester immediately tried to wall-jump.")      ║
║                                                                              ║
║   ▓  Issues & Bugs Found                                                     ║
║      ░  List any bugs, crashes, or moments of confusion. Was anything        ║
║      ░  frustrating or unfair?                                               ║
║                                                                              ║
║   ▓  Positive Feedback                                                       ║
║      ░  What did the player say they enjoyed? What felt good to them?        ║
║      ░  (e.g., "Player audibly said 'nice' after a successful pogo.")        ║
║                                                                              ║
║   ▓  Suggestions & Ideas                                                     ║
║      ░  What did the player suggest? Did they have any ideas for new         ║
║      ░  features or changes?                                                 ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/BUGS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗ ██╗   ██╗ ██████╗ ███████╗                                         ║
║   ██╔══██╗██║   ██║██╔════╝ ██╔════╝                                         ║
║   ██████╔╝██║   ██║██║  ███╗███████╗                                         ║
║   ██╔══██╗██║   ██║██║   ██║╚════██║                                         ║
║   ██████╔╝╚██████╔╝╚██████╔╝███████║                                         ║
║   ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝                                         ║
║                                                                              ║
║             A tracker for all known issues, their status, and solutions.     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                             OPEN ISSUES                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   (All known bugs have been resolved.)                                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                             FIXED ISSUES                             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   □  [BUG-F007] Intermittent major hitch on first run or debug mode toggle.  ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Implemented a shader pre-warming system in `LoadingScreen`.║
║      ░  An off-screen `SubViewport` is used to instantiate key entities      ║
║      ░  (Player, Boss, Projectiles) for a single frame, which forces the     ║
║      ░  engine to compile their shaders before they are needed in the main   ║
║      ░  game scene. This eliminates the first-appearance stutter.            ║
║                                                                              ║
║   □  [BUG-F006] Significant stutter/hitch occurred on arena load.            ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Replaced the synchronous, blocking level generation with a ║
║      ░  new asynchronous system in `ArenaBuilder.gd`. The `build_level_async`║
║      ░  function now creates the level in batches, using `await` to yield    ║
║      ░  control back to the engine between batches. This prevents the main   ║
║      ░  thread from freezing, resulting in a smooth loading sequence managed ║
║      ░  by a new `LoadingScreen`.                                            ║
║                                                                              ║
║   □  [BUG-F005] Player death caused a physics crash.                         ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Scene changes in `game.gd`'s `_on_player_died` and         ║
║      ░  `_on_boss_died` functions were changed to `get_tree().call_deferred()`.║
║      ░  This prevents the engine from trying to delete a physics body while  ║
║      ░  it is still processing a physics callback.                           ║
║                                                                              ║
║   □  [BUG-F004] Hazard tiles did not deal contact damage.                    ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Corrected the implementation in `ArenaBuilder.gd`. The     ║
║      ░  `_create_hazard_tile` function now creates a single `StaticBody2D`   ║
║      ░  that exists on both the "world" and "hazard" collision layers and is ║
║      ░  part of both corresponding groups, ensuring it's both solid and damaging.║
║                                                                              ║
║   □  [BUG-F003] Drop-through platforms ("-") were not functioning.           ║
║      ░  FIXED: 2025-08-06                                                    ║
║      ░  SOLUTION: Re-implemented the Down+Jump logic in the player's         ║
║      ░  `state_move` function. Corrected the platform's collision shape      ║
║      ░  position and group assignment in `game.gd`.                          ║
║                                                                              ║
║   □  [BUG-F002] Player pogo attack was not working correctly on all surfaces.║
║      ░  FIXED: 2025-08-05                                                    ║
║      ░  SOLUTION: Re-implemented the `_check_for_immediate_pogo()` physics   ║
║      ░  query to allow instant bounces on surfaces directly below the        ║
║      ░  player. Updated the `_trigger_pogo()` function to correctly handle   ║
║      ░  bouncing on enemy projectiles in addition to standard enemies.       ║
║                                                                              ║
║   □  [BUG-F001] Player was not taking contact damage from boss/hazards.      ║
║      ░  FIXED: 2025-08-05                                                    ║
║      ░  SOLUTION: During the state machine refactor, the player's            ║
║      ░  `CharacterBody2D` `collision_mask` was changed to ignore the         ║
║      ░  "enemy" and "hazard" layers. The mask was updated in `player.tscn`   ║
║      ░  to correctly detect these layers again, allowing the existing        ║
║      ░  `_check_for_contact_damage()` function to work as intended.          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/CHANGELOG_archive_pre-0.4.0.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██          [0.5.0] - ARCHITECTURAL UNIFICATION - 2025-08-10            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version completes a foundational architectural refactor,           ║
║      unifying the player and boss state machines, introducing a robust       ║
║      interface-based damage system, and fully decoupling all entity          ║ 
║      components to create a highly scalable and maintainable codebase.       ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Introduced a robust, interface-based damage system (`IDamageable`)  ║
║      ░   to formalize how entities receive damage, replacing fragile,        ║
║      ░   string-based lookups with a type-safe contract.                     ║
║      ░ ■ Created a new `CombatUtils` singleton to provide a robust,          ║
║      ░   tree-traversing utility for finding `HealthComponent` nodes from any║
║      ░   physics collider, eliminating brittle `get_node` lookups.           ║
║      ░ ■ Decoupled `CombatComponent` from the `Player` by replacing direct   ║
║      ░   state and velocity mutation with a `pogo_bounce_requested` signal,  ║
║      ░   adhering to the Dependency Inversion Principle.                     ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, providing a single, robust API for navigation.    ║
║      ░ ■ Implemented state validation in `PlayerStateData` and `BossStateData`║
║      ░   using property setters. This makes the data resources self-validating
║      ░   and prevents invalid states (e.g., health > max_health).            ║
║      ░ ■ Created a formal `ComponentInterface` to act as a standardized      ║
║      ░   blueprint for all entity components, enforcing a consistent API.    ║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource,         ║
║      ░   eliminating the "dual architecture" of stateful singletons. All     ║
║      ░   runtime state is now consistently managed through `Resource` objects.║
║      ░ ■ Replaced the JSON-based `Config.gd` system with a type-safe,        ║
║      ░   `Resource`-based system (`CombatConfig.tres` and `CombatDB.gd`).    ║
║      ░   This provides compile-time safety against typos and enables direct  ║
║      ░   gameplay value tuning in the Godot editor's Inspector.              ║
║      ░ ■ Refactored the Player's state machine to load its state scripts at  ║
║      ░   runtime in `_ready()` instead of using `preload()`. This breaks a   ║
║      ░   brittle parse-time dependency cycle, making the game's startup      ║
║      ░   sequence significantly more robust.                                 ║
║      ░ ■ Further refined the `src/core` directory structure, creating new    ║
║      ░   subdirectories for typed configs and events (`data/config`, `events/typed_events`).║
║      ░ ■ Standardized script filenames to snake_case (e.g., `Config.gd` ->   ║
║      ░   `config.gd`) for project-wide consistency.                          ║
║      ░ ■ Reorganized the monolithic `src` directory into purpose-driven      ║
║      ░   subdirectories (`building`, `data`, `systems`, `util`, etc.) to     ║
║      ░   improve project modularity and scalability.                         ║
║      ░ ■ Simplified the global `EventBus` by removing unused features like   ║
║      ░   the priority system and `emit_async`, resulting in a leaner         ║
║      ░   implementation.                                                     ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the Player to use the new `BaseStateMachine`, simplifying║
║      ░   the main `player.gd` script and delegating all state logic.         ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities and  ║
║      ░   removing the final piece of duplicated state logic.                 ║
║      ░ ■ Decoupled all Components from their owners by passing dependencies  ║
║      ░   (data resources, other components) explicitly through a dictionary  ║
║      ░   in the `setup()` method, adhering to Dependency Inversion.          ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities.     ║
║      ░ ■ Simplified the `EventBus` API by removing the unused `_source`      ║
║      ░   parameter from the `emit` function.                                 ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Renamed `HealthComponent.take_damage` to `apply_damage` to          ║
║      ░   conform to the new interface contract.                              ║
║      ░ ■ Refactored `CombatUtils` to find any `IDamageable` node, not just   ║
║      ░   a `HealthComponent`.                                                ║
║      ░ ■ Updated all damage sources (projectiles, melee, pogo, contact)      ║
║      ░   to use the new `CombatUtils.find_damageable` method.                ║
║      ░ ■ Refactored all UI screens and core game scripts to use the new      ║
║      ░   `SceneManager`, removing scattered `get_tree().change_scene` calls. ║
║      ░ ■ Refactored `HealthComponent` to initialize the new self-validating  ║
║      ░   data resources, simplifying its internal logic.                     ║
║      ░ ■ Refactored `CombatComponent` and `InputComponent` to extend the new ║
║      ░   `ComponentInterface`, standardizing the entire component architecture.║
║      ░ ■ Updated `player.gd` to use the standardized `setup` and `teardown`  ║
║      ░   methods for all its components.                                     ║
║      ░ ■ Refactored `HealthComponent` to extend the new `ComponentInterface` ║
║      ░   and use a more robust `is_in_group` check for its setup logic.      ║
║      ░ ■ Reorganized `AssetPaths.gd` by feature/system for improved clarity. ║
║      ░ ■ Added a validation system to `AssetPaths.gd` that checks for missing║
║      ░   files at startup, preventing runtime "file not found" errors.       ║
║      ░ ■ Added validation to `Settings.gd` property setters to clamp audio   ║
║      ░   volume values, making the system more robust against invalid data.  ║
║      ░ ■ Cleaned up all remaining GDScript static analysis warnings          ║
║      ░   (`UNUSED_PARAMETER`, `SHADOWED_VARIABLE`) for a clean build.        ║
║      ░ ■ Removed dead/broken event definitions from `EventCatalog` and       ║
║      ░   removed the corresponding broken logic from `EncounterDirector`.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Added placeholder `README.md` and `DEPRECATION.md` files to `core`, ║
║      ░   `entities`, and `docs` to establish a documentation framework.      ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Improved header comments in `Constants.gd` and `PhysicsLayers.gd`   ║
║      ░   to clarify their intended purpose and prevent architectural drift.  ║
║      ░ ■ Completed Sprint 0 architectural audit.                             ║
║      ░ ■ Added `docs/sprint_0_audit` directory to house analysis files.      ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Added `ADR-001` to formally document the existing Service Locator pattern.║
║      ░ ■ Added `FSM-001` to diagram the Player and Boss state machines.      ║
║      ░ ■ Created placeholder documents for testing (`TEST-*`) and refactoring║
║      ░   principles (`ARCH-*`) to guide future sprints.                      ║
║      ░ ■ Added `ADR-002_Communication_Patterns.md` to formally document the  ║
║      ░   project's standard for using Godot Signals (local communication)   ║
║      ░   vs. the EventBus (global communication).                            ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex series of bugs causing the pogo mechanic to be   ║
║      ░   unreliable. The attack now consistently damages the boss, bounces off║
║      ░   projectiles, and can be executed repeatedly on the ground without   ║
║      ░   "misfiring".                                                        ║
║      ░ ■ Unified the ground and air pogo logic into a single, physics-driven ║
║      ░   system that correctly handles all valid bounce surfaces (enemies,   ║
║      ░   projectiles, and world geometry).                                   ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   the player to seamlessly transition between bouncing and landing.   ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to detect and destroy projectiles.            ║
║      ░ ■ Resolved a memory leak by ensuring the `GameManager` frees its      ║
║      ░   `GameStateData` resource in `_exit_tree`.                           ║
║      ░ ■ Fixed a critical parse error by removing a conflicting `class_name` ║
║      ░   from the `SceneManager` autoload script.                            ║
║      ░ ■ Added missing `max_health` property to `BossStateData` to resolve a ║
║      ░   crash when the boss took damage.                                    ║
║      ░ ■ Resolved a crash caused by using the non-existent `has()` method in ║
║      ░   `HealthComponent`; replaced with a more robust `is_in_group()` check.║
║      ░ ■ Corrected invalid GDScript 4 dictionary access syntax in `player.gd`.║
║      ░ ■ Removed the invalid `override` keyword from `HealthComponent`, which ║
║      ░   was causing a critical parse error.                                 ║
║      ░ ■ Corrected the argument order in `HealthComponent.setup` calls to    ║
║      ░   match the newly defined `ComponentInterface` contract.              ║
║      ░ ■ Resolved a parse-time dependency error by ensuring `GameStateData`  ║
║      ░   is loaded at runtime in `GameManager`, preventing a startup crash.  ║
║      ░ ■ Resolved a cascade of parse errors by correcting the implementation ║
║      ░   of the new `CombatConfig` resource and refactoring dependent scripts.║
║      ░ ■ Corrected multiple typos and syntax errors in player state scripts  ║
║      ░   (`state_attack.gd`, `state_hurt.gd`, `state_wall_slide.gd`) that    ║
║      ░   were causing crashes during gameplay.                               ║
║      ░ ■ Updated all autoload paths in `project.godot` to reflect the new    ║
║      ░   `core` directory structure, resolving all 'File not found' errors.  ║
║      ░ ■ Fixed a critical race condition where player contact damage could   ║
║      ░   interrupt a pogo attack, preventing the pogo from dealing damage.   ║
║      ░ ■ Resolved a critical bug where the Player and Boss would receive the ║
║      ░   wrong invincibility durations. Moved `add_to_group()` to the top of ║
║      ░   `_ready()` to ensure entities are correctly identified before their ║
║      ░   components are configured.                                          ║
║      ░ ■ Restored player knockback and invincibility, which were failing due ║
║      ░   to the incorrect invincibility timer.                               ║
║      ░ ■ The `Hurt` state now correctly uses its own short `knockback_timer` ║
║      ░   for stun duration, decoupled from the longer invincibility timer.   ║
║      ░ ■ Implemented robust `teardown` methods in the state machine and all  ║
║      ░   components to prevent potential memory leaks from cyclic references.║
║      ░ ■ Corrected all calls to `EventBus.emit` to match the new, simpler    ║
║      ░   2-argument signature, resolving a crash.                            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██             [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.2.0] - THE ARCHITECTURAL REFACTOR - 2025-08-07             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       [0.1.0] - 2025-08-05                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝



=====================================
FILE: ./docs/DOCS_PROTOCOL.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗  ██████╗  ██████╗ ███████╗                                         ║
║   ██╔══██╗██╔═══██╗██╔════╝ ██╔════╝                                         ║
║   ██║  ██║██║   ██║██║      ███████╗                                         ║
║   ██║  ██║██║   ██║██║   ██╗╚════██║                                         ║
║   ██████╔╝╚██████╔╝╚██████╔╝███████║                                         ║
║   ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝                                         ║
║                                                                              ║
║    ██████╗ ██████╗  ██████╗ ████████╗ ██████╗  ██████╗  ██████╗ ██╗          ║
║    ██╔══██╗██╔══██╗██╔═══██╗╚══██╔══╝██╔═══██╗██╔════╝ ██╔═══██╗██║          ║
║    ██████╔╝██████╔╝██║   ██║   ██║   ██║   ██║██║      ██║   ██║██║          ║
║    ██╔═══╝ ██╔══██╗██║   ██║   ██║   ██║   ██║██║   ██╗██║   ██║██║          ║
║    ██║     ██║  ██║╚██████╔╝   ██║   ╚██████╔╝╚██████╔╝╚██████╔╝███████╗     ║
║    ╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝     ║
║                                                                              ║
║           Project Documentation & Communication Formatting Standard          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       DOCUMENTATION STANDARDS                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This document defines the visual and structural standards for all `.txt`   ║
║   project files. Its purpose is to maintain a cohesive, readable, and        ║
║   thematically appropriate aesthetic that reflects the game's design.        ║
║                                                                              ║
║   █  FILE STRUCTURE                                                          ║
║      All `.md` files essential for GitHub integration (README.md,            ║
║      LICENSE.md) will remain as Markdown. All other project documents        ║
║      (TODO, ROADMAP, DESIGN, etc.) will be `.txt` files following this guide.║
║                                                                              ║
║   █  DOCUMENT FRAME                                                          ║
║      Each document will be enclosed in a double-line box frame.              ║
║      (Characters: ╔ ╗ ╚ ╝ ║ ═ ╠ ╣)                                           ║
║                                                                              ║
║   █  TITLE BLOCK                                                             ║
║      Each document begins with its custom ASCII art title block, followed    ║
║      by a one-line subtitle describing its purpose.                          ║
║                                                                              ║
║   █  SECTION HEADERS                                                         ║
║      Major sections are demarcated with a dithered block header. The text    ║
║      should be centered and padded within the solid blocks.                  ║
║                                                                              ║
║        ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ║
║        ██                        SECTION TITLE                         ██    ║
║        ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ║
║                                                                              ║
║   █  BODY TEXT & PARAGRAPHS                                                  ║
║      Standard body text should be indented by 2 spaces from the main frame.  ║
║      Paragraphs should have a single blank line between them for spacing.    ║
║      Text should be manually wrapped to fit within the document frame.       ║
║                                                                              ║
║   █  BULLET POINTS & HIERARCHY (PRIORITY GRADIENT)                           ║
║      Lists will use dithered blocks to indicate importance or sequence.      ║
║      All bullet points should be indented by 3 spaces. Sub-points should     ║
║      be indented an additional 2 spaces using the `░` character.             ║
║                                                                              ║
║        █  Primary Point / Critical Item / Most Important                     ║
║        ▓  Secondary Point / High Priority                                    ║
║        ▒  Tertiary Point / Medium Priority                                   ║
║        ░  Note, Sub-point, or Low Priority Item                              ║
║                                                                              ║
║        ■  Checklist item (complete).                                         ║
║        □  Checklist item (incomplete).                                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 ARCHIVE OF ADVANCED & ESOTERIC STYLES                ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The following are alternative formatting ideas. They are archived here for ║
║   future inspiration but are not part of the current standard to maintain    ║
║   simplicity and consistency.                                                ║
║                                                                              ║
║   ▒  Progress Bars & Status Indicators                                       ║
║      Use the priority gradient to create visual progress meters.             ║
║                                                                              ║
║      ░  LOADING       █████████████▓▓▓▓▒▒▒░░░ 73%                            ║
║      ░  BOSS HEALTH   ████████▓▓▓▓▒▒▒▒░░░░░░░░ 58%                           ║
║                                                                              ║
║   ▒  Circuit Board Style                                                     ║
║      A highly technical aesthetic for documents like ARCHITECTURE.txt.       ║
║                                                                              ║
║      ┌─┬─┬─┬─┬─┬─┬─┬─┬── SECTION ──┬─┬─┬─┬─┬─┬─┬─┬─┐                         ║
║      │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │                         ║
║      └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘                         ║
║                                                                              ║
║   ▒  PETSCII-style Graphics                                                  ║
║      A retro computer aesthetic using block and pattern characters.          ║
║                                                                              ║
║      ▗▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▖     ║
║      ▐ ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚  SECTION TITLE HERE  ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚ ▌     ║
║      ▝▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▘     ║
║                                                                              ║
║   ▒  Geometric Separators                                                    ║
║      Use repeating patterns to divide sections instead of headers.           ║
║                                                                              ║
║      ◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇                    ║
║      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼            ║
║                                                                              ║
║   ▒  Square Density Patterns                                                 ║
║      An alternative to the priority gradient for status tracking.            ║
║                                                                              ║
║      ■■■■■■■■■■ COMPLETE                                                     ║
║      ■■■■■■■□□□ IN PROGRESS                                                  ║
║      ■□□□□□□□□□ PLANNED                                                      ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/sprint_0_audit/TEST-002_Smoke_Tests.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/TEST-001_Baseline_Metrics.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/FSM-001_Entity_State_Flows.md
=====================================
# State Machine Flow Diagrams

**Date:** 2025-08-10

**Status:** Documented

---

This document provides a visual representation of the Finite State Machines (FSMs) for the core entities in the game. These diagrams are generated using Mermaid syntax and represent the logical flow of states based on player input and game physics.

## Player State Machine

The Player FSM is complex and responsive, designed to facilitate a fluid and expressive moveset. The core loop revolves around the `Move`, `Fall`, and `Jump` states, with multiple entry points into action states like `Dash` and `Attack`.

```mermaid
graph TD
    subgraph Core Movement
        MOVE <-->|Gravity/On Floor| FALL;
        MOVE -->|Jump Input| JUMP;
        FALL -->|Coyote Time Jump| JUMP;
        JUMP -->|Apex Reached| FALL;
    end

    subgraph Wall Interaction
        FALL -->|Holding Direction into Wall| WALL_SLIDE;
        JUMP -->|Holding Direction into Wall| WALL_SLIDE;
        WALL_SLIDE -->|Jump Input| JUMP;
        WALL_SLIDE -->|Not Holding Direction| FALL;
    end

    subgraph Action States
        MOVE --> DASH;
        FALL --> DASH;
        JUMP --> DASH;
        WALL_SLIDE --> DASH;
        DASH -->|Duration Ends| FALL;

        MOVE --> ATTACK;
        FALL --> ATTACK;
        JUMP --> ATTACK;
        WALL_SLIDE --> ATTACK;
        ATTACK -->|Duration Ends| FALL;
    end

    subgraph Special States
        ANY_STATE[Any State] -->|Takes Damage| HURT;
        HURT -->|Knockback Ends| FALL;
        MOVE -->|Hold Heal Buttons| HEAL;
        HEAL -->|Buttons Released| MOVE;
    end

    style MOVE fill:#cde4f0,stroke:#333,stroke-width:2px
    style FALL fill:#cde4f0,stroke:#333,stroke-width:2px
    style JUMP fill:#cde4f0,stroke:#333,stroke-width:2px
    style WALL_SLIDE fill:#e8d1e8,stroke:#333,stroke-width:2px
    style DASH fill:#f0e4cd,stroke:#333,stroke-width:2px
    style ATTACK fill:#f0e4cd,stroke:#333,stroke-width:2px
    style HURT fill:#f8cbcb,stroke:#333,stroke-width:2px
    style HEAL fill:#d1e8d1,stroke:#333,stroke-width:2px


## Boss State Machine

The Base Boss FSM is a simple, predictable loop designed as a template for more complex behaviors. It cycles cleanly through its states based on timers.


graph TD
    COOLDOWN -->|Cooldown Timer Finishes| PATROL;
    PATROL -->|Patrol Timer Finishes| IDLE;
    IDLE -->|Immediately| ATTACK;
    ATTACK -->|Immediately| COOLDOWN;

    style COOLDOWN fill:#cde4f0,stroke:#333,stroke-width:2px
    style PATROL fill:#e8d1e8,stroke:#333,stroke-width:2px
    style IDLE fill:#f0e4cd,stroke:#333,stroke-width:2px
    style ATTACK fill:#f8cbcb,stroke:#333,stroke-width:2px


=====================================
FILE: ./docs/sprint_0_audit/event_usage.txt
=====================================
--- EventCatalog.gd ---
# src/core/event_catalog.gd
# This script serves as the canonical, central list of all event names in the project.
# By using these constants instead of raw strings, we gain IDE autocompletion and
# prevent typos that would lead to silent runtime failures.
extends Object
class_name EventCatalog

# --- Player Events ---
const PLAYER_HEALTH_CHANGED = "player.health_changed"
const PLAYER_HEALING_CHARGES_CHANGED = "player.healing_charges_changed"
const PLAYER_TOOK_DAMAGE = "player.took_damage"
const PLAYER_DIED = "player.died"

# --- Boss / Entity Events ---
const BOSS_HEALTH_CHANGED = "boss.health_changed"
const BOSS_DIED = "boss.died"

# --- Game State Events ---
const GAME_PAUSED = "game.paused"
const GAME_RESUMED = "game.resumed"

# --- UI State Events ---
const MENU_OPENED = "ui.menu_opened"
const MENU_CLOSED = "ui.menu_closed"

--- EventBus.on() Subscriptions ---
src/ui/game_hud/game_hud.gd:17:	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
src/ui/game_hud/game_hud.gd:18:	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
src/ui/game_hud/game_hud.gd:19:	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
src/ui/global_hud/global_hud.gd:35:	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
src/ui/global_hud/global_hud.gd:36:	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
src/scenes/game/game.gd:17:	_pause_token = EventBus.on(EventCatalog.GAME_PAUSED, _on_game_paused)
src/scenes/game/game.gd:18:	_resume_token = EventBus.on(EventCatalog.GAME_RESUMED, _on_game_resumed)


--- EventBus.emit() Emissions ---
src/ui/screens/controls_menu/controls_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/controls_menu/controls_menu.gd:70:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/credits_menu/credits_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/credits_menu/credits_menu.gd:60:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/options_menu/options_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/options_menu/options_menu.gd:61:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/sound_menu/sound_menu.gd:19:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/sound_menu/sound_menu.gd:47:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/title_screen/title_screen.gd:10:	EventBus.emit(EventCatalog.MENU_OPENED) # Announce that a menu is open
src/ui/screens/title_screen/title_screen.gd:42:	EventBus.emit(EventCatalog.MENU_CLOSED) # Announce that the menu is closing
src/core/sequencing/steps/emit_step.gd:16:	EventBus.emit(event_name, payload)
src/entities/boss/base_boss.gd:121:	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev, self)
src/entities/player/player.gd:127:	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev, self)
src/entities/player/player.gd:191:	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev, self)


=====================================
FILE: ./docs/sprint_0_audit/EVENT-001_Event_Flow_Map.md
=====================================
# Event Flow Map

**Date:** 2025-08-10
**Status:** Generated

---

This document maps all events defined in `EventCatalog.gd`. For each event, it lists all scripts that emit the event and all scripts that subscribe (listen) to it.

## Event: `PLAYER_HEALTH_CHANGED`

**Path:** `player.health_changed`

### Emitters (who sends this event?)
```
src/entities/player/player.gd:	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
```

---

## Event: `PLAYER_HEALING_CHARGES_CHANGED`

**Path:** `player.healing_charges_changed`

### Emitters (who sends this event?)
```
src/entities/player/player.gd:	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
```

---

## Event: `PLAYER_TOOK_DAMAGE`

**Path:** `player.took_damage`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `PLAYER_DIED`

**Path:** `player.died`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `BOSS_HEALTH_CHANGED`

**Path:** `boss.health_changed`

### Emitters (who sends this event?)
```
src/entities/boss/base_boss.gd:	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
```

---

## Event: `BOSS_DIED`

**Path:** `boss.died`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `GAME_PAUSED`

**Path:** `game.paused`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
src/scenes/game/game.gd:	_pause_token = EventBus.on(EventCatalog.GAME_PAUSED, _on_game_paused)
```

---

## Event: `GAME_RESUMED`

**Path:** `game.resumed`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
src/scenes/game/game.gd:	_resume_token = EventBus.on(EventCatalog.GAME_RESUMED, _on_game_resumed)
```

---

## Event: `MENU_OPENED`

**Path:** `ui.menu_opened`

### Emitters (who sends this event?)
```
src/ui/screens/controls_menu/controls_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/credits_menu/credits_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/options_menu/options_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/sound_menu/sound_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/title_screen/title_screen.gd:	EventBus.emit(EventCatalog.MENU_OPENED) # Announce that a menu is open
```

### Listeners (who listens for this event?)
```
src/ui/global_hud/global_hud.gd:	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
```

---

## Event: `MENU_CLOSED`

**Path:** `ui.menu_closed`

### Emitters (who sends this event?)
```
src/ui/screens/controls_menu/controls_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/credits_menu/credits_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/options_menu/options_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/sound_menu/sound_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/title_screen/title_screen.gd:	EventBus.emit(EventCatalog.MENU_CLOSED) # Announce that the menu is closing
```

### Listeners (who listens for this event?)
```
src/ui/global_hud/global_hud.gd:	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
```

---



=====================================
FILE: ./docs/sprint_0_audit/ARCH-002_Acceptance_Criteria.md
=====================================
# ARCH-002: Refactoring Acceptance Criteria

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

This document serves as a high-level checklist for our entire refactoring initiative. A sprint's work is considered "done" when it meets its specific criteria, and the entire initiative is "done" when all items on this list are checked.

## Global Acceptance Criteria

The refactoring is complete when all of the following are true:

### Architectural Health
- [ ] **Single Source of State:** All mutable runtime state (player data, game state) is managed via `Resource`-based data containers, eliminating the "dual architecture" of stateful singletons.
- [ ] **Standardized Configuration:** All tunable gameplay values are sourced from `.tres` `Resource` files, not `Constants.gd` or hardcoded magic numbers. A validation system checks for missing configs at startup.
- [ ] **Explicit Dependencies:** Core components (`HealthComponent`, `CombatComponent`, etc.) receive their dependencies via a `setup(config, services)` method, not by calling global singletons directly.
- [ ] **Clear Communication Rules:** The `EventBus` is used for global, cross-system messages. Godot signals are used for local, intra-scene communication. Direct calls between components are minimized or eliminated.

### Testing & Verification
- [ ] **Baseline Metrics Met:** The refactored game performs equal to or better than the baseline metrics established in `TEST-001_Baseline_Metrics.md`.
- [ ] **Regression Tests Pass:** The game successfully passes all manual checks in the `TEST-003_Regression_Checklist.md`.
- [ ] **Smoke Tests Pass:** The game is verifiably stable and key systems are functional as defined in `TEST-002_Smoke_Tests.md`.

### Code Quality & Documentation
- [ ] **No Dead Code:** All old, replaced systems and scripts have been safely removed from the project.
- [ ] **Documentation Updated:** All relevant architectural documents (`README.md`, ADRs) have been updated to reflect the new patterns.
- [ ] **Linter/Formatter Clean:** The entire codebase is formatted consistently and passes static analysis checks without warnings.


=====================================
FILE: ./docs/sprint_0_audit/ARCH-001_Refactoring_Principles.md
=====================================
# ARCH-001: Refactoring Principles

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

To ensure our refactoring effort is focused, consistent, and successful, we must operate from a shared set of guiding principles. These principles will act as a tie-breaker when design decisions are unclear and will define the target state of our architecture.

## Guiding Principles

1.  **Work *With* the Engine, Not Against It.**
    *   **Rationale:** Our attempt to force a classic DI pattern failed because it fought Godot's startup lifecycle. All future architectural decisions must respect and leverage Godot's idiomatic patterns (nodes, scenes, signals, resources).
    *   **In Practice:** We will prefer solutions that feel natural in Godot over patterns that require complex workarounds to function.

2.  **Every Change Must Be Verifiable.**
    *   **Rationale:** Refactoring without testing is just moving code around. To prevent regressions, every significant change must be accompanied by a clear method of verification.
    *   **In Practice:** This means creating smoke tests, regression checklists, and eventually, automated unit tests. We will use the documents `TEST-002` and `TEST-003` to track this.

3.  **Prioritize Decoupling and Explicit Dependencies.**
    *   **Rationale:** The primary weakness of the current Service Locator pattern is that dependencies are hidden. Our goal is to make dependencies explicit.
    *   **In Practice:** Components and systems should receive their dependencies through a `setup()` method where possible, rather than calling global singletons in their internal logic. Communication should favor events (`EventBus`) for global messages and signals for local, parent-child messages.

4.  **Standardize Patterns; Eliminate "Dual Architectures".**
    *   **Rationale:** The audit identified several areas (state management, configuration) where two different patterns exist to solve the same problem. This increases cognitive load and maintenance cost.
    *   **In Practice:** We will choose a single, standard way to manage state (the `Resource`-based data pattern) and a single way to manage configuration (`tres` config resources), and migrate all existing code to these standards.

5.  **The Strangler Fig Pattern: Migrate Incrementally.**
    *   **Rationale:** Big-bang rewrites are risky and prone to failure. We will adopt the Strangler Fig pattern.
    *   **In Practice:** We will create the new, improved system alongside the old one. We will then migrate dependencies one by one to the new system. Once all dependencies are migrated, we can safely delete the old system. This ensures the game remains functional throughout the entire process.


=====================================
FILE: ./docs/sprint_0_audit/config_usage.txt
=====================================
src/ui/game_hud/game_hud.gd:22:	var max_health = Config.get_value("player.health.max_health", 5)
src/ui/game_hud/game_hud.gd:25:	boss_health_bar.max_value = Config.get_value("boss.stats.health", 30)
src/core/data/config/config.gd:14:# Example: Config.get_value("player.physics.speed")
src/entities/boss/base_boss.gd:31:	b_data.patrol_speed = Config.get_value("boss.stats.patrol_speed", 100.0)
src/entities/boss/base_boss.gd:57:		velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/components/combat_component.gd:23:	p_data.attack_cooldown_timer = Config.get_value("player.combat.attack_cooldown")
src/entities/components/combat_component.gd:37:	owner_node.velocity.y = -Config.get_value("player.physics.pogo_force")
src/entities/components/combat_component.gd:40:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/components/health_component.gd:47:	max_health = Config.get_value(config_paths.max_health, 10)
src/entities/components/health_component.gd:48:	invincibility_duration = Config.get_value(config_paths.get("invincibility", "player.health.invincibility_duration"), 1.0)
src/entities/components/health_component.gd:84:	var knockback_speed = Config.get_value(_knockback_config.speed, 400.0)
src/entities/components/health_component.gd:86:		knockback_speed = Config.get_value(_knockback_config.hazard_speed, knockback_speed)
src/entities/components/input_component.gd:24:		p_data.jump_buffer_timer = Config.get_value("player.physics.jump_buffer")
src/entities/components/input_component.gd:35:			if p_data.charge_timer >= Config.get_value("player.combat.charge_time"):
src/entities/player/player.gd:87:		p_data.wall_coyote_timer = Config.get_value("player.physics.wall_coyote_time")
src/entities/player/player.gd:120:	velocity.x = Input.get_axis("ui_left", "ui_right") * Config.get_value("player.physics.speed")
src/entities/player/player.gd:144:	if p_data.healing_charges >= Config.get_value("player.health.max_healing_charges"): return
src/entities/player/player.gd:146:	if p_data.determination_counter >= Config.get_value("player.combat.determination_per_charge"):
src/entities/player/states/state_jump.gd:6:	player.velocity.y = -Config.get_value("player.physics.jump_force")
src/entities/player/states/state_jump.gd:15:		player.velocity.y *= Config.get_value("player.physics.jump_release_dampener")
src/entities/player/states/state_jump.gd:26:	player.velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/player/states/state_dash.gd:9:	p_data.dash_duration_timer = Config.get_value("player.physics.dash_duration")
src/entities/player/states/state_dash.gd:10:	p_data.dash_cooldown_timer = Config.get_value("player.physics.dash_cooldown")
src/entities/player/states/state_dash.gd:11:	player.velocity = _get_dash_direction() * Config.get_value("player.physics.dash_speed")
src/entities/player/states/state_heal.gd:7:	player.healing_timer.start(Config.get_value("player.health.heal_duration"))
src/entities/player/states/state_wall_slide.gd:7:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/player/states/state_wall_slide.gd:14:	var gravity = Config.get_value("general.physics.gravity")
src/entities/player/states/state_wall_slide.gd:15:	var wall_slide_speed = Config.get_value("player.physics.wall_slide_speed")
src/entities/player/states/state_wall_slide.gd:38:	player.velocity.y = -Config.get_value("player.physics.wall_jump_force_y")
src/entities/player/states/state_wall_slide.gd:39:	player.velocity.x = p_data.last_wall_normal.x * Config.get_value("player.physics.wall_jump_force_x")
src/entities/player/states/state_attack.gd:6:	p_data.attack_duration_timer = Config.get_value("player.combat.attack_duration")
src/entities/player/states/state_attack.gd:7:	p_data.attack_cooldown_timer = Config.get_value("player.combat.attack_cooldown")
src/entities/player/states/state_attack.gd:33:		var friction = Config.get_value("player.combat.attack_friction")
src/entities/player/states/state_hurt.gd:8:	p_data.knockback_timer = Config.get_value("player.combat.knockback_duration")
src/entities/player/states/state_hurt.gd:11:	player.velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/player/states/state_fall.gd:27:		gravity_multiplier = Config.get_value("player.physics.fast_fall_gravity_multiplier")
src/entities/player/states/state_fall.gd:28:	player.velocity.y += Config.get_value("general.physics.gravity") * gravity_multiplier * delta
src/entities/player/states/state_fall.gd:40:	player.velocity.x = p_data.last_wall_normal.x * Config.get_value("player.physics.wall_jump_force_x")
src/entities/player/states/state_move.gd:6:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/player/states/state_move.gd:10:	p_data.coyote_timer = Config.get_value("player.physics.coyote_time")
src/entities/player/states/state_move.gd:12:	player.velocity.y += Config.get_value("general.physics.gravity") * delta


=====================================
FILE: ./docs/sprint_0_audit/singleton_map.txt
=====================================

Settings="*res://src/core/data/config/settings.gd"
AudioManager="*res://src/core/systems/audio_manager.gd"
CursorManager="*res://src/core/systems/cursor_manager.gd"
Constants="*res://src/core/util/constants.gd"
AssetPaths="*res://src/core/util/asset_paths.gd"
GlobalHud="*res://src/ui/global_hud/global_hud.tscn"
GameManager="*res://src/core/systems/game_manager.gd"
ArenaBuilder="*res://src/core/building/arena_builder.gd"
EventBus="*res://src/core/events/event_bus.gd"
Sequencer="*res://src/core/sequencing/sequencer.gd"
Config="*res://src/core/data/config/config.gd"
Palette="*res://src/core/util/palette.gd"
ObjectPool="*res://src/core/systems/object_pool.gd"
PhysicsLayers="*res://src/core/util/physics_layers.gd"



=====================================
FILE: ./docs/sprint_0_audit/state_machine_flow.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/TEST-003_Regression_Checklist.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/ADR-002_Communication_Patterns.md
=====================================
# ADR-002: Communication Patterns (Signal vs. EventBus)

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

The project utilizes two primary methods for communication between different parts of the codebase: Godot's built-in **Signal** system and our custom global **EventBus**. Without a clear standard, it can be ambiguous which tool to use, potentially leading to tightly-coupled systems that are difficult to maintain or debug.

This document defines the official standard for choosing a communication pattern.

## Decision

We will adhere to a clear "Local vs. Global" distinction for communication:

1. **Use Godot Signals for *Local* Communication.**
2. **Use the EventBus for *Global* Communication.**

---

### 1. Godot Signals: Local Communication

Signals are the preferred method for communication **within a single, self-contained scene** or between a parent node and its direct children. This represents a tightly-coupled, "owner-to-part" relationship.

**Use a Signal when:**
- A child node needs to tell its parent that something happened (e.g., a `Button` telling a `Menu` it was pressed).
- A parent node needs to broadcast a message to all of its direct children.
- A component needs to communicate its result back to its owner (e.g., `CombatComponent` emitting `pogo_bounce_requested` for `Player` to handle).

**Litmus Test:** If the sender and receiver are part of the same scene file (`.tscn`) and have a direct parent-child relationship, use a signal.

**Example (`player.gd`):**
```gdscript
# The HealthComponent (child) emits a signal.
signal died

# The Player (parent) listens to its own component.
health_component.died.connect(_on_health_component_died)
```

### 2. EventBus: Global Communication

The EventBus is the preferred method for communication **between disparate, decoupled systems**. The sender and receiver should have no direct knowledge of each other. This represents a loosely-coupled, "system-to-system" relationship.

**Use the EventBus when:**
- A gameplay event needs to be reflected in the UI (e.g., the Player's health changes, and the GameHUD must be updated).
- A UI action needs to trigger a global system change (e.g., a TitleScreen button opens a menu, and the GlobalHUD must show the mute icon).
- An entity in the game world needs to trigger an audio cue (e.g., the Boss dies, and the AudioManager needs to play a victory sound).

**Litmus Test:** If the sender and receiver are in completely different parts of the scene tree and do not know about each other's existence, use the EventBus.

**Example (player.gd emitting, game_hud.gd listening):**

```gdscript
# player.gd (Sender)
var ev = PlayerHealthChangedEvent.new()
EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev)

# game_hud.gd (Receiver)
EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
```

## Consequences

**Positive:** This standard provides a clear, unambiguous rule that is easy to follow, promoting clean architecture and preventing "spaghetti" code where everything is globally connected via the EventBus. It keeps scenes self-contained and makes systems highly modular.

**Negative:** None. This is a best-practice clarification that reduces cognitive overhead.

=====================================
FILE: ./docs/sprint_0_audit/ADR.mdADR-001_Service_Locator_Pattern.md
=====================================
# ADR-001: Global System Access via Autoload Singletons (Service Locator)

**Date:** 2025-08-10

**Status:** Accepted (Existing Pattern)

---

## Context

The project requires numerous cross-cutting services that need to be accessible from various parts of the codebase. These include core systems (EventBus, AudioManager, ObjectPool), data providers (Config, Settings, Palette), and utility services (AssetPaths, PhysicsLayers).

A simple and idiomatic way to achieve this in Godot is by using the **Autoload** feature, which creates a globally accessible singleton instance of a script or scene. This effectively implements the **Service Locator** design pattern, where any node in the game can directly access a service by its global name (e.g., `EventBus.emit()`, `Config.get_value()`).

## Decision

We will use the Godot Autoload (Service Locator) pattern as the primary mechanism for providing global services throughout the application.

This decision was made because it is the most direct, performant, and engine-idiomatic way to solve the problem of global access in Godot 4. It avoids the need for complex dependency injection frameworks or manual "prop-drilling" of dependencies through the node tree.

The audit file `singleton_map.txt` confirms there are currently 14 such services registered in `project.godot`.

## Consequences

### Positive:
-   **Simplicity & Speed:** Accessing a service is trivial (`ServiceName.method()`). There is no setup boilerplate required in consumer scripts.
-   **Performance:** Autoloads are instantiated once at startup, providing fast and reliable access.
-   **Decoupling:** Systems can communicate through a central service like `EventBus` without needing direct references to each other, as shown in `event_usage.txt`.

### Negative (Risks & Architectural Debt):
-   **Hidden Dependencies:** The dependencies of a script are not explicitly declared in its API. To know that `player.gd` depends on `Config`, one must read the entire script body. This makes the code harder to reason about.
-   **Difficult to Test:** This is the most significant drawback. It is very difficult to unit-test a script that calls a global singleton. You cannot easily replace `EventBus` with a "mock" or "fake" version for a test, which was the root cause of the failed DI refactor attempt.
-   **Risk of Tight Coupling:** Because services are so easy to access, it can encourage developers to create a "spaghetti" architecture where everything calls everything else, bypassing more structured communication patterns.
-   **Configuration Fragility:** The heavy reliance on string-based keys for services like `Config` and `EventBus` is fragile. A typo will result in a runtime error, not a compile-time one. The `config_usage.txt` file shows dozens of such calls, each being a potential point of failure.

---

## Next Steps (Refactoring Plan)

This pattern, while accepted, is the primary target for refinement in our upcoming refactoring sprints. The plan is not to eliminate autoloads, but to mitigate their negative consequences by:
1.  **Standardizing Configuration (Sprint 1):** Introduce validation to catch bad config paths at startup.
2.  **Unifying Data Architecture (Sprint 2):** Reduce the number of singletons that hold mutable state.
3.  **Refining Communication (Sprint 3):** Clarify when to use `EventBus` versus other patterns to reduce the risk of "spaghetti" code.


=====================================
FILE: ./docs/sprint_0_audit/ADR.md
=====================================


=====================================
FILE: ./docs/ARCHITECTURE.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═════════════════╗
║  █████╗ ██████╗  ██████╗██╗  ██╗██╗████████╗███████╗ ██████╗████████╗██╗   ██╗██████╗ ███████╗ ║
║ ██╔══██╗██╔══██╗██╔════╝██║  ██║██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗██╔════╝ ║
║ ███████║██████╔╝██║     ███████║██║   ██║   █████╗  ██║        ██║   ██║   ██║██████╔╝█████╗   ║
║ ██╔══██║██╔══██╗██║     ██╔══██║██║   ██║   ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗██╔══╝   ║
║ ██║  ██║██║  ██║╚██████╗██║  ██║██║   ██║   ███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║███████╗ ║
║ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝ ║
║                                                                              ╔═════════════════╝
║          The project's technical structure, standards, and patterns.         ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       GUIDING DESIGN PRINCIPLES                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This project's development is guided by the SOLID principles to ensure the ║
║   codebase remains clean, maintainable, and scalable.                        ║
║                                                                              ║
║   █  Single Responsibility Principle (SRP): Every script should have one,    ║
║      and only one, reason to change. This is why we separate level building  ║
║      from entity spawning, and UI appearance from UI logic.                  ║
║                                                                              ║
║   █  Open/Closed Principle: Code should be open for extension, but closed for║
║      modification. We achieve this with patterns like the State Pattern,     ║
║      where adding a new player ability means adding a new file, not changing ║
║      existing, stable code.                                                  ║
║                                                                              ║
║   █  Liskov Substitution Principle: Subclasses must be substitutable for their║
║      base classes. A `FireBoss` must be able to do everything a `BaseBoss` can.║
║                                                                              ║
║   █  Interface Segregation Principle: We avoid creating "fat" classes that   ║
║      are forced to have functions they don't need.                           ║
║                                                                              ║
║   █  Dependency Inversion Principle: High-level code (like `game.gd`) should ║
║      not depend on the specific implementation of low-level code (like the   ║
║      `ArenaBuilder`). It should depend on an abstraction (the `build_level()`║
║      function contract). Signals are a key tool for this.                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       KEY ARCHITECTURAL PATTERNS                     ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  The State Pattern: This is the primary pattern for managing complex     ║
║      entities. The logic for each state (e.g., `Move`, `Attack`, `Dash`) is  ║
║      encapsulated in its own class file. The entity (`Player`, `BaseBoss`)   ║
║      then acts as a "Context", holding a reference to the current state and  ║
║      delegating all processing to it. This keeps the entity's main script    ║
║      clean and makes adding or changing abilities highly modular.            ║
║                                                                              ║
║   █  Singleton-Driven Core: Global systems are managed by Autoload singletons.║
║      ░  `Palette.gd`: Manages all game colors for a cohesive aesthetic.      ║
║      ░  `AssetPaths.gd`: A central, pre-loading registry for all assets.     ║
║      ░  Other singletons (`AudioManager`, `Constants`, etc.) serve dedicated roles.║
║                                                                              ║
║   █  Asynchronous Loading with Pre-warming: To ensure smooth transitions, a  ║
║      `LoadingScreen` orchestrates all setup. It pre-warms shaders by         ║
║      flashing entities in an off-screen viewport and calls the               ║
║      `ArenaBuilder` to construct the level in non-blocking batches.          ║
║                                                                              ║
║   █  Component-Based and Procedural UI: The UI is built from self-contained, ║
║      reusable scenes (`StyledMenuItem`). These components will draw          ║
║      themselves procedurally using shaders, allowing for a highly polished   ║
║      and animatable interface without relying on static images.              ║
║                                                                              ║
║   █  Component-to-Owner Communication (via Signals): Components encapsulate  ║
║      logic but should not directly control their owner. To maintain this     ║
║      decoupling, components use Godot's built-in signals to announce that    ║
║      something has happened. The owner node (e.g., `player.gd`) listens for  ║
║      these signals and decides how to react. For example, the               ║
║      `CombatComponent` emits `pogo_bounce_requested`, and the `Player` script║
║      implements the actual physics bounce. This keeps components reusable    ║
║      and the owner in full control of its own state.                         ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         COLLABORATION WORKFLOW                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   1. Define Goal: The Human defines a small, achievable goal based on the TODO.║
║   2. AI Solution: The AI provides complete, regenerated files and explains changes.║
║   3. Implement & Test: The Human implements and thoroughly tests the changes.║
║   4. Document & Commit: The Human updates documentation, then the AI provides a commit message.║
║   5. Confirm & Proceed: The Human confirms success and defines the next goal.║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/ASSETS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║    █████╗ ███████╗███████╗███████╗████████╗███████╗                          ║
║   ██╔══██╗██╔════╝██╔════╝██╔════╝╚══██╔══╝██╔════╝                          ║
║   ███████║███████╗███████╗███████╗   ██║   ███████╗                          ║
║   ██╔══██║╚════██║╚════██║██╔════╝   ██║   ╚════██║                          ║
║   ██║  ██║███████║███████║███████╗   ██║   ███████║                          ║
║   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝   ╚═╝   ╚══════╝                          ║
║                                                                              ║
║        A registry for asset sources, licenses, and style guidelines.         ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                            STYLE GUIDE                               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Visual Style                                                            ║
║      ░  Overall: Clean, minimalist, and geometric.                           ║
║      ░  Color Palette: High-contrast grayscale for placeholders.             ║
║      ░  Shape Language: A strict adherence to square-based geometry.         ║
║      ░  Rectangles are only permitted for static environmental elements.     ║
║                                                                              ║
║   █  Audio Style                                                             ║
║      ░  Music: Chiptune-inspired, melodic, and loopable tracks.              ║
║      ░  Sound Effects: Crisp, digital, and immediately recognizable SFX.     ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                           ASSET SOURCES                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Graphics                                                                ║
║      ░  Source: All current visual assets (sprites, icons) are original      ║
║      ░  creations for this project.                                          ║
║      ░  License: N/A (Internal)                                              ║
║                                                                              ║
║   █  Audio                                                                   ║
║      ░  Source: All audio assets were generated by the project creator using ║
║      ░  paid subscriptions to ElevenLabs (SFX) and Udio (Music).             ║
║      ░  License: CC0 1.0 Universal (Public Domain).                          ║
║                                                                              ║
║   █  Fonts                                                                   ║
║      ░  Source: "M PLUS Rounded 1c" by the M+ FONTS PROJECT.                 ║
║      ░  License: SIL Open Font License (OFL).                                ║
║      ░  Source Link: `https://fonts.google.com/specimen/M+PLUS+Rounded+1c`   ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                      ATTRIBUTION REQUIREMENTS                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Per the CC0 license for audio and original creation for graphics, no       ║
║   attribution is required for any asset. It is good practice to keep the     ║
║   OFL.txt for the font with the project files.                               ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/CHANGELOG.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                            [UNRELEASED]                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Introduced a robust, interface-based damage system (`IDamageable`)  ║
║      ░   to formalize how entities receive damage, replacing fragile,        ║
║      ░   string-based lookups with a type-safe contract.                     ║
║      ░ ■ Created a new `CombatUtils` singleton to provide a robust,          ║
║      ░   tree-traversing utility for finding `HealthComponent` nodes from any║
║      ░   physics collider, eliminating brittle `get_node` lookups.           ║
║      ░ ■ Decoupled `CombatComponent` from the `Player` by replacing direct   ║
║      ░   state and velocity mutation with a `pogo_bounce_requested` signal,  ║
║      ░   adhering to the Dependency Inversion Principle.                     ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, providing a single, robust API for navigation.    ║
║      ░ ■ Implemented state validation in `PlayerStateData` and `BossStateData`║
║      ░   using property setters. This makes the data resources self-validating
║      ░   and prevents invalid states (e.g., health > max_health).            ║
║      ░ ■ Created a formal `ComponentInterface` to act as a standardized      ║
║      ░   blueprint for all entity components, enforcing a consistent API.    ║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource,         ║
║      ░   eliminating the "dual architecture" of stateful singletons. All     ║
║      ░   runtime state is now consistently managed through `Resource` objects.║
║      ░ ■ Replaced the JSON-based `Config.gd` system with a type-safe,        ║
║      ░   `Resource`-based system (`CombatConfig.tres` and `CombatDB.gd`).    ║
║      ░   This provides compile-time safety against typos and enables direct  ║
║      ░   gameplay value tuning in the Godot editor's Inspector.              ║
║      ░ ■ Refactored the Player's state machine to load its state scripts at  ║
║      ░   runtime in `_ready()` instead of using `preload()`. This breaks a   ║
║      ░   brittle parse-time dependency cycle, making the game's startup      ║
║      ░   sequence significantly more robust.                                 ║
║      ░ ■ Further refined the `src/core` directory structure, creating new    ║
║      ░   subdirectories for typed configs and events (`data/config`, `events/typed_events`).║
║      ░ ■ Standardized script filenames to snake_case (e.g., `Config.gd` ->   ║
║      ░   `config.gd`) for project-wide consistency.                          ║
║      ░ ■ Reorganized the monolithic `src` directory into purpose-driven      ║
║      ░   subdirectories (`building`, `data`, `systems`, `util`, etc.) to     ║
║      ░   improve project modularity and scalability.                         ║
║      ░ ■ Simplified the global `EventBus` by removing unused features like   ║
║      ░   the priority system and `emit_async`, resulting in a leaner         ║
║      ░   implementation.                                                     ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the Player to use the new `BaseStateMachine`, simplifying║
║      ░   the main `player.gd` script and delegating all state logic.         ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities and  ║
║      ░   removing the final piece of duplicated state logic.                 ║
║      ░ ■ Decoupled all Components from their owners by passing dependencies  ║
║      ░   (data resources, other components) explicitly through a dictionary  ║
║      ░   in the `setup()` method, adhering to Dependency Inversion.          ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities.     ║
║      ░ ■ Simplified the `EventBus` API by removing the unused `_source`      ║
║      ░   parameter from the `emit` function.                                 ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Renamed `HealthComponent.take_damage` to `apply_damage` to          ║
║      ░   conform to the new interface contract.                              ║
║      ░ ■ Refactored `CombatUtils` to find any `IDamageable` node, not just   ║
║      ░   a `HealthComponent`.                                                ║
║      ░ ■ Updated all damage sources (projectiles, melee, pogo, contact)      ║
║      ░   to use the new `CombatUtils.find_damageable` method.                ║
║      ░ ■ Refactored all UI screens and core game scripts to use the new      ║
║      ░   `SceneManager`, removing scattered `get_tree().change_scene` calls. ║
║      ░ ■ Refactored `HealthComponent` to initialize the new self-validating  ║
║      ░   data resources, simplifying its internal logic.                     ║
║      ░ ■ Refactored `CombatComponent` and `InputComponent` to extend the new ║
║      ░   `ComponentInterface`, standardizing the entire component architecture.║
║      ░ ■ Updated `player.gd` to use the standardized `setup` and `teardown`  ║
║      ░   methods for all its components.                                     ║
║      ░ ■ Refactored `HealthComponent` to extend the new `ComponentInterface` ║
║      ░   and use a more robust `is_in_group` check for its setup logic.      ║
║      ░ ■ Reorganized `AssetPaths.gd` by feature/system for improved clarity. ║
║      ░ ■ Added a validation system to `AssetPaths.gd` that checks for missing║
║      ░   files at startup, preventing runtime "file not found" errors.       ║
║      ░ ■ Added validation to `Settings.gd` property setters to clamp audio   ║
║      ░   volume values, making the system more robust against invalid data.  ║
║      ░ ■ Cleaned up all remaining GDScript static analysis warnings          ║
║      ░   (`UNUSED_PARAMETER`, `SHADOWED_VARIABLE`) for a clean build.        ║
║      ░ ■ Removed dead/broken event definitions from `EventCatalog` and       ║
║      ░   removed the corresponding broken logic from `EncounterDirector`.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Added placeholder `README.md` and `DEPRECATION.md` files to `core`, ║
║      ░   `entities`, and `docs` to establish a documentation framework.      ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Improved header comments in `Constants.gd` and `PhysicsLayers.gd`   ║
║      ░   to clarify their intended purpose and prevent architectural drift.  ║
║      ░ ■ Completed Sprint 0 architectural audit.                             ║
║      ░ ■ Added `docs/sprint_0_audit` directory to house analysis files.      ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Added `ADR-001` to formally document the existing Service Locator pattern.║
║      ░ ■ Added `FSM-001` to diagram the Player and Boss state machines.      ║
║      ░ ■ Created placeholder documents for testing (`TEST-*`) and refactoring║
║      ░   principles (`ARCH-*`) to guide future sprints.                      ║
║      ░ ■ Added `ADR-002_Communication_Patterns.md` to formally document the  ║
║      ░   project's standard for using Godot Signals (local communication)   ║
║      ░   vs. the EventBus (global communication).                            ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex series of bugs causing the pogo mechanic to be   ║
║      ░   unreliable. The attack now consistently damages the boss, bounces off║
║      ░   projectiles, and can be executed repeatedly on the ground without   ║
║      ░   "misfiring".                                                        ║
║      ░ ■ Unified the ground and air pogo logic into a single, physics-driven ║
║      ░   system that correctly handles all valid bounce surfaces (enemies,   ║
║      ░   projectiles, and world geometry).                                   ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   the player to seamlessly transition between bouncing and landing.   ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to detect and destroy projectiles.            ║
║      ░ ■ Resolved a memory leak by ensuring the `GameManager` frees its      ║
║      ░   `GameStateData` resource in `_exit_tree`.                           ║
║      ░ ■ Fixed a critical parse error by removing a conflicting `class_name` ║
║      ░   from the `SceneManager` autoload script.                            ║
║      ░ ■ Added missing `max_health` property to `BossStateData` to resolve a ║
║      ░   crash when the boss took damage.                                    ║
║      ░ ■ Resolved a crash caused by using the non-existent `has()` method in ║
║      ░   `HealthComponent`; replaced with a more robust `is_in_group()` check.║
║      ░ ■ Corrected invalid GDScript 4 dictionary access syntax in `player.gd`.║
║      ░ ■ Removed the invalid `override` keyword from `HealthComponent`, which ║
║      ░   was causing a critical parse error.                                 ║
║      ░ ■ Corrected the argument order in `HealthComponent.setup` calls to    ║
║      ░   match the newly defined `ComponentInterface` contract.              ║
║      ░ ■ Resolved a parse-time dependency error by ensuring `GameStateData`  ║
║      ░   is loaded at runtime in `GameManager`, preventing a startup crash.  ║
║      ░ ■ Resolved a cascade of parse errors by correcting the implementation ║
║      ░   of the new `CombatConfig` resource and refactoring dependent scripts.║
║      ░ ■ Corrected multiple typos and syntax errors in player state scripts  ║
║      ░   (`state_attack.gd`, `state_hurt.gd`, `state_wall_slide.gd`) that    ║
║      ░   were causing crashes during gameplay.                               ║
║      ░ ■ Updated all autoload paths in `project.godot` to reflect the new    ║
║      ░   `core` directory structure, resolving all 'File not found' errors.  ║
║      ░ ■ Fixed a critical race condition where player contact damage could   ║
║      ░   interrupt a pogo attack, preventing the pogo from dealing damage.   ║
║      ░ ■ Resolved a critical bug where the Player and Boss would receive the ║
║      ░   wrong invincibility durations. Moved `add_to_group()` to the top of ║
║      ░   `_ready()` to ensure entities are correctly identified before their ║
║      ░   components are configured.                                          ║
║      ░ ■ Restored player knockback and invincibility, which were failing due ║
║      ░   to the incorrect invincibility timer.                               ║
║      ░ ■ The `Hurt` state now correctly uses its own short `knockback_timer` ║
║      ░   for stun duration, decoupled from the longer invincibility timer.   ║
║      ░ ■ Implemented robust `teardown` methods in the state machine and all  ║
║      ░   components to prevent potential memory leaks from cyclic references.║
║      ░ ■ Corrected all calls to `EventBus.emit` to match the new, simpler    ║
║      ░   2-argument signature, resolving a crash.                            ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/BRAINSTORM.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═══════╗
║    ██████╗ ██████╗  █████╗ ██╗███╗   ██╗███████╗████████╗ ██████╗ ██████╗ ███╗  ███╗ ║
║   ██╔══██╗██╔══██╗██╔══██╗██║████╗  ██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗████╗ ████║ ║
║   ██████╔╝██████╔╝███████║██║██╔██╗ ██║███████╗   ██║   ██║   ██║██████╔╝██╔████╔██║ ║
║   ██╔══██╗██╔══██╗██╔══██║██║██║╚██╗██║╚════██║   ██║   ██║   ██║██╔══██╗██║╚██╔╝██║ ║
║   ██████╔╝██║  ██║██║  ██║██║██║ ╚████║███████║   ██║   ╚██████╔╝██║  ██║██║ ╚═╝ ██║ ║
║   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝ ║
║                                                                              ╔═══════╝
║              A free-form collection of creative ideas and experiments.       ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓-▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       BOX BATTLE BOSS CONCEPTS                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A categorized list of all potential boss ideas for the game. Each concept  ║
║   includes ideas for its theme, mechanics, and unique shader effects.        ║
║                                                                              ║
║   █  PUN-BASED CONCEPTS                                                      ║
║      ░ ■ Beat Box: Rhythm-based boss. Platforms and attacks sync to a beat.  ║
║      ░ ■ Sandbox: Deforms terrain, uses momentum-stealing attacks.           ║
║      ░ ■ Matchbox: Fire-themed, tight vertical arena, limited dash.          ║
║      ░ ■ Toolbox: Utility-themed, projectile-only combat.                    ║
║      ░ ■ Gearbox: Mechanical theme with rotating platforms and gravity shifts.║
║      ░ ■ Strongbox: Defense-themed, tries to corner player.                  ║
║      ░ ■ Icebox: Slippery physics, reduced friction.                         ║
║      ░ ■ Shoebox: Cramped arena, precise movement required.                  ║
║      ░ ■ Jukebox: Different songs change the environmental physics.          ║
║      ░ ■ Mailbox: Arena is filled with flying "letters" as platforms.        ║
║      ░ ■ Puzzle Box: Arena rearranges itself as movement puzzles are solved. ║
║      ░ ■ Shadow Box: Past movements leave shadow trails that become platforms.║
║      ░ ■ Cardboard Box: Platforms are fragile and break after use.           ║
║      ░ ■ Pandora's Box: Randomly opens to release temporary chaos effects.   ║
║      ░ ■ Rubik's Box: Arena rotates in 90-degree chunks.                     ║
║                                                                              ║
║   █  MEGA MAN-INSPIRED CONCEPTS                                              ║
║      ░ ■ Flame Box (Heat Man): Teleports in fire bursts, leaves flame trails.║
║      ░ ■ Ice Box (Ice Man): Slides with momentum, freezes platforms.         ║
║      ░ ■ Electric Box (Elec Man): Zips in straight lines at high speed.      ║
║      ░ ■ Wind Box (Air Man): Constant wind pushes player, affects jumps.     ║
║      ░ ■ Gravity Box (Gravity Man): Gravity flips, ceiling becomes floor.    ║
║      ░ ■ Time Box (Flash Man): Slow-motion bursts, delayed attacks.          ║
║      ░ ■ Plant Box (Wood Man): Platforms grow and shrink, sticky surfaces.   ║
║      ░ ■ Slash Box (Zero/Harpuia): Fast strikes cut through platforms.       ║
║      ░ ■ Phantom Box (Phantom): Stealth/clone attacks, false reflections.    ║
║                                                                              ║
║   █  LOOP-THEMED CONCEPTS                                                    ║
║      ░ ■ Infinite Box: Arena wraps around (left edge connects to right).     ║
║      ░ ■ Möbius Box: Twisted space; jumping up can make you fall down.       ║
║      ░ ■ Pendulum Box: Gravity shifts left/right in a rhythmic swing.        ║
║      ░ ■ Echo Box: Player inputs are repeated after a short delay.           ║
║      ░ ■ Ouroboros Box: The room slowly "eats" itself from the edges inward. ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                        SHADER & VFX BRAINSTORM                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of potential shader and visual effect ideas.                        ║
║                                                                              ║
║   ▒  Prism Box: Chromatic aberration effect, splits attacks into RGB channels.║
║   ▒  Void Box: Black hole distortion that pulls the player and projectiles.  ║
║   ▒  Static Box: Digital noise/glitch effects that can corrupt controls.     ║
║   ▒  Mirror Box: Kaleidoscope/reflection effects, duplicates player attacks. ║
║   ▒  Pulse Box: Rhythmic, concentric shockwave rings.                        ║
║   ▒  Phase Box: Flickers in and out of existence, unpredictable collision.   ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                   ADVANCED MOVEMENT & MECHANICS                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▒  Parrying System: A simple parry could stun the boss or grant the player ║
║      a momentum boost, rewarding precise timing.                             ║
║                                                                              ║
║   ▒  Ledge Grab: A brief pause/slowdown when hitting the top edge of a wall  ║
║      to create a more forgiving window for wall-jumping.                     ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                UI / UX ENHANCEMENT CONCEPTS                          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A collection of high-impact, mobile-friendly UI effects inspired by        ║
║   modern web design (Framer) and arcade games (Geometry Wars).               ║
║                                                                              ║
║   █  Animation & Motion                                                      ║
║      ░ ■ Entrance Stack: Slide, scale, and fade-in menu items with a         ║
║      ░   slight overshoot and a staggered delay for a cascading reveal.      ║
║      ░   (Technique: `create_tween()` with `TRANS_BACK`)                     ║
║      ░ ■ Micro-motion / Idle Breathing: Subtle, slow, looping scale or       ║
║      ░   rotation animations on UI panels to keep the screen feeling alive.  ║
║      ░   (Technique: `AnimationPlayer` or looping `Tween`)                   ║
║      ░ ■ Directional Hover Parallax: Make text/icon layers on a button       ║
║      ░   shift slightly in the opposite direction of the mouse cursor.       ║
║      ░   (Technique: Child `Control` nodes, `Input.get_local_mouse_position()` + `lerp`)║
║      ░ ■ Energy Bursts on Click: A small burst of particles on button press. ║
║      ░   (Technique: `GPUParticles2D` with a low-count, short-lived emission)║
║                                                                              ║
║   █  Shape & Form (Procedural Drawing)                                       ║
║      ░ ■ Animated Rounded Corners: Tween the corner radius of a procedurally ║
║      ░   drawn shape on hover for a fluid morphing effect.                   ║
║      ░   (Technique: `_draw()` with `draw_circle` + `draw_rect`, property tween)║
║      ░ ■ Inset / Layered Borders: Use multiple `draw_rect` calls with        ║
║      ░   different palette colors and slight offsets to create a 2.5D bevel. ║
║      ░ ■ Chamfered Corners: Use `draw_polygon()` to create geometric cutouts.║
║      ░ ■ Dynamic Clipping Mask: Reveal content by animating the size of a    ║
║      ░   parent `Control` node with `clip_contents` enabled.                 ║
║                                                                              ║
║   █  Interactivity & Feedback                                                ║
║      ░ ■ Click Ripple: A circular ripple animates outwards from the click point.║
║      ░   (Technique: `_input()` + tweened properties + `draw_circle()`)      ║
║      ░ ■ Keyboard/Controller Focus Ring: A distinct visual state for non-mouse║
║      ░   selection, like a subtle pulsing of the existing glow effect.       ║
║      ░   (Technique: Animate `glow_size` property when `is_selected` is true)║
║      ░ ■ Haptic Feedback: Use `OS.vibrate()` on mobile for subtle physical feedback.║
║                                                                              ║
║   █  Simple & Efficient Shaders                                              ║
║      ░ ■ Sheen / Moving Highlight: A simple shader that moves a soft gradient║
║      ░   across a surface to simulate a glassy reflection.                   ║
║      ░   (Technique: `ShaderMaterial` with a `smoothstep` ramp, driven by `TIME`)║
║      ░ ■ Noise Grain Overlay: A subtle, low-alpha tiling noise texture to add║
║      ░   surface detail without blurring. (Technique: `TextureRect` with `BLEND_MODE_ADD`)║
║      ░ ■ Vertex Displacement Parallax: A very cheap shader that slightly     ║
║      ░   offsets vertices based on mouse position for a subtle 3D effect.    ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/ARENA_CONCEPTS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║    █████╗ ██████╗ ███████╗███╗   ██╗ █████╗     ██████╗  ██████╗ ███╗   ███╗ ║
║   ██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔══██╗   ██╔═══██╗██╔═══██╗████╗ ████║ ║
║   ███████║██████╔╝█████╗  ██╔██╗ ██║███████║   ██║   ██║██║   ██║██╔████╔██║ ║
║   ██╔══██║██╔══██╗██╔══╝  ██║╚██╗██║██╔══██║   ██║   ██║██║   ██║██║╚██╔╝██║ ║
║   ██║  ██║██║  ██║███████╗██║ ╚████║██║  ██║   ╚██████╔╝╚██████╔╝██║ ╚═╝ ██║ ║
║   ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝    ╚═════╝  ╚═════╝ ╚═╝     ╚═╝ ║
║                                                                              ║
║           A visual library of potential boss battle arena layouts.           ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PUN-THEMED ARENA MOCKUPS                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  "SANDBOX" - Momentum Vampirism                                          ║
║      SPECIAL RULE: No Wall-Jump ability. Boss steals player speed on hit.    ║
║      ####################                                                    ║
║      #..................#                                                    ║
║      #..@...........&...#                                                    ║
║      #..................#                                                    ║
║      #....##########....#                                                    ║
║      #....#........#....#                                                    ║
║      #....#..^^^^..#....#                                                    ║
║      #....#........#....#                                                    ║
║      #....##--##--##....#                                                    ║
║      #..................#                                                    ║
║      #..##...........##.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..#......--.....#.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..##...........##.#                                                    ║
║      #..................#                                                    ║
║      #^^^^^^^^....^^^^^^#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "MATCHBOX" - Fire Theme                                                 ║
║      SPECIAL RULE: Only ONE dash per ground contact.                         ║
║      ####################                                                    ║
║      #@.................#                                                    ║
║      #..................#                                                    ║
║      #..####....####....#                                                    ║
║      #..#..#....#..#....#                                                    ║
║      #..#..######..#....#                                                    ║
║      #..#..........#....#                                                    ║
║      #..#..--##--..#....#                                                    ║
║      #..#........&.#....#                                                    ║
║      #..#..--##--..#....#                                                    ║
║      #..#..........#....#                                                    ║
║      #..#..######..#....#                                                    ║
║      #..#..#....#..#....#                                                    ║
║      #..####....####....#                                                    ║
║      #..................#                                                    ║
║      #..^^^^^^^^^^^^^^..#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "ICEBOX" - Slippery Mechanics                                           ║
║      SPECIAL RULE: Reduced friction - momentum carries much further.         ║
║      ####################                                                    ║
║      #@................&#                                                    ║
║      #--................#                                                    ║
║      #..................#                                                    ║
║      #......########....#                                                    ║
║      #......#......#....#                                                    ║
║      #......#..--..#....#                                                    ║
║      #......#......#....#                                                    ║
║      #......########....#                                                    ║
║      #..................#                                                    ║
║      #........^^^^......#                                                    ║
║      #..................#                                                    ║
║      #......########....#                                                    ║
║      #......#......#....#                                                    ║
║      #......#..--..#....#                                                    ║
║      #......#......#....#                                                    ║
║      #......########....#                                                    ║
║      #..................#                                                    ║
║      #................--#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                     CLASSIC ARCADE-THEMED MOCKUPS                    ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  "CIRCUIT BOX" - Tempest-style                                           ║
║      MECHANIC: Boss in center shoots through tunnels. Player circles outer ring.║
║      ####################                                                    ║
║      #..................#                                                    ║
║      #..###############.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..#..##########.#.#                                                    ║
║      #..#..#........#.#.#                                                    ║
║      #..#..#..####..#.#.#                                                    ║
║      #..#..#..#&&#..#.#.#                                                    ║
║      #..#..#..####..#.#.#                                                    ║
║      #..#..#..@.....#.#.#                                                    ║
║      #..#..##########.#.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..###############.#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "GARDEN BOX" - Centipede-style                                          ║
║      MECHANIC: Boss is a long segmented entity weaving between obstacles.    ║
║      ####################                                                    ║
║      #@................&#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


=====================================
FILE: ./docs/DEPRECATION.md
=====================================
# Project Deprecation Map

This document tracks major file renames and moves across the entire project.

| Old Path | New Path | Reason | Date | Migration Note |
|---|---|---|---|---|
| `res://src/core/Config.gd` | `res://src/core/data/config/config.gd` | Architectural refactor | 2025-08-10 | Autoload path updated in `project.godot`. No script changes required. |
| `res://src/core/settings.gd` | `res://src/core/data/config/settings.gd` | Architectural refactor | 2025-08-10 | Autoload path updated in `project.godot`. No script changes required. |
| `res://src/core/events/*_event.gd` | `res://src/core/events/typed_events/*_event.gd` | Architectural refactor | 2025-08-10 | Update `preload` or `load` paths in scripts if referenced directly. |

=====================================
FILE: ./README.md
=====================================
# BOX BATTLE

```
██████╗  ██████╗ ██╗  ██╗    ██████╗  █████╗ ████████╗████████╗██╗     ███████╗
██╔══██╗██╔═══██╗╗██╗██╔╝    ██╔══██╗██╔══██╗╚══██╔══╝╚══██╔══╝██║     ██╔════╝
██████╔╝██║   ██║╚███╔╝      ██████╔╝███████║   ██║      ██║   ██║     █████╗  
██╔══██╗██║   ██║██╔██╗      ██╔══██╗██╔══██║   ██║      ██║   ██║     ██╔══╝  
██████╔╝╚██████╔╝██╔╝ ██╗    ██████╔╝██║  ██║   ██║      ██║   ███████╗███████╗
╚═════╝  ╚═════╝ ╚═╝  ╚═╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝
```

A combat-focused 2D action game built in Godot 4, showcasing clean architecture and comprehensive game systems.

## What Makes This Code Notable

### Architectural Excellence
- **Centralized Asset Management**: All file paths are managed through a single `AssetPaths` singleton, eliminating broken references and making refactoring trivial
- **Singleton-Based Core Systems**: Audio, settings, cursor management, and constants are globally accessible without tight coupling
- **Modular Arena System**: Level layouts and encounters are separated into data-only scripts, making level creation declarative and maintainable

### Advanced Player Controller
- **Robust State Machine**: Clean finite state machine handling movement, combat, dashing, wall-sliding, and healing states
- **Physics-Driven Design**: Implements coyote time, jump buffering, wall jumping, and variable jump height for responsive controls
- **Pogo Mechanics**: Sophisticated downward attack system with instant collision detection and momentum preservation
- **Determination System**: Risk/reward mechanics where dealing damage builds healing charges

### Production-Quality UI
- **Custom Menu Navigation**: Unified system supporting both keyboard and mouse input with audio feedback
- **Global HUD Management**: Context-aware UI elements that appear/disappear based on current scene
- **Real-time Settings Sync**: Audio sliders and checkboxes update immediately without save/load cycles
- **Custom Slider Component**: Self-contained, reusable UI widget with proper mouse interaction

### Smart Audio Architecture
- **Pooled SFX Players**: Multiple AudioStreamPlayer instances prevent sound cutoff during rapid-fire events
- **Context-Aware Sounds**: Different menu actions trigger appropriate audio cues (back vs select vs error)
- **Robust Music Management**: Prevents music restarts when switching between menu screens

### Clean Code Practices
- **Extensive Documentation**: Every script explains its purpose and key design decisions
- **Consistent Naming**: Clear, descriptive variable and function names throughout
- **Proper Signal Usage**: Decoupled communication between components using Godot's signal system
- **Layer-Based Physics**: Thoughtful collision layer setup for different object types and interactions

### Noteworthy Technical Solutions
- **Fake Cursor System**: Custom cursor that works consistently across all platforms with proper click-through behavior
- **Immediate Pogo Detection**: Proactive collision checking prevents frame-delay issues in fast-paced combat
- **Hazard Dual-Layer System**: Terrain that's both solid (world layer) and damaging (hazard layer) for consistent physics
- **Deferred Scene Changes**: Proper scene transition handling to prevent physics errors

## Getting Started

1. Clone the repository
2. Open the project in Godot 4.4+
3. Run the project - it starts at the title screen

## Controls

- **Movement**: WASD / Arrow Keys
- **Jump**: Space / X / Period
- **Attack**: C / Comma / Alt + Shift
- **Dash**: Z / Slash / Shift + Ctrl
- **Heal**: Hold Down + Jump while on ground (requires healing charges)

## Project Structure

```
src/
├── core/           # Singleton systems (audio, settings, etc.)
├── entities/       # Player and enemy classes
├── projectiles/    # Bullet and shot behaviors
├── scenes/         # Main game scenes
├── ui/             # Menu systems and components
└── arenas/         # Level data and encounter scripts
```

This codebase demonstrates how to structure a Godot project for maintainability, extensibility, and professional polish. Every system is designed to be modular, well-documented, and easy to extend.

## License

This project is released under CC0 1.0 Universal - dedicated to the public domain. Use it however you like!

=====================================
FILE: ./default_bus_layout.tres
=====================================
[gd_resource type="AudioBusLayout" format=3 uid="uid://c65ja7dwrkbrc"]

[resource]
bus/1/name = &"Music"
bus/1/solo = false
bus/1/mute = false
bus/1/bypass_fx = false
bus/1/volume_db = 0.0
bus/1/send = &"Master"
bus/2/name = &"SFX"
bus/2/solo = false
bus/2/mute = false
bus/2/bypass_fx = false
bus/2/volume_db = 0.0
bus/2/send = &"Master"

=====================================
FILE: ./project.godot
=====================================
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="BOX BATTLE"
run/main_scene="res://src/scenes/main/main.tscn"
config/features=PackedStringArray("4.4", "Mobile")
config/icon="res://icon.svg"

[autoload]

Settings="*res://src/core/data/config/settings.gd"
AudioManager="*res://src/core/systems/audio_manager.gd"
CursorManager="*res://src/core/systems/cursor_manager.gd"
Constants="*res://src/core/util/constants.gd"
AssetPaths="*res://src/core/util/asset_paths.gd"
GlobalHud="*res://src/ui/global_hud/global_hud.tscn"
GameManager="*res://src/core/systems/game_manager.gd"
SceneManager="*res://src/core/systems/scene_manager.gd"
ArenaBuilder="*res://src/core/building/arena_builder.gd"
EventBus="*res://src/core/events/event_bus.gd"
Sequencer="*res://src/core/sequencing/sequencer.gd"
CombatDB="*res://src/core/data/combat_db.gd"
Palette="*res://src/core/util/palette.gd"
ObjectPool="*res://src/core/systems/object_pool.gd"
PhysicsLayers="*res://src/core/util/physics_layers.gd"
CombatUtils="*res://src/core/util/combat_utils.gd"

[display]

window/size/viewport_width=1000
window/size/viewport_height=1000
window/size/resizable=false
window/stretch/mode="canvas_items"

[input]

ui_left={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194319,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":0,"button_index":13,"pressure":0.0,"pressed":false,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":0,"axis":0,"axis_value":-1.0,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":65,"key_label":0,"unicode":97,"location":0,"echo":false,"script":null)
]
}
ui_right={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194321,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":0,"button_index":14,"pressure":0.0,"pressed":false,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":0,"axis":0,"axis_value":1.0,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":68,"key_label":0,"unicode":100,"location":0,"echo":false,"script":null)
]
}
ui_up={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194320,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":0,"button_index":11,"pressure":0.0,"pressed":false,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":0,"axis":1,"axis_value":-1.0,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":87,"key_label":0,"unicode":119,"location":0,"echo":false,"script":null)
]
}
ui_down={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194322,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":0,"button_index":12,"pressure":0.0,"pressed":false,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":0,"axis":1,"axis_value":1.0,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":83,"key_label":0,"unicode":115,"location":0,"echo":false,"script":null)
]
}
ui_jump={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":32,"physical_keycode":32,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":88,"physical_keycode":88,"key_label":0,"unicode":120,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":46,"physical_keycode":46,"key_label":0,"unicode":46,"location":0,"echo":false,"script":null)
]
}
ui_attack={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":67,"physical_keycode":67,"key_label":0,"unicode":99,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":44,"physical_keycode":44,"key_label":0,"unicode":44,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":true,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":16777218,"physical_keycode":16777218,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":2,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
ui_dash={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":90,"physical_keycode":90,"key_label":0,"unicode":122,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":47,"physical_keycode":47,"key_label":0,"unicode":47,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":true,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":16777217,"physical_keycode":16777217,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":3,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}

[layer_names]

2d_physics/layer_1="player"
2d_physics/layer_2="world"
2d_physics/layer_3="enemy"
2d_physics/layer_4="hazard"
2d_physics/layer_5="enemy_projectile"
2d_physics/layer_6="player_hitbox"
2d_physics/layer_7="player_hurtbox"

[rendering]

renderer/rendering_method="mobile"
environment/defaults/default_clear_color=Color(0, 0, 0, 1)


=====================================
FILE: ./data/combat_config.tres
=====================================
[gd_resource type="Resource" script_class="CombatConfig" load_steps=2 format=3 uid="uid://kov03lmcorvh"]

[ext_resource type="Script" uid="uid://okv7r7dpfyxf" path="res://src/core/data/config/combat_config.gd" id="1_config"]

[resource]
script = ExtResource("1_config")
gravity = 1200.0
player_speed = 450.0
player_jump_force = 680.0
player_pogo_force = 450.0
player_coyote_time = 0.1
player_jump_buffer = 0.1
player_jump_release_dampener = 0.4
player_wall_coyote_time = 0.05
player_fast_fall_gravity_multiplier = 1.4
player_max_air_jumps = 0
player_dash_speed = 1400.0
player_dash_duration = 0.15
player_dash_cooldown = 0.5
player_wall_slide_speed = 120.0
player_wall_jump_force_x = 1650.0
player_wall_jump_force_y = 680.0
player_attack_cooldown = 0.12
player_charge_time = 0.35
player_attack_duration = 0.1
player_attack_friction = 2000.0
player_knockback_speed = 700.0
player_knockback_duration = 0.1
player_hazard_knockback_speed = 400.0
player_determination_per_charge = 10
player_max_health = 5
player_heal_duration = 2.0
player_max_healing_charges = 1
player_invincibility_duration = 1.5
boss_health = 30
boss_patrol_speed = 100.0
boss_invincibility_duration = 0.1


=====================================
FILE: ./src/ui/game_hud/game_hud.gd
=====================================
# src/ui/game_hud/game_hud.gd
# Manages the in-game heads-up display. It is now fully decoupled and listens
# to the EventBus for real-time updates.
extends CanvasLayer

# --- Node References ---
@onready var player_health_value: Label = $PlayerInfo/PlayerHealthHBox/PlayerHealthValue
@onready var player_heal_charges_value: Label = $PlayerInfo/PlayerHealChargesHBox/PlayerHealChargesValue
@onready var boss_health_bar: ProgressBar = $BossHealthBar

# --- Subscription Tokens ---
var _player_health_token: int = 0
var _player_charges_token: int = 0
var _boss_health_token: int = 0

func _ready():
	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
	
	# MODIFIED: Get initial state from the new CombatDB resource.
	var max_health = CombatDB.config.player_max_health
	player_health_value.text = "%d / %d" % [max_health, max_health]
	player_heal_charges_value.text = "0"
	boss_health_bar.max_value = CombatDB.config.boss_health
	boss_health_bar.value = boss_health_bar.max_value


func _exit_tree():
	EventBus.off(_player_health_token)
	EventBus.off(_player_charges_token)
	EventBus.off(_boss_health_token)

# --- EventBus Callbacks ---

func on_player_health_changed(payload: PlayerHealthChangedEvent):
	player_health_value.text = str(payload.current_health) + " / " + str(payload.max_health)

func on_player_healing_charges_changed(payload: PlayerHealingChargesChangedEvent):
	player_heal_charges_value.text = str(payload.current_charges)

func on_boss_health_changed(payload: BossHealthChangedEvent):
	boss_health_bar.max_value = payload.max_health
	boss_health_bar.value = payload.current_health


=====================================
FILE: ./src/ui/game_hud/game_hud.tscn
=====================================
[gd_scene load_steps=4 format=3 uid="uid://c1qkhw0snj226"]

[ext_resource type="Script" path="res://src/ui/game_hud/game_hud.gd" id="1_3f8wa"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_1"]
bg_color = Color(0.262745, 0.262745, 0.262745, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_2"]
bg_color = Color(0.8, 0.2, 0.2, 1)

[node name="GameHUD" type="CanvasLayer"]
script = ExtResource("1_3f8wa")

[node name="PlayerInfo" type="VBoxContainer" parent="."]
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 20.0
offset_top = -100.0
offset_right = 220.0
offset_bottom = -20.0
grow_vertical = 0

[node name="PlayerHealthHBox" type="HBoxContainer" parent="PlayerInfo"]
layout_mode = 2

[node name="PlayerHealthLabel" type="Label" parent="PlayerInfo/PlayerHealthHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "Health:"

[node name="PlayerHealthValue" type="Label" parent="PlayerInfo/PlayerHealthHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "5 / 5"

[node name="PlayerHealChargesHBox" type="HBoxContainer" parent="PlayerInfo"]
layout_mode = 2

[node name="PlayerHealChargesLabel" type="Label" parent="PlayerInfo/PlayerHealChargesHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "Heal Charges:"

[node name="PlayerHealChargesValue" type="Label" parent="PlayerInfo/PlayerHealChargesHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "0"

[node name="BossHealthBar" type="ProgressBar" parent="."]
anchors_preset = 10
anchor_right = 1.0
offset_left = 250.0
offset_top = 20.0
offset_right = -250.0
offset_bottom = 50.0
grow_horizontal = 2
theme_override_styles/background = SubResource("StyleBoxFlat_1")
theme_override_styles/fill = SubResource("StyleBoxFlat_2")
max_value = 30.0
step = 1.0
value = 30.0
show_percentage = false

=====================================
FILE: ./src/ui/global_hud/global_hud.gd
=====================================
# src/ui/global_hud/global_hud.gd
#
# This autoloaded scene is always present. Its main job is to manage the
# global mute button. It is now fully event-driven and decoupled from any
# specific menu scene.
extends Control

# Preload icons into constants for performance and safety.
const ICON_SOUND_ON = preload(AssetPaths.SPRITE_ICON_SOUND_ON)
const ICON_SOUND_OFF = preload(AssetPaths.SPRITE_ICON_SOUND_OFF)

var mute_button: TextureButton

# Subscription tokens for safe cleanup.
var _menu_opened_token: int
var _menu_closed_token: int
var _audio_settings_token: int

func _ready():
	mute_button = TextureButton.new()
	add_child(mute_button)

	var padding = 40
	await get_tree().process_frame
	mute_button.position = Vector2(get_viewport_rect().size.x - 120, padding)
	mute_button.visible = false # Start hidden by default

	# Connect signals for interaction.
	mute_button.pressed.connect(_on_mute_button_pressed)
	mute_button.mouse_entered.connect(CursorManager.set_pointer_state.bind(true))
	mute_button.mouse_exited.connect(CursorManager.set_pointer_state.bind(false))

	# Subscribe to all necessary events.
	_audio_settings_token = Settings.audio_settings_changed.connect(_update_icon)
	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
	
	# Set the initial icon state once on startup.
	_update_icon()

func _exit_tree():
	# Unsubscribe from all signals and events to prevent memory leaks.
	Settings.audio_settings_changed.disconnect(_update_icon)
	EventBus.off(_menu_opened_token)
	EventBus.off(_menu_closed_token)

# --- EventBus Handlers (The New Visibility Logic) ---

func _on_menu_opened(_payload):
	mute_button.visible = true

func _on_menu_closed(_payload):
	mute_button.visible = false

# --- Internal Functions ---

func _on_mute_button_pressed():
	# Toggle the setting. This emits the 'audio_settings_changed' signal,
	# which our _update_icon function is connected to.
	Settings.music_muted = not Settings.music_muted
	AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)

func _update_icon():
	if Settings.music_muted:
		mute_button.texture_normal = ICON_SOUND_OFF
	else:
		mute_button.texture_normal = ICON_SOUND_ON


=====================================
FILE: ./src/ui/global_hud/global_hud.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://dpcsg3wmlvabm"]

[ext_resource type="Script" path="res://src/ui/global_hud/global_hud.gd" id="1_hud_script"]

[node name="GlobalHUD" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
script = ExtResource("1_hud_script")

=====================================
FILE: ./src/ui/menu_manager/menu_manager.gd
=====================================
# src/ui/menu_manager/menu_manager.gd
#
# A reusable script for creating keyboard and mouse-navigable menus. An instance
# of this is created by each menu scene to manage its own set of buttons.
extends Node

# --- Inner Class: MenuItem ---
# A simple data structure to bundle a button node with its "type" (for sounds).
class MenuItem:
	var button: TextureButton
	var type: String

	func _init(btn: TextureButton, btn_type: String):
		self.button = btn
		self.type = btn_type

# --- Variables ---
var menu_items = []
var current_selection = 0
var cursor_left: TextureRect
var cursor_right: TextureRect

func _ready():
	# Create the cursor sprites using the safe path from AssetPaths.
	cursor_left = TextureRect.new()
	cursor_left.texture = load(AssetPaths.SPRITE_MENU_CURSOR)
	cursor_left.flip_h = true # Point it inwards.
	add_child(cursor_left)

	cursor_right = TextureRect.new()
	cursor_right.texture = load(AssetPaths.SPRITE_MENU_CURSOR)
	add_child(cursor_right)

	cursor_left.visible = false
	cursor_right.visible = false

# The main setup function, called by the parent menu scene.
func setup_menu(items: Array):
	menu_items = items
	if menu_items.is_empty(): return

	for i in range(menu_items.size()):
		var menu_item = menu_items[i]
		# Connect signals for each button.
		# When the mouse enters a button, we call our own function to handle it.
		menu_item.button.mouse_entered.connect(_on_mouse_entered.bind(i))
		# When the mouse leaves, we tell the cursor manager to reset the cursor state.
		menu_item.button.mouse_exited.connect(CursorManager.set_pointer_state.bind(false))
		# When the button is pressed (by click or keyboard), we handle the sound.
		menu_item.button.pressed.connect(_on_item_pressed.bind(i))

	# Set the initial selection to the first item.
	current_selection = 0
	# Wait one frame to ensure all buttons have their positions calculated.
	await get_tree().process_frame
	# Now update the cursors to point to the first item.
	_update_cursors()
	cursor_left.visible = true
	cursor_right.visible = true

# Catches unhandled input for keyboard/controller navigation.
func _unhandled_input(event):
	if event.is_action_pressed("ui_down"):
		_change_selection(1)
	elif event.is_action_pressed("ui_up"):
		_change_selection(-1)
	elif event.is_action_pressed("ui_accept"):
		if not menu_items.is_empty():
			menu_items[current_selection].button.emit_signal("pressed")

# Plays context-specific sounds based on the button type.
func _on_item_pressed(index: int):
	if index < 0 or index >= menu_items.size(): return

	var item_type = menu_items[index].type
	match item_type:
		"BACK":
			AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_BACK)
		"START":
			AudioManager.play_sfx(AssetPaths.AUDIO_SFX_START_CHIME)
		_: # Default case for "SELECT" or any other type.
			AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_SELECT)

# Handles the logic for changing the selected item via keyboard.
func _change_selection(amount: int):
	if menu_items.size() <= 1:
		AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_ERROR)
		return

	var new_selection = (current_selection + amount + menu_items.size()) % menu_items.size()

	if new_selection != current_selection:
		current_selection = new_selection
		AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_MOVE)
		_update_cursors()
	else:
		# This case can happen if there's only one item.
		AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_ERROR)

# Called when the mouse pointer enters a button's collision shape.
func _on_mouse_entered(index: int):
	CursorManager.set_pointer_state(true)
	if current_selection != index:
		current_selection = index
		AudioManager.play_sfx(AssetPaths.AUDIO_SFX_MENU_MOVE)
		_update_cursors()

# Moves the visual cursors to frame the currently selected button.
func _update_cursors():
	if menu_items.is_empty(): return

	var selected_button = menu_items[current_selection].button
	var button_pos = selected_button.position
	var button_size = selected_button.size
	var cursor_padding = 40

	cursor_left.position.x = button_pos.x - cursor_left.size.x - cursor_padding
	cursor_left.position.y = button_pos.y + (button_size.y - cursor_left.size.y) / 2

	cursor_right.position.x = button_pos.x + button_size.x + cursor_padding
	cursor_right.position.y = button_pos.y + (button_size.y - cursor_right.size.y) / 2

=====================================
FILE: ./src/ui/screens/game_over_screen/game_over_screen.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://dnlf14n0wfxm1"]

[ext_resource type="Script" path="res://src/ui/screens/game_over_screen/game_over_screen.gd" id="1_goscr"]

[sub_resource type="LabelSettings" id="LabelSettings_1"]
font_size = 96
font_color = Color(0.8, 0.2, 0.2, 1)

[node name="GameOverScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_goscr")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -291.0
offset_top = -123.0
offset_right = 291.0
offset_bottom = 123.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 100
alignment = 1

[node name="TitleLabel" type="Label" parent="VBoxContainer"]
layout_mode = 2
text = "GAME OVER"
label_settings = SubResource("LabelSettings_1")
horizontal_alignment = 1

[node name="ReturnButton" type="TextureButton" parent="VBoxContainer"]
layout_mode = 2

=====================================
FILE: ./src/ui/screens/game_over_screen/game_over_screen.gd
=====================================
# src/ui/screens/game_over_screen/game_over_screen.gd
#
# This screen is shown when the player's health reaches zero.
extends Control

@onready var return_button: TextureButton = $VBoxContainer/ReturnButton

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	# Configure the button and connect its signal.
	return_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	return_button.pressed.connect(_on_return_button_pressed)

	# Set up the menu manager for keyboard/controller navigation.
	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(return_button, "BACK")])

func _on_return_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_title_screen()

=====================================
FILE: ./src/ui/screens/controls_menu/controls_menu.gd
=====================================
# src/ui/screens/controls_menu/controls_menu.gd
# Displays a static list of the game's controls.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	var title_font = load(AssetPaths.FONT_BLACK)
	var bold_font = load(AssetPaths.FONT_BOLD)
	var regular_font = load(AssetPaths.FONT_REGULAR)

	var title_label = Label.new()
	title_label.text = "Controls"
	add_child(title_label)
	title_label.add_theme_font_override("font", title_font)
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80

	var controls_data = [
		{ "action": "Movement", "keys": "Arrow Keys / WASD / Mouse" },
		{ "action": "Primary Action", "keys": "X / . / Space / Left-Click" },
		{ "action": "Secondary Action", "keys": "C / , / Shift / Right-Click" },
		{ "action": "Tertiary Action", "keys": "Z / / / Ctrl / Middle-Click" },
		{ "action": "Pause / Menu", "keys": "Enter / P / Escape" },
		{ "action": "Back / Cancel", "keys": "Escape / Backspace" }
	]

	var start_y = 300
	var item_gap = 70

	for i in range(controls_data.size()):
		var data = controls_data[i]
		var y_pos = start_y + i * item_gap

		var action_label = Label.new()
		action_label.text = data.action
		add_child(action_label)
		action_label.add_theme_font_override("font", bold_font)
		action_label.add_theme_font_size_override("font_size", 36)
		action_label.size.x = 390
		action_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_RIGHT
		action_label.position = Vector2(0, y_pos)

		var keys_label = Label.new()
		keys_label.text = data.keys
		add_child(keys_label)
		keys_label.add_theme_font_override("font", regular_font)
		keys_label.add_theme_font_size_override("font_size", 36)
		keys_label.position = Vector2(460, y_pos)

	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	add_child(back_button)
	back_button.position.x = (get_viewport_rect().size.x - back_button.size.x) / 2
	back_button.position.y = 800
	back_button.pressed.connect(_on_back_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(back_button, "BACK")])

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_back_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)

=====================================
FILE: ./src/ui/screens/controls_menu/controls_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cghquk5y1qjwg"]

[ext_resource type="Script" path="res://src/ui/screens/controls_menu/controls_menu.gd" id="1_controls_script"]

[node name="ControlsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_controls_script")

=====================================
FILE: ./src/ui/screens/credits_menu/credits_menu.gd
=====================================
# src/ui/screens/credits_menu/credits_menu.gd
# Displays game credits using a RichTextLabel to handle formatted text and URLs.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	var title_font = load(AssetPaths.FONT_BLACK)

	var title_label = Label.new()
	title_label.text = "Credits"
	add_child(title_label)
	title_label.add_theme_font_override("font", title_font)
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80

	var credits_label = RichTextLabel.new()
	add_child(credits_label)
	credits_label.mouse_filter = Control.MOUSE_FILTER_PASS
	credits_label.add_theme_font_override("normal_font", load(AssetPaths.FONT_REGULAR))
	credits_label.add_theme_font_size_override("normal_font_size", 38)
	credits_label.add_theme_color_override("default_color", Color.WHITE)
	credits_label.position = Vector2(0, 220)
	credits_label.size.x = get_viewport_rect().size.x
	credits_label.size.y = 550
	credits_label.bbcode_enabled = true

	credits_label.text = """
[center]A Game By Steven Casteel[/center]
[center][url=https://www.stevencasteel.com/]www.stevencasteel.com[/url][/center]

[center]Built with the [url=https://godotengine.org/]Godot Engine[/url][/center]
[center]AI-Assisted by [url=https://gemini.google.com/]Gemini[/url][/center]

[center]Find me on [url=https://www.youtube.com/@stevencasteel]YouTube[/url] and [url=http://github.com/stevencasteel]GitHub[/url][/center]
"""
	credits_label.meta_clicked.connect(_on_meta_clicked)
	credits_label.meta_hover_started.connect(func(_meta): CursorManager.set_pointer_state(true))
	credits_label.meta_hover_ended.connect(func(_meta): CursorManager.set_pointer_state(false))

	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	add_child(back_button)
	back_button.position.x = (get_viewport_rect().size.x - back_button.size.x) / 2
	back_button.position.y = 800
	back_button.pressed.connect(_on_back_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(back_button, "BACK")])

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_meta_clicked(meta):
	OS.shell_open(str(meta))

func _on_back_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)

=====================================
FILE: ./src/ui/screens/credits_menu/credits_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://b8txy2d7jrhwg"]

[ext_resource type="Script" path="res://src/ui/screens/credits_menu/credits_menu.gd" id="1_credits_script"]

[node name="CreditsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_credits_script")

=====================================
FILE: ./src/ui/screens/options_menu/options_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://ddgtf7n0tqvot"]

[ext_resource type="Script" path="res://src/ui/screens/options_menu/options_menu.gd" id="1_options_script"]

[node name="OptionsMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_options_script")

=====================================
FILE: ./src/ui/screens/options_menu/options_menu.gd
=====================================
# src/ui/screens/options_menu/options_menu.gd
# Manages the Options menu, which acts as a hub to navigate to other screens.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	var title_font = load(AssetPaths.FONT_BLACK)
	
	var title_label = Label.new()
	title_label.text = "Options"
	add_child(title_label)
	title_label.add_theme_font_override("font", title_font)
	title_label.add_theme_font_size_override("font_size", 96)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80
	
	var sound_button = TextureButton.new()
	sound_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_SOUND)
	add_child(sound_button)
	sound_button.position = Vector2((get_viewport_rect().size.x - sound_button.size.x) / 2, 300)
	
	var controls_button = TextureButton.new()
	controls_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_CONTROLS)
	add_child(controls_button)
	controls_button.position = Vector2((get_viewport_rect().size.x - controls_button.size.x) / 2, 450)

	var credits_button = TextureButton.new()
	credits_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_CREDITS)
	add_child(credits_button)
	credits_button.position = Vector2((get_viewport_rect().size.x - credits_button.size.x) / 2, 600)
	
	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	add_child(back_button)
	back_button.position = Vector2((get_viewport_rect().size.x - back_button.size.x) / 2, 800)
	
	sound_button.pressed.connect(_on_sound_button_pressed)
	controls_button.pressed.connect(_on_controls_button_pressed)
	credits_button.pressed.connect(_on_credits_button_pressed)
	back_button.pressed.connect(_on_back_button_pressed)
	
	var menu = MenuManager.new()
	add_child(menu)
	
	var menu_items = [
		MenuManager.MenuItem.new(sound_button, "SELECT"),
		MenuManager.MenuItem.new(controls_button, "SELECT"),
		MenuManager.MenuItem.new(credits_button, "SELECT"),
		MenuManager.MenuItem.new(back_button, "BACK")
	]
	menu.setup_menu(menu_items)

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_sound_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_SOUND_MENU)

func _on_controls_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_CONTROLS_MENU)

func _on_credits_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_CREDITS_MENU)

func _on_back_button_pressed():
	SceneManager.go_to_title_screen()

=====================================
FILE: ./src/ui/screens/sound_menu/sound_menu.gd
=====================================
# src/ui/screens/sound_menu/sound_menu.gd
# Manages the sound settings screen.
extends Control

const CustomSliderScript = preload(AssetPaths.SCRIPT_CUSTOM_SLIDER)
const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

var master_volume_label: Label
var music_volume_label: Label
var sfx_volume_label: Label
var master_mute_checkbox: TextureButton
var music_mute_checkbox: TextureButton
var sfx_mute_checkbox: TextureButton

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	var title_font = load(AssetPaths.FONT_BLACK)

	var title_label = Label.new()
	title_label.text = "Sound Settings"
	add_child(title_label)
	title_label.add_theme_font_override("font", title_font)
	title_label.add_theme_font_size_override("font_size", 80)
	title_label.size.x = get_viewport_rect().size.x
	title_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	title_label.position.y = 80

	_create_volume_row("MASTER", 300, Settings.master_volume, "master")
	_create_volume_row("MUSIC", 450, Settings.music_volume, "music")
	_create_volume_row("SFX", 600, Settings.sfx_volume, "sfx")

	var back_button = TextureButton.new()
	back_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	add_child(back_button)
	back_button.position.x = (get_viewport_rect().size.x - back_button.size.x) / 2
	back_button.position.y = 800
	back_button.pressed.connect(_on_back_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(back_button, "BACK")])

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _process(_delta):
	master_volume_label.text = str(int(Settings.master_volume * 100))
	music_volume_label.text = str(int(Settings.sfx_volume * 100))
	sfx_volume_label.text = str(int(Settings.sfx_volume * 100))
	
	_update_checkbox_texture(master_mute_checkbox, Settings.master_muted)
	_update_checkbox_texture(music_mute_checkbox, Settings.music_muted)
	_update_checkbox_texture(sfx_mute_checkbox, Settings.sfx_muted)

func _create_volume_row(label_text: String, y_pos: int, initial_volume: float, type: String):
	var row_label = Label.new()
	row_label.text = label_text
	add_child(row_label)
	row_label.add_theme_font_override("font", load(AssetPaths.FONT_BOLD))
	row_label.add_theme_font_size_override("font_size", 48)
	row_label.size.x = 250
	row_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	row_label.position = Vector2(40, y_pos)

	var slider = CustomSliderScript.new()
	add_child(slider)
	slider.set_value(initial_volume)
	slider.position = Vector2(300, y_pos + 25)

	var volume_label = Label.new()
	volume_label.add_theme_font_override("font", load(AssetPaths.FONT_REGULAR))
	volume_label.add_theme_font_size_override("font_size", 48)
	volume_label.size.x = 100
	volume_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	volume_label.position = Vector2(720, y_pos)
	add_child(volume_label)

	var checkbox = TextureButton.new()
	checkbox.position = Vector2(850, y_pos + 14)
	add_child(checkbox)
	
	match type:
		"master":
			master_volume_label = volume_label
			master_mute_checkbox = checkbox
			slider.value_changed.connect(func(new_value): Settings.master_volume = new_value)
			checkbox.pressed.connect(func(): Settings.master_muted = not Settings.master_muted)
		"music":
			music_volume_label = volume_label
			music_mute_checkbox = checkbox
			slider.value_changed.connect(func(new_value): Settings.music_volume = new_value)
			checkbox.pressed.connect(func(): Settings.music_muted = not Settings.music_muted)
		"sfx":
			sfx_volume_label = volume_label
			sfx_mute_checkbox = checkbox
			slider.value_changed.connect(func(new_value): Settings.sfx_volume = new_value)
			checkbox.pressed.connect(func(): Settings.sfx_muted = not Settings.sfx_muted)

func _update_checkbox_texture(button_ref: TextureButton, is_muted: bool):
	var new_texture = load(AssetPaths.SPRITE_CHECKBOX_UNCHECKED)
	if is_muted:
		new_texture = load(AssetPaths.SPRITE_CHECKBOX_CHECKED)
	
	if button_ref.texture_normal != new_texture:
		button_ref.texture_normal = new_texture

func _on_back_button_pressed():
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)


=====================================
FILE: ./src/ui/screens/sound_menu/sound_menu.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://bapc10ey0j27g"]

[ext_resource type="Script" path="res://src/ui/screens/sound_menu/sound_menu.gd" id="1_sound_script"]

[node name="SoundMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_sound_script")

=====================================
FILE: ./src/ui/screens/victory_screen/victory_screen.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cx6i2wt2j05y4"]

[ext_resource type="Script" path="res://src/ui/screens/victory_screen/victory_screen.gd" id="1_vsscr"]

[sub_resource type="LabelSettings" id="LabelSettings_1"]
font_size = 96
font_color = Color(0.2, 0.8, 0.2, 1)

[node name="VictoryScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_vsscr")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 100
alignment = 1

[node name="TitleLabel" type="Label" parent="VBoxContainer"]
layout_mode = 2
text = "VICTORY"
label_settings = SubResource("LabelSettings_1")
horizontal_alignment = 1

[node name="ReturnButton" type="TextureButton" parent="VBoxContainer"]
layout_mode = 2

=====================================
FILE: ./src/ui/screens/victory_screen/victory_screen.gd
=====================================
# src/ui/screens/victory_screen/victory_screen.gd
# This screen is shown when the player defeats the boss.
extends Control

@onready var return_button: TextureButton = $VBoxContainer/ReturnButton

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	return_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_BACK)
	return_button.pressed.connect(_on_return_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	menu.setup_menu([MenuManager.MenuItem.new(return_button, "BACK")])

func _on_return_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_title_screen()

=====================================
FILE: ./src/ui/screens/title_screen/title_screen.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cglqfxtqgxwul"]

[ext_resource type="Script" path="res://src/ui/screens/title_screen/title_screen.gd" id="1_title_script"]

[node name="TitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
script = ExtResource("1_title_script")

=====================================
FILE: ./src/ui/screens/title_screen/title_screen.gd
=====================================
# src/ui/screens/title_screen/title_screen.gd
# This script controls the main title screen.
extends Control

const MenuManager = preload(AssetPaths.SCRIPT_MENU_MANAGER)

func _ready():
	EventBus.emit(EventCatalog.MENU_OPENED)
	await get_tree().process_frame
	AudioManager.play_music(AssetPaths.AUDIO_MUSIC_TITLE)

	var title_graphic = TextureRect.new()
	title_graphic.texture = load(AssetPaths.SPRITE_TITLE)
	add_child(title_graphic)
	title_graphic.position = Vector2((get_viewport_rect().size.x - title_graphic.size.x) / 2, 220)

	var start_button = TextureButton.new()
	start_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_START)
	add_child(start_button)
	start_button.position = Vector2((get_viewport_rect().size.x - start_button.size.x) / 2, 450)

	var options_button = TextureButton.new()
	options_button.texture_normal = load(AssetPaths.SPRITE_MENU_ITEM_OPTIONS)
	add_child(options_button)
	options_button.position = Vector2((get_viewport_rect().size.x - options_button.size.x) / 2, 600)

	start_button.pressed.connect(_on_start_button_pressed)
	options_button.pressed.connect(_on_options_button_pressed)

	var menu = MenuManager.new()
	add_child(menu)
	
	var menu_items = [
		MenuManager.MenuItem.new(start_button, "START"),
		MenuManager.MenuItem.new(options_button, "SELECT")
	]
	menu.setup_menu(menu_items)

func _exit_tree():
	EventBus.emit(EventCatalog.MENU_CLOSED)

func _on_start_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.start_game(AssetPaths.SCRIPT_ARENA_00_ENCOUNTER)

func _on_options_button_pressed():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_MENU)


=====================================
FILE: ./src/ui/components/styled_menu_item/styled_menu_item.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cgt63w7k4w5gq"]

[ext_resource type="Script" path="res://src/ui/components/styled_menu_item/styled_menu_item.gd" id="1_menu_item_script"]

[node name="StyledMenuItem" type="Control"]
custom_minimum_size = Vector2(400, 80)
layout_mode = 3
anchors_preset = 0
script = ExtResource("1_menu_item_script")

=====================================
FILE: ./src/ui/components/styled_menu_item/styled_menu_item.gd
=====================================
# src/ui/components/styled_menu_item/styled_menu_item.gd
#
# The core logic for our new, reusable, procedurally-drawn menu item.
# This component will be the cornerstone of our "Framer + Geometry Wars" UI.
# It extends Control and uses the _draw() function to render itself.
@tool
class_name StyledMenuItem
extends Control

# --- Animated Properties ---
# REMOVED: corner_radius is no longer needed.
@export var glow_size: float = 0.0 : set = set_glow_size
@export var glow_alpha: float = 0.0 : set = set_glow_alpha

# --- Properties ---
@export var text: String = "Menu Item" : set = set_text

# --- State ---
var is_hovered: bool = false
var is_pressed: bool = false
var is_selected: bool = false # For keyboard/controller navigation

# --- Internal References ---
var _font: Font
var _active_tween: Tween

func _ready() -> void:
	_font = load(AssetPaths.FONT_BOLD)
	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)

# --- The Core Drawing Function ---
func _draw() -> void:
	# --- Step 1: Draw the Glow Effect ---
	if glow_size > 0.0 and glow_alpha > 0.0:
		_draw_glow()

	# --- Step 2: Draw the Main Button ---
	var bg_color: Color
	var text_color: Color
	var border_color: Color
	var border_width: float = 3.0

	if is_hovered or is_selected:
		bg_color = Palette.COLOR_UI_ACCENT_PRIMARY
		text_color = Palette.COLOR_BACKGROUND
		border_color = Palette.get_color(4)
	else:
		bg_color = Palette.COLOR_UI_PANEL_BG
		text_color = Palette.COLOR_TEXT_PRIMARY
		border_color = Palette.COLOR_UI_ACCENT_PRIMARY

	# REVERTED: Draw sharp rectangles for the background and border.
	draw_rect(Rect2(Vector2.ZERO, size), bg_color)
	draw_rect(Rect2(Vector2.ZERO, size), border_color, false, border_width)
	
	# --- Step 3: Draw the Text ---
	var font_size = 48
	var text_width = _font.get_string_size(text, HORIZONTAL_ALIGNMENT_CENTER, -1, font_size).x
	var text_pos_x = (size.x - text_width) / 2
	var text_pos_y = (size.y / 2) + (font_size / 3.0)
	draw_string(_font, Vector2(text_pos_x, text_pos_y), text, HORIZONTAL_ALIGNMENT_LEFT, -1, font_size, text_color)

# --- Drawing Helpers ---
func _draw_glow() -> void:
	var glow_base_color = Palette.COLOR_UI_GLOW
	var final_glow_color = Color(glow_base_color.r, glow_base_color.g, glow_base_color.b, glow_alpha)
	var glow_rect = Rect2(Vector2.ZERO, size).grow(glow_size)
	
	# REVERTED: Draw a sharp rectangle for the glow.
	draw_rect(glow_rect, final_glow_color)

# REMOVED: The _draw_rounded_rect and _draw_rounded_rect_border functions are no longer needed.

# --- Property Setters ---
func set_text(new_text: String):
	if text != new_text:
		text = new_text
		queue_redraw()

# REMOVED: The set_corner_radius function is no longer needed.

func set_glow_size(value: float):
	glow_size = value
	queue_redraw()

func set_glow_alpha(value: float):
	glow_alpha = value
	queue_redraw()

# --- Signal Handlers ---
func _on_mouse_entered() -> void:
	is_hovered = true
	CursorManager.set_pointer_state(true)
	if _active_tween and _active_tween.is_valid():
		_active_tween.kill()
	
	_active_tween = create_tween().set_parallel(true)
	_active_tween.tween_property(self, "glow_size", 28.0, 0.3).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	_active_tween.tween_property(self, "glow_alpha", 0.1, 0.3).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)

func _on_mouse_exited() -> void:
	is_hovered = false
	CursorManager.set_pointer_state(false)
	if _active_tween and _active_tween.is_valid():
		_active_tween.kill()
		
	_active_tween = create_tween().set_parallel(true)
	_active_tween.tween_property(self, "glow_size", 0.0, 0.2).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	_active_tween.tween_property(self, "glow_alpha", 0.0, 0.2).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)


=====================================
FILE: ./src/ui/components/custom_slider/custom_slider.gd
=====================================
# src/ui/components/custom_slider/custom_slider.gd
#
# A self-contained, reusable custom slider component. It emits a 'value_changed'
# signal that the parent menu (SoundMenu) listens for.
extends TextureRect

signal value_changed(value)

var knob: TextureRect
var is_dragging = false
var min_x = 0.0
var max_x = 0.0
var drag_offset = 0.0
var _initial_value = -1.0

func _ready():
	# Load textures using safe paths from the AssetPaths singleton.
	self.texture = load(AssetPaths.SPRITE_SLIDER_TRACK)
	
	knob = TextureRect.new()
	knob.texture = load(AssetPaths.SPRITE_SLIDER_KNOB)
	add_child(knob)
	
	# Connect signals for mouse interaction.
	knob.mouse_entered.connect(_on_knob_mouse_entered)
	knob.mouse_exited.connect(_on_knob_mouse_exited)
	
	# Wait for the node's size and position to be finalized before calculating bounds.
	await get_tree().process_frame
	
	knob.position.y = (size.y - knob.size.y) / 2
	min_x = global_position.x
	max_x = global_position.x + size.x - knob.size.x
	
	if _initial_value >= 0.0:
		var new_x_pos = min_x + (max_x - min_x) * _initial_value
		# 'clamp' ensures the value stays within the min/max range.
		knob.global_position.x = clamp(new_x_pos, min_x, max_x)

# Public function called by the Sound Menu to set the initial volume.
func set_value(initial_value: float):
	_initial_value = initial_value

func _process(_delta):
	# This code only runs if the user is actively dragging the knob.
	if is_dragging:
		var global_mouse_pos = get_global_mouse_position()
		# Move the knob to follow the mouse, but clamped within the slider's bounds.
		knob.global_position.x = clamp(global_mouse_pos.x - drag_offset, min_x, max_x)
		
		if (max_x - min_x) > 0:
			# Calculate the current value as a fraction (0.0 to 1.0).
			var current_value = (knob.global_position.x - min_x) / (max_x - min_x)
			# Emit our custom signal, sending the new value to the sound menu.
			emit_signal("value_changed", current_value)

# This function handles mouse clicks on the slider track.
func _gui_input(event):
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var knob_rect = knob.get_global_rect()
		
		if event.is_pressed():
			# Check if the click was on the knob to initiate dragging.
			if knob_rect.has_point(event.global_position):
				is_dragging = true
				# Calculate offset to make dragging feel smooth and natural.
				drag_offset = event.global_position.x - knob.global_position.x
		else:
			# When the button is released, stop dragging.
			is_dragging = false
			# Reset the cursor if the mouse is no longer over the knob.
			if not knob_rect.has_point(get_global_mouse_position()):
				CursorManager.set_pointer_state(false)
			drag_offset = 0.0

func _on_knob_mouse_entered():
	CursorManager.set_pointer_state(true)

func _on_knob_mouse_exited():
	# Only reset the cursor if we are NOT currently dragging the knob.
	# This prevents the cursor from flickering while dragging.
	if not is_dragging:
		CursorManager.set_pointer_state(false)

=====================================
FILE: ./src/scenes/loading/loading_screen.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://loading_screen_scene_id"]

[ext_resource type="Script" path="res://src/scenes/loading/loading_screen.gd" id="1_loading_script"]

[node name="LoadingScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_loading_script")

[node name="ColorRect" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="Label" type="Label" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -75.0
offset_top = -16.5
offset_right = 75.0
offset_bottom = 16.5
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 30
text = "Loading..."
horizontal_alignment = 1
vertical_alignment = 1

[node name="ShaderPrewarmViewport" type="SubViewportContainer" parent="."]
custom_minimum_size = Vector2(1, 1)
layout_mode = 0
offset_left = -10.0
offset_top = -10.0
offset_right = -9.0
offset_bottom = -9.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="ShaderPrewarmViewport"]
handle_input_locally = false
size = Vector2i(1, 1)
render_target_update_mode = 4

=====================================
FILE: ./src/scenes/loading/loading_screen.gd
=====================================
# src/scenes/loading/loading_screen.gd
#
# This script handles the pre-building of the level AND pre-warming shaders
# to prevent stuttering. It calls the ArenaBuilder to construct the level
# in memory and flashes key entities in an off-screen viewport.
extends Control

# --- Node References ---
@onready var prewarm_viewport: SubViewport = $ShaderPrewarmViewport/SubViewport

# An array of scenes with unique shaders we want to pre-compile.
# This makes it easy to add new enemies or effects in the future.
const SHADER_PREWARM_SCENES = [
	AssetPaths.SCENE_PLAYER,
	AssetPaths.SCENE_BASE_BOSS,
	AssetPaths.SCENE_PLAYER_SHOT,
	AssetPaths.SCENE_BOSS_SHOT
]

func _ready():
	# MODIFIED: Access the state object on GameManager
	if GameManager.state.current_encounter_script_path.is_empty():
		print("ERROR: No encounter script specified in GameManager. Returning to title.")
		get_tree().change_scene_to_file(AssetPaths.SCENE_TITLE_SCREEN)
		return

	# Start the full asynchronous loading process.
	_load_level()

func _load_level():
	# Yield to make sure the "Loading..." text renders before we start heavy work.
	await get_tree().process_frame
	
	# --- NEW: Pre-warm shaders ---
	await _prewarm_shaders()
	
	# Tell the ArenaBuilder to construct the level asynchronously.
	# MODIFIED: Access the state object on GameManager
	GameManager.state.prebuilt_level = await ArenaBuilder.build_level_async()
	
	# Yield to ensure all creation processes are finalized before we switch.
	await get_tree().process_frame
	
	# Proceed to the main game scene.
	get_tree().change_scene_to_file(AssetPaths.SCENE_GAME)

# --- NEW FUNCTION ---
# This function forces the compilation of shaders by briefly instantiating
# and rendering key game objects in an invisible, off-screen viewport.
func _prewarm_shaders() -> void:
	print("Starting shader pre-warming...")
	for scene_path in SHADER_PREWARM_SCENES:
		var instance = load(scene_path).instantiate()
		
		# Add the object to our off-screen viewport.
		prewarm_viewport.add_child(instance)
		
		# CRITICAL STEP: Wait for the next frame. This gives the rendering server
		# time to process the new object and compile its shader if it hasn't already.
		await get_tree().process_frame
		
		# Now that the shader is compiled and cached by the engine,
		# we can safely remove the temporary instance.
		instance.queue_free()
	
	print("Shader pre-warming complete.")


=====================================
FILE: ./src/scenes/game/game.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://game_scene_unique_id"]

[ext_resource type="Script" path="res://src/scenes/game/game.gd" id="1_game_script"]

[node name="Game" type="Node"]
script = ExtResource("1_game_script")

=====================================
FILE: ./src/scenes/game/game.gd
=====================================
# src/scenes/game/game.gd
# This script orchestrates the setup of an arena battle and game flow.
extends Node

var player_node: Node = null
var boss_node: Node = null

func _ready():
	if GameManager.state.prebuilt_level:
		add_child(GameManager.state.prebuilt_level)
		GameManager.state.prebuilt_level = null
		await get_tree().process_frame
	elif not GameManager.state.current_encounter_script_path.is_empty():
		var level_container = await ArenaBuilder.build_level_async()
		add_child(level_container)
		await get_tree().process_frame
	else:
		print("ERROR: Game scene loaded without a pre-built level or encounter path. Returning to title.")
		# MODIFIED: Use the new SceneManager.
		SceneManager.go_to_title_screen()
		return

	player_node = get_tree().get_first_node_in_group("player")
	boss_node = get_tree().get_first_node_in_group("enemy")

	if is_instance_valid(player_node):
		player_node.died.connect(_on_player_died)
	
	# This can be null if the boss spawns later via sequencer
	var final_boss_node = get_tree().get_first_node_in_group("enemy")
	if is_instance_valid(final_boss_node):
		final_boss_node.died.connect(_on_boss_died)

func _exit_tree():
	get_tree().paused = false

# --- Signal Handlers ---

func _on_player_died():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_game_over()

func _on_boss_died():
	# MODIFIED: Use the new SceneManager.
	SceneManager.go_to_victory()


=====================================
FILE: ./src/scenes/dev/test_ui.gd
=====================================
# src/scenes/dev/test_ui.gd
#
# A simple script for the UI test scene. Its only purpose is to
# provide a convenient way to close the scene by pressing Escape.
extends Control

func _unhandled_input(event: InputEvent) -> void:
	# If the Escape key is pressed, quit the running scene.
	if event.is_action_pressed("ui_cancel"):
		get_tree().quit()

=====================================
FILE: ./src/scenes/dev/test_ui.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://dma2j2a2h30d1"]

[ext_resource type="Script" uid="uid://cyfvs7mg1lxlj" path="res://src/scenes/dev/test_ui.gd" id="1_test_ui_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]

[node name="TestUI" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_test_ui_script")

[node name="Background" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.0627451, 0.0627451, 0.0627451, 1)

[node name="StyledMenuItem" parent="." instance=ExtResource("2_styled_menu_item")]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -200.0
offset_top = -40.0
offset_right = 200.0
offset_bottom = 40.0
grow_horizontal = 2
grow_vertical = 2
text = "TEST BUTTON"


=====================================
FILE: ./src/scenes/main/main.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://bt1c5p8wphc4a"]

[ext_resource type="Script" uid="uid://coxyesem6rn3k" path="res://src/scenes/main/main.gd" id="1_main_script"]

[node name="Main" type="Node"]
script = ExtResource("1_main_script")


=====================================
FILE: ./src/scenes/main/main.gd
=====================================
# src/scenes/main/main.gd
# This is the main entry point for the game, as defined in project.godot.
# Its only job is to immediately delegate to the SceneManager.
extends Node

func _ready():
	# Validate asset paths in debug builds.
	if OS.is_debug_build():
		AssetPaths.validate_all_paths()

	# Delegate the initial scene load to our new centralized manager.
	SceneManager.go_to_title_screen()


=====================================
FILE: ./src/core/sequencing/sequence_step.gd
=====================================
# src/core/sequencer/sequence_step.gd
# The abstract base class for all steps in a sequence.
# It defines the contract that all steps must follow: an `execute` method.
@tool
class_name SequenceStep
extends Resource

# This method will be implemented by all concrete step classes.
# It contains the logic for what the step actually does.
# It should return a Signal or Coroutine object if the sequence needs to pause.
#
# CORRECTED: The parameter is prefixed with an underscore to resolve the
# UNUSED_PARAMETER warning in this base class.
func execute(_sequencer_node: Node) -> Variant:
	return null


=====================================
FILE: ./src/core/sequencing/sequencer.gd
=====================================
# src/core/sequencer.gd
#
# An autoloaded singleton that runs sequences of timed events. This version has
# been refactored to use type-safe `SequenceStep` resources and now uses a more
# robust await pattern that satisfies the static analyzer.
extends Node

# The primary function of the sequencer. It iterates through an array of
# SequenceStep objects, executing each one in order.
func run_sequence(steps: Array[SequenceStep]) -> void:
	if steps.is_empty():
		return

	for step in steps:
		if not step is SequenceStep:
			push_warning("Sequencer: Invalid step found (not a SequenceStep resource). Skipping.")
			continue
		
		# CORRECTED: The step's execute method now returns an awaitable object
		# (like a Signal) if it needs to pause the sequence. We check for this
		# and only await if necessary. This resolves the REDUNDANT_AWAIT warning.
		var awaitable = step.execute(self)
		if awaitable:
			await awaitable


=====================================
FILE: ./src/core/sequencing/steps/emit_step.gd
=====================================
# src/core/sequencer/steps/emit_step.gd
# A sequence step that emits an event on the global EventBus.
@tool
class_name EmitStep
extends SequenceStep

@export var event_name: StringName = &""
@export var payload: Variant = null

# CORRECTED: The function signature now returns '-> Variant' to match its parent,
# SequenceStep. Since this step completes instantly, it returns null.
func execute(_sequencer_node: Node) -> Variant:
	if event_name == &"":
		push_warning("EmitStep: 'event_name' is not set.")
		return null
	EventBus.emit(event_name, payload)
	return null


=====================================
FILE: ./src/core/sequencing/steps/wait_step.gd
=====================================
# src/core/sequencer/steps/wait_step.gd
# A sequence step that pauses execution for a set duration.
@tool
class_name WaitStep
extends SequenceStep

@export var duration: float = 1.0

# CORRECTED: This function now returns the timer's 'timeout' signal.
# The sequencer will await this signal, making the pause explicit.
func execute(sequencer_node: Node) -> Variant:
	if duration > 0.0:
		return sequencer_node.get_tree().create_timer(duration).timeout
	return null

=====================================
FILE: ./src/core/util/combat_utils.gd
=====================================
# src/core/util/combat_utils.gd
# A collection of static helper functions for combat-related logic.
extends Node

# Finds any node that can be damaged by checking for the `apply_damage` method,
# which is our conceptual interface. It returns the node that has the method.
func find_damageable(from_node: Node) -> Node:
	var current_node = from_node
	while is_instance_valid(current_node):
		# Check if the node itself implements the IDamageable interface.
		if current_node.has_method("apply_damage"):
			return current_node
			
		# HealthComponent is the primary implementer of our interface.
		# This provides a direct path for performance.
		var hc = current_node.get_node_or_null("HealthComponent")
		if hc and hc.has_method("apply_damage"):
			return hc

		# If not, move up to the parent and check again.
		current_node = current_node.get_parent()
	
	return null


=====================================
FILE: ./src/core/util/physics_layers.gd
=====================================
# src/core/util/physics_layers.gd
#
# An autoloaded singleton that provides named constants for the 2D physics
# layers defined in the project settings. This prevents the use of "magic
# numbers" for collision layers and masks, making the code more readable
# and easier to maintain.
#
# !!! CRITICAL WARNING !!!
# The values in this file MUST be kept in perfect sync with the settings in:
# Project -> Project Settings -> General -> Layer Names -> 2D Physics
#
# Changing a layer name or order in the project settings without updating
# this file will break collision detection.
extends Node

# The bitmask value for each layer (2^n, where n is the layer number - 1).
const PLAYER = 1           # Layer 1
const WORLD = 2            # Layer 2
const ENEMY = 4            # Layer 3
const HAZARD = 8           # Layer 4
const ENEMY_PROJECTILE = 16  # Layer 5
const PLAYER_HITBOX = 32   # Layer 6
const PLAYER_HURTBOX = 64  # Layer 7

=====================================
FILE: ./src/core/util/palette.gd
=====================================
# src/core/palette.gd
#
# An autoloaded singleton that holds the project's master color palette.
# It establishes a single source of truth for all visual elements, ensuring a
# cohesive aesthetic. It is designed around a 32-step grayscale value scale.
extends Node

# FIX: The Color("#hex") constructor is a valid constant expression, unlike
# Color.from_string(). This allows the entire palette and its semantic
# constants to be correctly defined at compile-time.
const _palette: Array[Color] = [
	Color("#000000"), Color("#080808"), Color("#101010"), Color("#191919"),
	Color("#212121"), Color("#292929"), Color("#313131"), Color("#3a3a3a"),
	Color("#424242"), Color("#4a4a4a"), Color("#525252"), Color("#5a5a5a"),
	Color("#636363"), Color("#6b6b6b"), Color("#737373"), Color("#7b7b7b"),
	Color("#848484"), Color("#8c8c8c"), Color("#949494"), Color("#9c9c9c"),
	Color("#a5a5a5"), Color("#adadad"), Color("#b5b5b5"), Color("#bdbdbd"),
	Color("#c5c5c5"), Color("#cecece"), Color("#d6d6d6"), Color("#dedede"),
	Color("#e6e6e6"), Color("#efefef"), Color("#f7f7f7"), Color("#ffffff")
]

# --- SEMANTIC CONSTANTS ---
# This is the most important part of the script. We refer to these constants
# in our code, not the raw index numbers. This makes the code readable and
# easy to update. If we want to make all hazards darker, we just change one
# line here.

# Gameplay
const COLOR_PLAYER: Color = _palette[31]
const COLOR_BOSS_PRIMARY: Color = _palette[30]
const COLOR_PLAYER_PROJECTILE: Color = _palette[29]
const COLOR_HAZARD_PRIMARY: Color = _palette[28] # Also Enemy Projectiles

# Environment
const COLOR_BACKGROUND: Color = _palette[0]
const COLOR_GRID: Color = _palette[2]
const COLOR_TERRAIN_PRIMARY: Color = _palette[4]
const COLOR_TERRAIN_SECONDARY: Color = _palette[6]

# UI/UX
const COLOR_TEXT_HEADER: Color = _palette[30]
const COLOR_UI_ACCENT_PRIMARY: Color = _palette[28]
const COLOR_TEXT_PRIMARY: Color = _palette[26]
const COLOR_TEXT_DISABLED: Color = _palette[16]
const COLOR_UI_GLOW: Color = _palette[12]
const COLOR_UI_PANEL_BG: Color = _palette[8]

# --- Helper Function ---
# Provides a safe way to get a color by its index if needed.
func get_color(index: int) -> Color:
	if index >= 0 and index < _palette.size():
		return _palette[index]
	push_warning("Palette: Invalid color index requested: %d" % index)
	return Color.MAGENTA # Return a highly visible error color

=====================================
FILE: ./src/core/util/asset_paths.gd
=====================================
# src/core/util/asset_paths.gd
#
# This singleton provides a central, validated registry for all asset file paths.
# It is now organized by feature/system for better scalability and includes a
# validation function to prevent runtime errors from missing assets.
extends Node

# --- CORE SYSTEMS ---
const SCENE_MAIN = "res://src/scenes/main/main.tscn"
const SCENE_GAME = "res://src/scenes/game/game.tscn"
const SCENE_LOADING_SCREEN = "res://src/scenes/loading/loading_screen.tscn"
const SCRIPT_MENU_MANAGER = "res://src/ui/menu_manager/menu_manager.gd"
const SCRIPT_CUSTOM_SLIDER = "res://src/ui/components/custom_slider/custom_slider.gd"

# --- ARENAS ---
const SCRIPT_ARENA_00_LAYOUT = "res://src/arenas/arena_00_layout.gd"
const SCRIPT_ARENA_00_ENCOUNTER = "res://src/arenas/arena_00_encounter.gd"

# --- PLAYER & RELATED ---
const SCENE_PLAYER = "res://src/entities/player/player.tscn"
const SCENE_PLAYER_SHOT = "res://src/projectiles/player_shot.tscn"

# --- BOSS & RELATED ---
const SCENE_BASE_BOSS = "res://src/entities/boss/base_boss.tscn"
const SCENE_BOSS_SHOT = "res://src/projectiles/boss_shot.tscn"

# --- UI & HUD ---
const SCENE_GAME_HUD = "res://src/ui/game_hud/game_hud.tscn"
const SCENE_GAME_OVER_SCREEN = "res://src/ui/screens/game_over_screen/game_over_screen.tscn"
const SCENE_VICTORY_SCREEN = "res://src/ui/screens/victory_screen/victory_screen.tscn"
const SCENE_TITLE_SCREEN = "res://src/ui/screens/title_screen/title_screen.tscn"
const SCENE_OPTIONS_MENU = "res://src/ui/screens/options_menu/options_menu.tscn"
const SCENE_SOUND_MENU = "res://src/ui/screens/sound_menu/sound_menu.tscn"
const SCENE_CONTROLS_MENU = "res://src/ui/screens/controls_menu/controls_menu.tscn"
const SCENE_CREDITS_MENU = "res://src/ui/screens/credits_menu/credits_menu.tscn"

const SPRITE_TITLE = "res://assets/sprites/ui/title/box_battle_title.png"
const SPRITE_MENU_CURSOR = "res://assets/sprites/ui/menu/menu-cursor.png"
const SPRITE_MENU_ITEM_START = "res://assets/sprites/ui/menu/menu-item-start.png"
const SPRITE_MENU_ITEM_OPTIONS = "res://assets/sprites/ui/menu/menu-item-options.png"
const SPRITE_MENU_ITEM_SOUND = "res://assets/sprites/ui/menu/menu-item-sound.png"
const SPRITE_MENU_ITEM_CONTROLS = "res://assets/sprites/ui/menu/menu-item-controls.png"
const SPRITE_MENU_ITEM_CREDITS = "res://assets/sprites/ui/menu/menu-item-credits.png"
const SPRITE_MENU_ITEM_BACK = "res://assets/sprites/ui/menu/menu-item-back.png"
const SPRITE_CURSOR_DEFAULT = "res://assets/sprites/ui/cursors/cursor_default.png"
const SPRITE_CURSOR_POINTER = "res://assets/sprites/ui/cursors/cursor_pointer.png"
const SPRITE_SLIDER_TRACK = "res://assets/sprites/ui/slider/slider-track.png"
const SPRITE_SLIDER_KNOB = "res://assets/sprites/ui/slider/slider-knob.png"
const SPRITE_CHECKBOX_CHECKED = "res://assets/sprites/ui/checkbox/checkbox-checked.png"
const SPRITE_CHECKBOX_UNCHECKED = "res://assets/sprites/ui/checkbox/checkbox-unchecked.png"
const SPRITE_ICON_SOUND_ON = "res://assets/sprites/ui/icons/icon-sound-on.png"
const SPRITE_ICON_SOUND_OFF = "res://assets/sprites/ui/icons/icon-sound-off.png"

# --- FONTS ---
const FONT_BLACK = "res://assets/fonts/MPLUSRounded1c-Black.ttf"
const FONT_BOLD = "res://assets/fonts/MPLUSRounded1c-Bold.ttf"
const FONT_REGULAR = "res://assets/fonts/MPLUSRounded1c-Regular.ttf"

# --- AUDIO ---
const AUDIO_MUSIC_TITLE = "res://assets/audio/music/title-screen-loop.mp3"
const AUDIO_SFX_MENU_BACK = "res://assets/audio/sfx/menu-back.mp3"
const AUDIO_SFX_MENU_ERROR = "res://assets/audio/sfx/menu-error.mp3"
const AUDIO_SFX_MENU_MOVE = "res://assets/audio/sfx/menu-move.mp3"
const AUDIO_SFX_MENU_SELECT = "res://assets/audio/sfx/menu-select.mp3"
const AUDIO_SFX_START_CHIME = "res://assets/audio/sfx/start-chime.mp3"


# --- NEW: VALIDATION SYSTEM ---
# This function runs at startup to verify that every path defined in this
# script actually points to a real file.
func validate_all_paths() -> void:
	print("AssetPaths: Validating all asset paths...")
	var constants = get_script().get_script_constant_map()
	var missing_assets = false
	
	for key in constants:
		var value = constants[key]
		# We only care about string paths that are project resources.
		if value is String and value.begins_with("res://"):
			if not FileAccess.file_exists(value):
				push_error("Asset path validation failed! File not found for '%s': %s" % [key, value])
				missing_assets = true

	if not missing_assets:
		print("AssetPaths: All paths validated successfully.")

=====================================
FILE: ./src/core/util/constants.gd
=====================================
# src/core/util/constants.gd
#
# This singleton holds true global constants that are foundational to the
# engine's architecture or core systems.
#
# GUIDELINES FOR USE:
# - DO add values that define fundamental, project-wide numbers that are
#   unlikely to change (e.g., TILE_SIZE).
# - DO add system-level performance values (e.g., NUM_SFX_PLAYERS).
# - DO NOT add any values related to gameplay feel, balance, or tuning.
#   Those belong in a data resource like CombatConfig.tres.
extends Node

# --- Audio ---
# The number of simultaneous sound effects that can be played at once.
const NUM_SFX_PLAYERS = 8

# --- Arena Design ---
# The universal size (width and height) of a single grid tile in the arena.
const TILE_SIZE = 50

=====================================
FILE: ./src/core/README.md
=====================================
# Core Subsystem

This directory contains all of the project's global systems, singletons, and core logic that is not specific to a single entity or scene.

## Subdirectories

-   **/building**: Contains the classes responsible for procedural level generation (`ArenaBuilder`, `LevelParser`, etc.).
-   **/data**: Manages game data, including the new `Resource`-based configurations.
-   **/events**: Contains the global `EventBus` and all typed event definitions.
-   **/sequencing**: Manages the `Sequencer` for creating scripted, timed events.
-   **/systems**: Contains the primary global managers (`AudioManager`, `GameManager`, etc.).
-   **/util**: A collection of stateless utility singletons like `AssetPaths` and `Palette`.

## Autoloaded Singletons (Global Access)

The following scripts are registered as autoloads in `project.godot` and can be accessed globally:

-   `Settings`: Manages persistent game settings.
-   `AudioManager`: Controls all audio playback.
-   `CursorManager`: Manages the custom mouse cursor.
-   `Constants`: Holds engine-level constants.
-   `AssetPaths`: Provides safe, static paths to all project assets.
-   `GlobalHud`: The persistent UI layer for global elements.
-   `GameManager`: Manages game state and scene flow.
-   `ArenaBuilder`: The main entry point for level construction.
-   `EventBus`: The global event dispatcher.
-   `Sequencer`: Manages timed event sequences.
-   `Config`: Handles loading data from `Resource`-based configs.
-   `Palette`: Defines the global color scheme.
-   `ObjectPool`: Manages reusable nodes to improve performance.
-   `PhysicsLayers`: Provides named constants for physics collision layers.

## Public API

The primary public API for inter-system communication is the `EventBus`. Systems should emit events to signal state changes and listen for events to react to them, rather than calling each other directly.

=====================================
FILE: ./src/core/events/event_bus.gd
=====================================
# src/core/events/event_bus.gd
# This is the final, lean version of the EventBus. The unused `_source`
# parameter has been removed from the emit function for a cleaner API.
extends Node

var _subscribers: Dictionary = {}
var _by_id: Dictionary = {}
var _next_id: int = 1

func on(event_name: StringName, callback: Callable) -> int:
	assert(callback.is_valid(), "EventBus.on: callback must be a valid Callable")
	var subs: Array = _subscribers.get(event_name, [])
	var owner_node = callback.get_object()
	var weak_ref = weakref(owner_node) if owner_node is Node else null

	var entry := {
		"id": _next_id, "callback": callback, "owner_weak": weak_ref,
	}
	subs.append(entry)
	_subscribers[event_name] = subs
	_by_id[_next_id] = event_name
	_next_id += 1
	return entry.id

func off(token: int) -> void:
	if not _by_id.has(token): return
	var event_name: StringName = _by_id[token]
	if _subscribers.has(event_name):
		for i in range(_subscribers[event_name].size() - 1, -1, -1):
			if _subscribers[event_name][i].id == token:
				_subscribers[event_name].remove_at(i)
				break
		if _subscribers[event_name].is_empty():
			_subscribers.erase(event_name)
	_by_id.erase(token)

# MODIFIED: Removed the unused `_source` parameter.
func emit(event_name: StringName, payload = null) -> void:
	if not _subscribers.has(event_name): return

	for sub in _subscribers[event_name].duplicate():
		if sub.owner_weak and not sub.owner_weak.get_ref():
			off(sub.id)
			continue
		
		sub.callback.call(payload)


=====================================
FILE: ./src/core/events/typed_events/boss_health_changed_event.gd
=====================================
# src/core/events/boss_health_changed_event.gd
# A typed payload for the BOSS_HEALTH_CHANGED event.
extends Resource
class_name BossHealthChangedEvent

@export var current_health: int = 0
@export var max_health: int = 0

=====================================
FILE: ./src/core/events/typed_events/player_health_changed_event.gd
=====================================
# src/core/events/player_health_changed_event.gd
# A typed payload for the PLAYER_HEALTH_CHANGED event. Using a Resource allows
# for type safety and IDE autocompletion in listener scripts.
extends Resource
class_name PlayerHealthChangedEvent

@export var current_health: int = 0
@export var max_health: int = 0

=====================================
FILE: ./src/core/events/typed_events/player_healing_charges_changed_event.gd
=====================================
# src/core/events/player_healing_charges_changed_event.gd
# A typed payload for the PLAYER_HEALING_CHARGES_CHANGED event.
extends Resource
class_name PlayerHealingChargesChangedEvent

@export var current_charges: int = 0

=====================================
FILE: ./src/core/events/event_catalog.gd
=====================================
# src/core/events/event_catalog.gd
# This script serves as the canonical, central list of all event names in the project.
# By using these constants instead of raw strings, we gain IDE autocompletion and
# prevent typos that would lead to silent runtime failures.
extends Object
class_name EventCatalog

# --- Player Events ---
const PLAYER_HEALTH_CHANGED = "player.health_changed"
const PLAYER_HEALING_CHARGES_CHANGED = "player.healing_charges_changed"

# --- Boss / Entity Events ---
const BOSS_HEALTH_CHANGED = "boss.health_changed"

# --- UI State Events ---
const MENU_OPENED = "ui.menu_opened"
const MENU_CLOSED = "ui.menu_closed"

=====================================
FILE: ./src/core/systems/game_manager.gd
=====================================
# src/core/systems/game_manager.gd
#
# A simple singleton to manage the state of the game session. It now holds
# a reference to a GameStateData resource, standardizing our state pattern.
extends Node

var state = null

const GameStateDataScript = preload("res://src/core/data/game_state_data.gd")

func _ready():
	# Create a new, clean instance of the game state every time the
	# GameManager is initialized.
	state = GameStateDataScript.new()

# NEW: Implement _exit_tree for proper cleanup.
# This function is called automatically by the engine when the game is closing.
func _exit_tree():
	# Manually release our reference to the state resource. This allows
	# Godot's garbage collector to free it and any nodes it might be holding,
	# preventing memory leaks on exit.
	if is_instance_valid(state):
		state = null

=====================================
FILE: ./src/core/systems/scene_manager.gd
=====================================
# src/core/systems/scene_manager.gd
#
# A centralized singleton for handling all scene transitions. This provides a
# safe, high-level API for changing scenes and prevents scene path strings
# from being scattered across the codebase.
extends Node

# --- Private Methods ---

# The core, private function that handles the actual scene change.
# It uses 'call_deferred' to ensure the change happens at a safe time.
func _switch_to_scene(path: String) -> void:
	get_tree().call_deferred("change_scene_to_file", path)


# --- Public API ---

func go_to_title_screen() -> void:
	_switch_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

func start_game(encounter_path: String) -> void:
	GameManager.state.current_encounter_script_path = encounter_path
	_switch_to_scene(AssetPaths.SCENE_LOADING_SCREEN)

func go_to_game_over() -> void:
	_switch_to_scene(AssetPaths.SCENE_GAME_OVER_SCREEN)

func go_to_victory() -> void:
	_switch_to_scene(AssetPaths.SCENE_VICTORY_SCREEN)

# A generic function for simple menu navigation.
func go_to_scene(path: String) -> void:
	_switch_to_scene(path)


=====================================
FILE: ./src/core/systems/object_pool.gd
=====================================
# src/core/object_pool.gd
#
# FINAL, PRODUCTION-READY VERSION. This pool is the permanent owner of
# all its objects. It never re-parents during gameplay. It activates objects
# by moving them into position and deactivates them by moving them off-screen.
# This architecture prevents all physics-related crashes and memory leaks.
extends Node

const PlayerShotScene = preload(AssetPaths.SCENE_PLAYER_SHOT)
const BossShotScene = preload(AssetPaths.SCENE_BOSS_SHOT)

var _pools: Dictionary = {}

func _ready():
	_create_pool_for_scene(&"player_shots", PlayerShotScene, 15)
	_create_pool_for_scene(&"boss_shots", BossShotScene, 30)

func _create_pool_for_scene(p_pool_name: StringName, p_scene: PackedScene, p_initial_size: int):
	if _pools.has(p_pool_name):
		return
		
	var pool_container = Node.new()
	pool_container.name = p_pool_name
	add_child(pool_container)
	
	_pools[p_pool_name] = {"scene": p_scene, "inactive": []}
	
	for i in range(p_initial_size):
		var instance = p_scene.instantiate()
		pool_container.add_child(instance)
		instance.deactivate()
		_pools[p_pool_name].inactive.append(instance)

func get_instance(p_pool_name: StringName) -> Node:
	if not _pools.has(p_pool_name):
		push_error("ObjectPool: Pool '%s' does not exist." % p_pool_name)
		return null

	var pool = _pools[p_pool_name]
	var instance: Node
	
	if not pool.inactive.is_empty():
		instance = pool.inactive.pop_front()
	else:
		# This case handles if the pool runs dry during intense combat.
		instance = pool.scene.instantiate()
		get_node(NodePath(p_pool_name)).add_child(instance)
	
	return instance

func return_instance(p_instance: Node):
	if not is_instance_valid(p_instance) or p_instance.process_mode == PROCESS_MODE_DISABLED:
		return

	var pool_name = p_instance.get_meta("pool_name", "")
	if pool_name == "" or not _pools.has(pool_name):
		p_instance.queue_free()
		return
	
	p_instance.deactivate()
	_pools[pool_name].inactive.append(p_instance)


=====================================
FILE: ./src/core/systems/audio_manager.gd
=====================================
# src/core/audio_manager.gd
#
# This singleton is responsible for all audio playback. This version includes
# a robust cleanup function to prevent memory leaks on exit.
extends Node

var sfx_players = []
var sfx_player_index = 0
var music_player: AudioStreamPlayer

func _ready():
	for i in range(Constants.NUM_SFX_PLAYERS):
		var player = AudioStreamPlayer.new()
		add_child(player)
		player.bus = "SFX"
		sfx_players.append(player)

	music_player = AudioStreamPlayer.new()
	add_child(music_player)
	music_player.bus = "Music"

	Settings.audio_settings_changed.connect(_on_audio_settings_changed)
	_on_audio_settings_changed()

# This function catches system-level notifications. It's our new, more
# reliable way to ensure cleanup happens before the application quits.
func _notification(what):
	if what == NOTIFICATION_WM_CLOSE_REQUEST:
		# The user has requested to close the game. Clean up the music stream now.
		if is_instance_valid(music_player):
			music_player.stop()
			music_player.stream = null

# The _exit_tree function is still good practice for when nodes are removed
# during gameplay, so we'll keep it as a secondary cleanup method.
func _exit_tree():
	if is_instance_valid(music_player):
		music_player.stop()
		music_player.stream = null

func _on_audio_settings_changed():
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear_to_db(Settings.master_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("Master"), Settings.master_muted)

	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Music"), linear_to_db(Settings.music_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("Music"), Settings.music_muted)

	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("SFX"), linear_to_db(Settings.sfx_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("SFX"), Settings.sfx_muted)

func play_sfx(sound_path: String):
	var player = sfx_players[sfx_player_index]
	player.stream = load(sound_path)
	player.play()
	sfx_player_index = (sfx_player_index + 1) % Constants.NUM_SFX_PLAYERS

func play_music(music_path: String):
	if music_player.stream and music_player.stream.resource_path == music_path and music_player.playing:
		return

	music_player.stream = load(music_path)
	music_player.play()

func stop_music():
	music_player.stop()

=====================================
FILE: ./src/core/systems/cursor_manager.gd
=====================================
# src/core/cursor_manager.gd
#
# This singleton manages the game's custom "fake" cursor, giving us full
# control over its appearance on all platforms. It draws on a high layer
# to ensure it's always on top of other UI and game elements.
extends CanvasLayer

var cursor_sprite: TextureRect

# We preload our cursor images using the AssetPaths singleton for safety and clarity.
const CURSOR_DEFAULT = preload(AssetPaths.SPRITE_CURSOR_DEFAULT)
const CURSOR_POINTER = preload(AssetPaths.SPRITE_CURSOR_POINTER)

func _ready():
	# A high layer number ensures the cursor renders above everything else.
	layer = 10
	# Hide the computer's default mouse cursor.
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)

	cursor_sprite = TextureRect.new()
	cursor_sprite.texture = CURSOR_DEFAULT

	# CRITICAL: This makes our cursor sprite "click-through," so it never
	# blocks mouse events intended for buttons or objects underneath it.
	cursor_sprite.mouse_filter = Control.MOUSE_FILTER_IGNORE

	add_child(cursor_sprite)

func _process(_delta):
	# On every frame, our custom cursor's position is synced to the real mouse position.
	cursor_sprite.position = get_viewport().get_mouse_position()

# Public function to change the cursor's appearance (e.g., when hovering a button).
func set_pointer_state(is_pointing: bool):
	if is_pointing:
		cursor_sprite.texture = CURSOR_POINTER
	else:
		cursor_sprite.texture = CURSOR_DEFAULT

=====================================
FILE: ./src/core/data/combat_db.gd
=====================================
# src/core/data/combat_db.gd
# This autoload provides global access to the combat config resource.
# It loads the config at runtime in _ready() to be robust against parse-order issues.
extends Node

const CONFIG_PATH: String = "res://data/combat_config.tres"
var config: CombatConfig = null

func _ready() -> void:
	config = load(CONFIG_PATH) as CombatConfig
	if not config:
		push_error("CombatDB: Failed to load CombatConfig at %s" % CONFIG_PATH)

=====================================
FILE: ./src/core/data/config/settings.gd
=====================================
# src/core/settings.gd
#
# This script is a "Singleton" (also known as an "Autoload" in Godot).
# It now emits a signal whenever an audio setting is changed, allowing other
# systems like the AudioManager to react efficiently without polling.
extends Node

# NEW: A signal that is emitted whenever any audio setting is changed.
signal audio_settings_changed

# --- Audio Settings ---
# The variables have been converted to properties with setters. This allows us
# to run code (emitting the signal) whenever their values are changed.

@export var master_volume: float = 1.0:
	set(value):
		# MODIFIED: Added validation to clamp the value between 0.0 and 1.0
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(master_volume, clamped_value):
			master_volume = clamped_value
			audio_settings_changed.emit()

@export var music_volume: float = 1.0:
	set(value):
		# MODIFIED: Added validation to clamp the value between 0.0 and 1.0
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(music_volume, clamped_value):
			music_volume = clamped_value
			audio_settings_changed.emit()

@export var sfx_volume: float = 1.0:
	set(value):
		# MODIFIED: Added validation to clamp the value between 0.0 and 1.0
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(sfx_volume, clamped_value):
			sfx_volume = clamped_value
			audio_settings_changed.emit()

@export var master_muted: bool = false:
	set(value):
		if master_muted != value:
			master_muted = value
			audio_settings_changed.emit()

@export var music_muted: bool = true:
	set(value):
		if music_muted != value:
			music_muted = value
			audio_settings_changed.emit()

@export var sfx_muted: bool = false:
	set(value):
		if sfx_muted != value:
			sfx_muted = value
			audio_settings_changed.emit()

=====================================
FILE: ./src/core/data/config/combat_config.gd
=====================================
# src/core/data/config/combat_config.gd
# A single, flat Resource that exposes all combat tuning values.
class_name CombatConfig
extends Resource

@export_group("General Physics")
@export var gravity: float = 1200.0

@export_group("Player Physics")
@export var player_speed: float = 450.0
@export var player_jump_force: float = 680.0
@export var player_pogo_force: float = 450.0
@export var player_coyote_time: float = 0.1
@export var player_jump_buffer: float = 0.1
@export var player_jump_release_dampener: float = 0.4
@export var player_wall_coyote_time: float = 0.05
@export var player_fast_fall_gravity_multiplier: float = 1.4
@export var player_max_air_jumps: int = 0
@export var player_dash_speed: float = 1400.0
@export var player_dash_duration: float = 0.15
@export var player_dash_cooldown: float = 0.5
@export var player_wall_slide_speed: float = 120.0
@export var player_wall_jump_force_x: float = 1650.0
@export var player_wall_jump_force_y: float = 680.0

@export_group("Player Combat")
@export var player_attack_cooldown: float = 0.12
@export var player_charge_time: float = 0.35
@export var player_attack_duration: float = 0.1
@export var player_attack_friction: float = 2000.0
@export var player_knockback_speed: float = 700.0
@export var player_knockback_duration: float = 0.1
@export var player_hazard_knockback_speed: float = 400.0
@export var player_determination_per_charge: int = 10

@export_group("Player Health / Healing")
@export var player_max_health: int = 5
@export var player_heal_duration: float = 2.0
@export var player_max_healing_charges: int = 1
@export var player_invincibility_duration: float = 1.5

@export_group("Boss")
@export var boss_health: int = 30
@export var boss_patrol_speed: float = 100.0
@export var boss_invincibility_duration: float = 0.1

=====================================
FILE: ./src/core/data/game_state_data.gd
=====================================
# src/core/data/game_state_data.gd
#
# A Resource that holds all shared runtime state for the game session.
# This standardizes our state management to follow the same pattern as
# PlayerStateData and BossStateData.
class_name GameStateData
extends Resource

# The resource path to the encounter script for the next level to be loaded.
var current_encounter_script_path: String = ""

# A reference to the fully constructed, but currently hidden, level node.
# This is used by the loading screen to pass the level to the game scene.
var prebuilt_level: Node = null

=====================================
FILE: ./src/core/DEPRECATION.md
=====================================
# Core Subsystem Deprecation Map

This document tracks file renames and moves specifically within `src/core`.

| Old Path | New Path | Reason | Date | Migration Note |
|---|---|---|---|---|
| `res://src/core/data/Config.gd` | `res://src/core/data/config/config.gd` | Naming convention and grouping. | 2025-08-10 | Autoload path was updated in `project.godot`. |
| `res://src/core/data/settings.gd` | `res://src/core/data/config/settings.gd` | Grouped with other data configs. | 2025-08-10 | Autoload path was updated in `project.godot`. |

=====================================
FILE: ./src/core/building/level_parser.gd
=====================================
# src/core/building/level_parser.gd
#
# Responsibility: To parse the raw data from layout and encounter scripts and
# organize it into a structured LevelBuildData object. This class is now also
# responsible for loading the layout script and validating the data.
class_name LevelParser
extends RefCounted

# MODIFIED: This function is now smarter and more robust. It only needs the
# encounter_script and will handle loading and validating the layout script itself.
func parse_level_data(encounter_script: Script) -> LevelBuildData:
	var data = LevelBuildData.new()
	if not is_instance_valid(encounter_script):
		push_error("LevelParser: Received an invalid encounter script.")
		return data # Return empty data object

	data.encounter_script_object = encounter_script

	# --- NEW: Validation Step 1: Get Layout Path ---
	var constants_map = encounter_script.get_script_constant_map()
	if not constants_map.has("LAYOUT_SCRIPT_PATH"):
		push_error("LevelParser: Encounter script '%s' is missing 'LAYOUT_SCRIPT_PATH' constant." % encounter_script.resource_path)
		return data

	var layout_path: String = constants_map["LAYOUT_SCRIPT_PATH"]

	# --- NEW: Validation Step 2: Load Layout Script ---
	var layout_script: Script = load(layout_path)
	if not is_instance_valid(layout_script):
		push_error("LevelParser: Failed to load layout script at path defined in encounter: %s" % layout_path)
		return data

	# --- Original Parsing Logic (now guaranteed to have valid data) ---
	for y in range(layout_script.TERRAIN_DATA.size()):
		var row_string: String = layout_script.TERRAIN_DATA[y]
		for x in range(row_string.length()):
			var tile_char: String = row_string[x]
			var tile_pos := Vector2(x * Constants.TILE_SIZE, y * Constants.TILE_SIZE) + Vector2(Constants.TILE_SIZE / 2.0, Constants.TILE_SIZE / 2.0)

			match tile_char:
				'#':
					data.terrain_tiles.append(tile_pos)
				'-':
					data.oneway_platforms.append(tile_pos)
				'^':
					data.hazard_tiles.append(tile_pos)
				_:
					if tile_char == encounter_script.PLAYER_SPAWN_MARKER:
						data.player_spawn_pos = tile_pos
					elif tile_char == encounter_script.BOSS_SPAWN_MARKER:
						data.boss_spawn_pos = tile_pos
	
	return data

=====================================
FILE: ./src/core/building/terrain_builder.gd
=====================================
# src/core/builders/terrain_builder.gd
#
# Responsibility: To create all static level geometry (solid tiles,
# one-way platforms, hazards) based on parsed LevelBuildData. It now also
# creates the visual representation for each tile using the Palette.
class_name TerrainBuilder
extends RefCounted

# The main public method. It takes the parent node, the data, and a valid
# SceneTree reference, then builds the tiles asynchronously in batches.
func build_terrain_async(parent_node: Node, build_data: LevelBuildData, tree: SceneTree) -> void:
	const BATCH_SIZE = 20 # How many tiles to create before yielding a frame.

	for i in range(build_data.terrain_tiles.size()):
		_create_solid_tile(parent_node, build_data.terrain_tiles[i])
		if i % BATCH_SIZE == 0:
			await tree.process_frame

	for i in range(build_data.oneway_platforms.size()):
		_create_oneway_platform(parent_node, build_data.oneway_platforms[i])
		if i % BATCH_SIZE == 0:
			await tree.process_frame

	for i in range(build_data.hazard_tiles.size()):
		_create_hazard_tile(parent_node, build_data.hazard_tiles[i])
		if i % BATCH_SIZE == 0:
			await tree.process_frame
	
	await tree.process_frame

# --- Tile Creation Functions (Now with Visuals) ---

func _create_solid_tile(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = 2 # 'world' layer
	static_body.add_to_group("world")
	
	var collision_shape := CollisionShape2D.new()
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	collision_shape.shape = rectangle_shape
	static_body.add_child(collision_shape)
	
	# PALETTE INTEGRATION: Add a visible ColorRect.
	var visual_rect := ColorRect.new()
	visual_rect.color = Palette.COLOR_TERRAIN_PRIMARY
	visual_rect.size = rectangle_shape.size
	visual_rect.position = -rectangle_shape.size / 2.0 # Center the rect on the body's origin
	static_body.add_child(visual_rect)
	
	parent_node.add_child(static_body)

func _create_oneway_platform(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = 2 # 'world' layer
	static_body.add_to_group("world")
	static_body.add_to_group("oneway_platforms")
	
	var collision_shape := CollisionShape2D.new()
	collision_shape.one_way_collision = true
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, 10)
	collision_shape.shape = rectangle_shape
	collision_shape.position.y = -(Constants.TILE_SIZE / 2.0) + (rectangle_shape.size.y / 2.0)
	static_body.add_child(collision_shape)

	# PALETTE INTEGRATION: Add a visible ColorRect that matches the thin platform.
	var visual_rect := ColorRect.new()
	visual_rect.color = Palette.COLOR_TERRAIN_SECONDARY
	visual_rect.size = rectangle_shape.size
	visual_rect.position = Vector2(-rectangle_shape.size.x / 2.0, collision_shape.position.y - (rectangle_shape.size.y / 2.0))
	static_body.add_child(visual_rect)
	
	parent_node.add_child(static_body)

func _create_hazard_tile(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = 10 # world | hazard
	static_body.add_to_group("world")
	static_body.add_to_group("hazard")
	
	var collision_shape := CollisionShape2D.new()
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	collision_shape.shape = rectangle_shape
	static_body.add_child(collision_shape)
	
	# PALETTE INTEGRATION: Add a visible ColorRect using the hazard color.
	var visual_rect := ColorRect.new()
	visual_rect.color = Palette.COLOR_HAZARD_PRIMARY
	visual_rect.size = rectangle_shape.size
	visual_rect.position = -rectangle_shape.size / 2.0
	static_body.add_child(visual_rect)
	
	parent_node.add_child(static_body)


=====================================
FILE: ./src/core/building/level_build_data.gd
=====================================
# src/core/builders/level_build_data.gd
#
# A custom Resource script that acts as a data container. Its only purpose is to
# hold all the parsed information about a level in one clean, portable object.
# This prevents us from having to pass many individual arrays and variables between
# our different builder classes.
class_name LevelBuildData
extends Resource

var terrain_tiles: Array[Vector2] = []
var oneway_platforms: Array[Vector2] = []
var hazard_tiles: Array[Vector2] = []
var player_spawn_pos: Vector2 = Vector2.ZERO
var boss_spawn_pos: Vector2 = Vector2.ZERO
var encounter_script_object: Object = null

=====================================
FILE: ./src/core/building/encounter_director.gd
=====================================
# src/core/building/encounter_director.gd
#
# Responsibility: To spawn all dynamic entities (Player, Boss, HUD) and to
# direct the flow of the encounter, such as running an intro sequence.
class_name EncounterDirector
extends RefCounted

# --- Stored References ---
var _parent_node: Node
var _build_data: LevelBuildData
var _tree: SceneTree

# The main public method. It takes the parent node, the data, and a valid
# SceneTree reference, then spawns the entities asynchronously.
func spawn_entities_async(parent_node: Node, build_data: LevelBuildData, tree: SceneTree) -> void:
	# Store references for use in other functions
	_parent_node = parent_node
	_build_data = build_data
	_tree = tree

	# Spawn the essential non-sequenced entities first.
	await _spawn_player_async()
	await _spawn_hud_async()

	# Run the scripted intro sequence for the boss.
	await run_intro_sequence()


# --- Entity Spawning Functions ---

func _spawn_player_async() -> void:
	var player_instance = load(AssetPaths.SCENE_PLAYER).instantiate()
	player_instance.global_position = _build_data.player_spawn_pos
	_parent_node.add_child(player_instance)
	await _tree.process_frame

func _spawn_boss_async() -> Node:
	var boss_scene: PackedScene = _build_data.encounter_script_object.BOSS_SCENE if _build_data.encounter_script_object else null
	if not boss_scene:
		push_error("EncounterDirector: Could not find BOSS_SCENE in encounter script.")
		return null

	var boss_instance = boss_scene.instantiate()
	boss_instance.global_position = _build_data.boss_spawn_pos
	_parent_node.add_child(boss_instance)
	await _tree.process_frame
	return boss_instance

func _spawn_hud_async() -> void:
	var hud_instance = load(AssetPaths.SCENE_GAME_HUD).instantiate()
	_parent_node.add_child(hud_instance)
	await _tree.process_frame


# --- Sequencer Implementation ---

# Defines and runs the sequence for the boss's grand entrance.
func run_intro_sequence() -> void:
	# SIMPLIFIED: The pause/resume logic was a broken feature and has been removed.
	# The intro now simply waits before spawning the boss.
	var wait_step = WaitStep.new()
	wait_step.duration = 0.5

	var intro_steps: Array[SequenceStep] = [wait_step]
	await Sequencer.run_sequence(intro_steps)

	# Manually spawn the boss to get the node reference.
	var _boss_node = await _spawn_boss_async()

=====================================
FILE: ./src/core/building/arena_builder.gd
=====================================
# src/core/building/arena_builder.gd
#
# This singleton is now a high-level "Coordinator". Its single responsibility
# is to manage the overall process of level construction by delegating tasks
# to specialized builder classes.
extends Node

func build_level_async() -> Node:
	var level_container := Node.new()
	level_container.name = "LevelContainer"

	# --- 1. Load Encounter Data ---
	var encounter_path: String = GameManager.state.current_encounter_script_path
	if encounter_path.is_empty():
		push_error("ArenaBuilder: No encounter script specified in GameManager.")
		return level_container
		
	var encounter_script: Script = load(encounter_path)
	if not is_instance_valid(encounter_script):
		push_error("ArenaBuilder: Failed to load encounter script at: %s" % encounter_path)
		return level_container
		
	# --- 2. Parse Data (Now much simpler) ---
	# The parser now handles all the sub-loading and validation.
	var parser = LevelParser.new()
	var build_data = parser.parse_level_data(encounter_script)
	
	await get_tree().process_frame

	# --- 3. Build Terrain ---
	var terrain_builder = TerrainBuilder.new()
	await terrain_builder.build_terrain_async(level_container, build_data, get_tree())

	# --- 4. Spawn Entities ---
	var encounter_director = EncounterDirector.new()
	await encounter_director.spawn_entities_async(level_container, build_data, get_tree())

	# --- 5. Finalize ---
	await get_tree().process_frame
	
	return level_container

=====================================
FILE: ./src/arenas/arena_00_layout.gd
=====================================
# src/arenas/arena_00_layout.gd
#
# This file defines the physical terrain for Arena 00.
# It is a simple, open box for testing and debugging.
extends Node

# --- COORDINATE LEGEND ---
#
#    A B C D E F G H I J K L M N O P Q R S T
# 1  # # # # # # # # # # # # # # # # # # # #
# 2  # . . . . . . . . . . . . . . . . . . #
# 3  # . . . . @ . . . . . . . . . . . . . #
# 4  # . . . . . . . . . . . . & . . . . . #
# 5  # . . . . . . . . . # - - # . . . . . #
# 6  # . . . . . . . . . # . . # . . . . . #
# 7  # . . . . . . . . . # - - # . . . . . #
# 8  # . . . . . . . . . # . . # . . . . . #
# 9  # . . . . . . . . . # . . # . . . . . #
# 10 # . . . . . . . . . # . . # . . . . . #
# 11 # . . . . . . . . . . . . . . . . . . #
# 12 # . . . . . . . . . . . . . . . . . . #
# 13 # . . . . . . . . . # # # # . . . . . #
# 14 # . . . . . . . . . # # # # . . . . . #
# 15 # . . . . . . . . . # # # # . . . . . #
# 16 # # # # . . . . . . # # # # . . . . . #
# 17 # # # # . . . . . . # # # # . . . . . #
# 18 # # # # . . . . . . . . . . . . . . . #
# 19 # . . . . . . . . . . . . . . . . . . #
# 20 # # # # # # # # # # # # # # # ^ ^ ^ # #
#
# --- TERRAIN LEGEND ---
# # = Solid Wall/Floor
# - = Oneway Platform
# ^ = Hazard
# . = Empty Space
#
# --- ENTITY MARKERS (For visual reference only) ---
# @ = Player Spawn
# & = Boss Spawn
#
const TERRAIN_DATA = [
	"####################", # 1
	"#..................#", # 2
	"#....@.............#", # 3
	"#............&.....#", # 4
	"#.........#--#.....#", # 5
	"#.........#..#.....#", # 6
	"#.........#--#.....#", # 7
	"#.........#..#.....#", # 8
	"#.........#..#.....#", # 9
	"#.........#..#.....#", # 10
	"#..................#", # 11
	"#..................#", # 12
	"#.........####.....#", # 13
	"#.........####.....#", # 14
	"#.........####.....#", # 15
	"####......####.....#", # 16
	"####......####.....#", # 17
	"####...............#", # 18
	"#..................#", # 19
	"###############^^^##"  # 20
]


=====================================
FILE: ./src/arenas/arena_00_encounter.gd
=====================================
# src/arenas/arena_00_encounter.gd
#
# This file defines the dynamic entities and patterns for Arena 00.
# It acts as a "level script" or "director" for the fight.
extends Node

# --- NEW: DATA-DRIVEN LAYOUT ---
# This constant explicitly defines which layout file this encounter uses.
# The ArenaBuilder will read this path directly, removing any assumptions
# about file naming conventions.
const LAYOUT_SCRIPT_PATH = "res://src/arenas/arena_00_layout.gd"

# --- BOSS DATA ---
const BOSS_SCENE = preload(AssetPaths.SCENE_BASE_BOSS)
const BOSS_SPAWN_MARKER = "&"

# --- PLAYER DATA ---
const PLAYER_SPAWN_MARKER = "@"

=====================================
FILE: ./src/api/interfaces/i_damageable.gd
=====================================
# src/api/interfaces/i_damageable.gd
#
# The "Interface" contract for any object in the game that can take damage.
# Any script that inherits from this must implement the apply_damage function.
#
# In GDScript, this is a conceptual interface. We check for compliance
# by using `target.has_method("apply_damage")`.
extends Node

# --- The Contract ---
#
# func apply_damage(damage_amount: int, damage_source: Node = null, bypass_invincibility: bool = false) -> Dictionary:
#   must return a dictionary, e.g., {"was_damaged": bool, "knockback_velocity": Vector2}
#


=====================================
FILE: ./src/api/interfaces/component_interface.gd
=====================================
# src/api/interfaces/component_interface.gd
#
# This script defines the formal "contract" or "interface" for all components
# in the project (HealthComponent, CombatComponent, etc.).
class_name ComponentInterface
extends Node

# The setup function is now more flexible.
# It takes the owner and an optional dictionary for any other dependencies.
# MODIFIED: Prefixed parameters with an underscore to silence UNUSED_PARAMETER
# warnings, as this base implementation is intentionally empty.
func setup(_p_owner: Node, _p_dependencies: Dictionary = {}) -> void:
	pass

func teardown() -> void:
	pass


=====================================
FILE: ./src/projectiles/player_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cmdkxwvysirh1"]

[ext_resource type="Script" path="res://src/projectiles/player_shot.gd" id="1_4wg7x"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playershot"]
size = Vector2(40, 40)

[node name="PlayerShot" type="Area2D" groups=["player_projectile"]]
collision_layer = 0
collision_mask = 22
script = ExtResource("1_4wg7x")

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
color = Color(0.92549, 0.92549, 0.92549, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_playershot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-20, -20, 40, 40)

[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/boss_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cxnmr7yrvchve"]

[ext_resource type="Script" path="res://src/projectiles/boss_shot.gd" id="1_4qgog"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bossshot"]
size = Vector2(60, 60)

[node name="BossShot" type="Area2D"]
collision_layer = 16
collision_mask = 0
script = ExtResource("1_4qgog")

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0.8, 0.4, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_bossshot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-30, -30, 60, 60)

[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/player_shot.gd
=====================================
# src/projectiles/player_shot.gd
#
# Final, stable pool-aware version.
extends Area2D

@onready var collision_shape: CollisionShape2D = $CollisionShape2D

var direction = Vector2.RIGHT
var speed = 1000.0
var damage = 2

func _ready():
	$ColorRect.color = Palette.COLOR_PLAYER_PROJECTILE
	body_entered.connect(_on_body_entered)
	area_entered.connect(_on_area_entered)

func activate():
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

func deactivate():
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000) # Move to the graveyard

func _physics_process(delta):
	global_position += direction * speed * delta

# MODIFIED: Now uses the robust CombatUtils to find any damageable target.
func _on_body_entered(body):
	var damageable = CombatUtils.find_damageable(body)
	if damageable:
		damageable.apply_damage(damage, self)
	
	ObjectPool.return_instance(self)

func _on_area_entered(area):
	if area.is_in_group("enemy_projectile"):
		ObjectPool.return_instance(area)
	ObjectPool.return_instance(self)

func _on_screen_exited():
	ObjectPool.return_instance(self)


=====================================
FILE: ./src/projectiles/boss_shot.gd
=====================================
# src/projectiles/boss_shot.gd
#
# Final, stable pool-aware version.
extends Area2D

@onready var collision_shape: CollisionShape2D = $CollisionShape2D

var direction = Vector2.LEFT
var speed = 400.0

func _ready():
	$ColorRect.color = Palette.COLOR_HAZARD_PRIMARY
	add_to_group("enemy_projectile")

func activate():
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

func deactivate():
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000) # Move to the graveyard

func _physics_process(delta):
	global_position += direction * speed * delta

func _on_screen_exited():
	ObjectPool.return_instance(self)

=====================================
FILE: ./src/entities/boss/boss_state_data.gd
=====================================
# src/entities/boss/data/boss_state_data.gd
#
# A Resource that holds all shared state data for the Boss.
class_name BossStateData
extends Resource

# --- Health & Combat ---
var max_health: int = 30
var health: int = 30:
	set(value):
		health = clamp(value, 0, max_health)

var is_invincible: bool = false
var current_attack: int # Using the enum from base_boss.gd

# --- Physics & Movement ---
var facing_direction: float = -1.0
var patrol_speed: float = 100.0

=====================================
FILE: ./src/entities/boss/base_boss.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://dmej4a7ykn2q0"]

[ext_resource type="Script" path="res://src/entities/boss/base_boss.gd" id="1_26qjf"]
[ext_resource type="Script" path="res://src/entities/components/health_component.gd" id="2_b0so8"]
[ext_resource type="Script" path="res://src/entities/components/base_state_machine.gd" id="3_fsm"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bossbody"]
size = Vector2(60, 60)

[node name="BaseBoss" type="CharacterBody2D"]
collision_layer = 12
collision_mask = 3
script = ExtResource("1_26qjf")

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0.6, 0.6, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_bossbody")

[node name="CooldownTimer" type="Timer" parent="."]
wait_time = 1.5
one_shot = true

[node name="PatrolTimer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_b0so8")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("3_fsm")

[connection signal="timeout" from="CooldownTimer" to="." method="_on_cooldown_timer_timeout"]
[connection signal="timeout" from="PatrolTimer" to="." method="_on_patrol_timer_timeout"]

=====================================
FILE: ./src/entities/boss/states/state_boss_idle.gd
=====================================
# src/entities/boss/states/state_boss_idle.gd
# The state for when the boss is pausing before an attack.
extends BaseState
class_name BossStateIdle

func enter(_msg := {}):
	owner.velocity.x = 0
	state_machine.change_state(owner.State.ATTACK)

func process_physics(_delta: float):
	# This state is instantaneous, so it does nothing in the physics process.
	pass


=====================================
FILE: ./src/entities/boss/states/state_boss_cooldown.gd
=====================================
# src/entities/boss/states/state_boss_cooldown.gd
# The state for when the boss is waiting after an attack.
extends BaseState
class_name BossStateCooldown

func enter(_msg := {}):
	owner.velocity.x = 0
	owner.cooldown_timer.start()

func process_physics(_delta: float):
	# The state itself does nothing; it's just waiting for the timer.
	pass


=====================================
FILE: ./src/entities/boss/states/state_boss_attack.gd
=====================================
# src/entities/boss/states/state_boss_attack.gd
# This state executes an attack and immediately transitions to Cooldown.
extends BaseState
class_name BossStateAttack

func enter(_msg := {}):
	var attack_keys = owner.AttackPattern.keys()
	var chosen_attack_name = attack_keys[randi() % attack_keys.size()]
	
	state_data.current_attack = owner.AttackPattern[chosen_attack_name]
	
	match state_data.current_attack:
		owner.AttackPattern.SINGLE_SHOT:
			owner.fire_shot_at_player()
		owner.AttackPattern.VOLLEY_SHOT:
			var tween = owner.get_tree().create_tween()
			tween.tween_callback(owner.fire_shot_at_player)
			tween.tween_interval(0.2)
			tween.tween_callback(owner.fire_shot_at_player)
			tween.tween_interval(0.2)
			tween.tween_callback(owner.fire_shot_at_player)
			
	state_machine.change_state(owner.State.COOLDOWN)

func process_physics(_delta: float):
	# This state is instantaneous, so it does nothing in the physics process.
	pass


=====================================
FILE: ./src/entities/boss/states/state_boss_patrol.gd
=====================================
# src/entities/boss/states/state_boss_patrol.gd
# The state responsible for the boss's back-and-forth movement.
extends BaseState
class_name BossStatePatrol

func enter(_msg := {}):
	owner.patrol_timer.start()

func process_physics(_delta: float):
	owner.velocity.x = state_data.facing_direction * state_data.patrol_speed


=====================================
FILE: ./src/entities/boss/base_boss.gd
=====================================
# src/entities/boss/base_boss.gd
# This is the "Context" for the Boss State Machine. It now delegates all
# state management logic to its StateMachine child node.
extends CharacterBody2D

# --- Signals ---
signal health_changed(current_health, max_health)
signal died

# --- Enums ---
enum State { IDLE, ATTACK, COOLDOWN, PATROL }
enum AttackPattern { SINGLE_SHOT, VOLLEY_SHOT }

# --- Node References ---
@onready var visual_sprite: ColorRect = $ColorRect
@onready var cooldown_timer: Timer = $CooldownTimer
@onready var patrol_timer: Timer = $PatrolTimer
@onready var health_component: HealthComponent = $HealthComponent
@onready var state_machine: BaseStateMachine = $StateMachine

# --- Data ---
var b_data: BossStateData

# --- Boss Properties ---
var player: CharacterBody2D = null

# --- Engine Functions ---
func _ready():
	add_to_group("enemy")
	
	b_data = BossStateData.new()
	b_data.patrol_speed = CombatDB.config.boss_patrol_speed
	
	visual_sprite.color = Palette.COLOR_BOSS_PRIMARY
	
	health_component.setup(self, {
		"data_resource": b_data,
		"config": CombatDB.config
	})
	health_component.health_changed.connect(_on_health_component_health_changed)
	health_component.died.connect(_on_health_component_died)

	player = get_tree().get_first_node_in_group("player")
	
	var states = {
		State.IDLE: BossStateIdle.new(self, state_machine, b_data),
		State.ATTACK: BossStateAttack.new(self, state_machine, b_data),
		State.COOLDOWN: BossStateCooldown.new(self, state_machine, b_data),
		State.PATROL: BossStatePatrol.new(self, state_machine, b_data),
	}
	
	state_machine.setup(states, State.COOLDOWN)

func _notification(what):
	if what == NOTIFICATION_PREDELETE:
		if state_machine: state_machine.teardown()
		if health_component: health_component.teardown()
		b_data = null

func _physics_process(delta):
	if not is_on_floor():
		velocity.y += CombatDB.config.gravity * delta
	
	# The state machine automatically calls process_physics on the current state.
	move_and_slide()
	
	if state_machine.current_state == state_machine.states[State.PATROL] and is_on_wall():
		b_data.facing_direction *= -1.0

# --- Public Methods ---
func die():
	died.emit()
	queue_free()

# --- Internal Functions ---
func _update_player_tracking():
	if is_instance_valid(player):
		var direction_to_player = player.global_position.x - global_position.x
		if not is_zero_approx(direction_to_player):
			b_data.facing_direction = sign(direction_to_player)
	self.scale.x = b_data.facing_direction
	
func fire_shot_at_player():
	if not is_instance_valid(player): return
	
	var shot_instance = ObjectPool.get_instance(&"boss_shots")
	if not shot_instance: return
	
	_update_player_tracking()
	var direction_to_player = (player.global_position - global_position).normalized()
	shot_instance.direction = direction_to_player
	
	shot_instance.global_position = global_position
	shot_instance.activate()
	
# --- Signal Handlers ---
func _on_cooldown_timer_timeout():
	if state_machine.current_state == state_machine.states[State.COOLDOWN]:
		state_machine.change_state(State.PATROL)

func _on_patrol_timer_timeout():
	if state_machine.current_state == state_machine.states[State.PATROL]:
		state_machine.change_state(State.IDLE)
		
func _on_health_component_health_changed(current, max_val):
	var ev = BossHealthChangedEvent.new()
	ev.current_health = current
	ev.max_health = max_val
	# CORRECTED: Removed the third argument (`self`).
	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev)
	health_changed.emit(current, max_val)

func _on_health_component_died():
	die()


=====================================
FILE: ./src/entities/README.md
=====================================
# Entities

This directory contains the logic for all dynamic game objects, such as the Player and Bosses.

## Architecture

Entities follow a **Component-Based Architecture** combined with a **State Machine**.

-   **Context Node (`player.gd`, `base_boss.gd`)**: The root node of the entity scene. Its primary job is to hold the components and manage the current state. It delegates all logic to its children.
-   **Data Resource (`player_state_data.gd`)**: A `Resource` file that holds all of the entity's state variables (health, timers, flags). This allows states and components to share data without needing a direct reference to the main node or each other.
-   **Components (`health_component.gd`, etc.)**: Child nodes that encapsulate a single area of responsibility (e.g., managing health, handling input). They operate on the shared `Data Resource`.
-   **States (`state_move.gd`, etc.)**: Classes that define specific behaviors. The active state is managed by the Context Node.

Components communicate with their owner by emitting signals, which the context node listens for and reacts to. This keeps the component's responsibility focused solely on its own logic.

## Adding a New State

1.  Create a new script in the entity's `states` directory that inherits from `PlayerState` or `BossState`.
2.  Implement the required `enter()`, `exit()`, and `process_physics()` methods.
3.  Add the new state to the `State` enum in the context node script (`player.gd`).
4.  Instantiate the new state in the `states` dictionary in the context node's `_ready()` function.
5.  Call `change_state(State.YOUR_NEW_STATE)` from another state to transition to it.

=====================================
FILE: ./src/entities/components/base_state_machine.gd
=====================================
# src/entities/components/base_state_machine.gd
#
# A reusable, node-based state machine manager. An entity (like Player or Boss)
# will own this node and use it to manage its states.
class_name BaseStateMachine
extends Node

var states: Dictionary = {}
var current_state: BaseState
var owner_node: Node

func _ready():
	owner_node = get_parent()

func _unhandled_input(event: InputEvent):
	if current_state:
		current_state.process_input(event)

func _physics_process(delta: float):
	if current_state:
		current_state.process_physics(delta)

func setup(p_states: Dictionary, p_initial_state_key):
	self.states = p_states
	change_state(p_initial_state_key)

# CORRECTED: The teardown function is restored.
func teardown():
	if current_state:
		current_state.exit()
	# Call teardown on each individual state to break cyclic references.
	for state in states.values():
		if state.has_method("teardown"):
			state.teardown()
	states.clear()
	current_state = null

func change_state(new_state_key, msg := {}):
	if not states.has(new_state_key):
		push_warning("StateMachine: Attempted to change to unknown state '%s'." % new_state_key)
		return

	if current_state == states[new_state_key]:
		return

	if current_state:
		current_state.exit()

	current_state = states[new_state_key]
	current_state.enter(msg)

func _exit_tree():
	# Call teardown on exit to be safe, though the owner should call it first.
	teardown()

=====================================
FILE: ./src/entities/components/combat_component.gd
=====================================
# src/entities/components/combat_component.gd
#
# A component that handles the execution of the player's combat abilities.
# It is now decoupled and emits signals for its owner to react to.
class_name CombatComponent
extends ComponentInterface

signal damage_dealt
signal pogo_bounce_requested

var owner_node: CharacterBody2D
var p_data: PlayerStateData

# MODIFIED: Signature now matches the parent ComponentInterface.
func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	
	# Pull required dependencies from the dictionary.
	self.p_data = p_dependencies.get("data_resource")
	
	if not p_data:
		push_error("CombatComponent.setup: Missing required dependency ('data_resource').")
		return

func teardown() -> void:
	owner_node = null
	p_data = null

func fire_shot():
	p_data.attack_cooldown_timer = CombatDB.config.player_attack_cooldown
	
	var shot = ObjectPool.get_instance(&"player_shots")
	if not shot: return
	
	var shot_dir = Vector2(p_data.facing_direction, 0)
	if Input.is_action_pressed("ui_up"): shot_dir = Vector2.UP
	elif Input.is_action_pressed("ui_down"): shot_dir = Vector2.DOWN
	
	shot.direction = shot_dir
	shot.global_position = owner_node.global_position + (shot_dir * 60)
	shot.activate()

func trigger_pogo(pogo_target) -> bool:
	# CORRECTED: Fixed the typo from p_ogo_target to pogo_target.
	if not is_instance_valid(pogo_target):
		return false

	var should_bounce = false
	
	# Can bounce on projectiles.
	if p_data.is_pogo_attack and pogo_target.is_in_group("enemy_projectile"):
		should_bounce = true
		ObjectPool.return_instance(pogo_target)
	
	# Can bounce on enemies and deal damage.
	var damageable = CombatUtils.find_damageable(pogo_target)
	if damageable:
		should_bounce = true
		var damage_result = damageable.apply_damage(1, owner_node, true)
		if damage_result["was_damaged"]:
			damage_dealt.emit()

	# Can bounce on the ground or any solid world tile.
	if pogo_target is StaticBody2D and pogo_target.is_in_group("world"):
		should_bounce = true

	if should_bounce:
		pogo_bounce_requested.emit()
		return true

	return false


=====================================
FILE: ./src/entities/components/health_component.gd
=====================================
# src/entities/components/health_component.gd
#
# A component responsible for managing an entity's health, damage intake,
# invincibility, and death. It is now the single source of truth for the
# invincibility timer.
class_name HealthComponent
extends ComponentInterface

signal health_changed(current_health: int, max_health: int)
signal died

var entity_data: Resource
var owner_node: CharacterBody2D

@onready var invincibility_timer: Timer = Timer.new()
@onready var hit_flash_timer: Timer = Timer.new()

var max_health: int
var invincibility_duration: float
var knockback_speed: float
var hazard_knockback_speed: float
var original_color: Color

const IDamageable = preload("res://src/api/interfaces/i_damageable.gd")

func _ready():
	add_child(invincibility_timer)
	add_child(hit_flash_timer)
	invincibility_timer.one_shot = true
	hit_flash_timer.one_shot = true
	hit_flash_timer.wait_time = 0.4
	
	invincibility_timer.timeout.connect(func(): 
		entity_data.is_invincible = false
	)
	hit_flash_timer.timeout.connect(_on_hit_flash_timer_timeout)

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	self.entity_data = p_dependencies.get("data_resource")
	var cfg: CombatConfig = p_dependencies.get("config")
	
	if not entity_data or not cfg:
		push_error("HealthComponent.setup: Missing required dependencies ('data_resource', 'config').")
		return

	if owner_node.is_in_group("player"):
		max_health = cfg.player_max_health
		invincibility_duration = cfg.player_invincibility_duration
		knockback_speed = cfg.player_knockback_speed
		hazard_knockback_speed = cfg.player_hazard_knockback_speed
	else: # Assumes enemy/boss
		max_health = cfg.boss_health
		invincibility_duration = cfg.boss_invincibility_duration
		knockback_speed = 0
		hazard_knockback_speed = 0
	
	entity_data.health = max_health
	if is_instance_valid(get_visual_sprite()):
		original_color = get_visual_sprite().color
	
	health_changed.emit(entity_data.health, max_health)

func teardown() -> void:
	entity_data = null
	owner_node = null

func apply_damage(damage_amount: int, damage_source: Node = null, p_bypass_invincibility: bool = false) -> Dictionary:
	var is_dash_invincible = entity_data.get("is_dash_invincible") if "is_dash_invincible" in entity_data else false
	
	if (entity_data.is_invincible or is_dash_invincible) and not p_bypass_invincibility:
		return {"was_damaged": false, "knockback_velocity": Vector2.ZERO}

	entity_data.health -= damage_amount
	health_changed.emit(entity_data.health, entity_data.max_health)
	
	_trigger_hit_flash()
	
	entity_data.is_invincible = true
	invincibility_timer.start(invincibility_duration)
	
	var knockback_info = _calculate_knockback(damage_source)
	
	if entity_data.health <= 0:
		died.emit()
		
	return {"was_damaged": true, "knockback_velocity": knockback_info}

func _calculate_knockback(damage_source: Node) -> Vector2:
	if knockback_speed == 0 or not damage_source:
		return Vector2.ZERO
		
	var knockback_dir = (owner_node.global_position - damage_source.global_position).normalized()
	
	var speed = knockback_speed
	if damage_source.is_in_group("hazard"):
		speed = hazard_knockback_speed
		
	return (knockback_dir + Vector2.UP * 0.5).normalized() * speed

func _trigger_hit_flash():
	if is_instance_valid(get_visual_sprite()):
		get_visual_sprite().color = Palette.get_color(16)
		hit_flash_timer.start()

func get_visual_sprite() -> ColorRect:
	if is_instance_valid(owner_node):
		return owner_node.get_node_or_null("ColorRect")
	return null

func _on_hit_flash_timer_timeout():
	if is_instance_valid(get_visual_sprite()):
		get_visual_sprite().color = original_color


=====================================
FILE: ./src/entities/components/input_component.gd
=====================================
# src/entities/components/input_component.gd
#
# A component that centralizes all input polling and processing for the player.
class_name InputComponent
extends ComponentInterface

var owner_node: CharacterBody2D
var p_data: PlayerStateData
var combat_component: CombatComponent
var state_machine: BaseStateMachine

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	self.p_data = p_dependencies.get("data_resource")
	self.state_machine = p_dependencies.get("state_machine")
	self.combat_component = p_dependencies.get("combat_component")
	
	if not p_data or not state_machine or not combat_component:
		push_error("InputComponent.setup: Missing required dependencies.")
		return

func teardown() -> void:
	owner_node = null
	p_data = null
	combat_component = null
	state_machine = null

# CORRECTED: Renamed to `_physics_process` to match Godot's engine callback.
func _physics_process(_delta):
	if Input.is_action_just_pressed("ui_jump"):
		p_data.jump_buffer_timer = CombatDB.config.player_jump_buffer
	
	if not state_machine.states.find_key(state_machine.current_state) in owner_node.ACTION_ALLOWED_STATES:
		return
	
	if Input.is_action_just_pressed("ui_attack") and p_data.attack_cooldown_timer <= 0:
		p_data.is_charging = true
		p_data.charge_timer = 0.0
	
	if Input.is_action_just_released("ui_attack"):
		if p_data.is_charging:
			if p_data.charge_timer >= CombatDB.config.player_charge_time:
				combat_component.fire_shot()
			else:
				state_machine.change_state(owner_node.State.ATTACK)
			p_data.is_charging = false
	
	if Input.is_action_just_pressed("ui_dash") and p_data.can_dash and p_data.dash_cooldown_timer <= 0:
		state_machine.change_state(owner_node.State.DASH)
	
	if owner_node.is_on_floor() and Input.is_action_pressed("ui_down") and Input.is_action_pressed("ui_jump") and p_data.healing_charges > 0 and is_zero_approx(owner_node.velocity.x):
		state_machine.change_state(owner_node.State.HEAL)

# CORRECTED: Renamed to `_unhandled_input` to match Godot's engine callback.
func _unhandled_input(event: InputEvent):
	if is_instance_valid(state_machine) and is_instance_valid(state_machine.current_state):
		state_machine.current_state.process_input(event)


=====================================
FILE: ./src/entities/components/base_state.gd
=====================================
# src/entities/components/base_state.gd
#
# The single, unified base class for all state machine states in the project.
# It defines the "contract" that every state must adhere to.
class_name BaseState
extends Object

var owner: Node
var state_machine: Node
var state_data: Resource

func _init(p_owner: Node, p_state_machine: Node, p_state_data: Resource):
	self.owner = p_owner
	self.state_machine = p_state_machine
	self.state_data = p_state_data

# NEW: Teardown function to break cyclic references and prevent memory leaks.
func teardown():
	owner = null
	state_machine = null
	state_data = null

func enter(_msg := {}):
	pass

func exit():
	pass

func process_physics(_delta: float):
	pass

func process_input(_event: InputEvent):
	pass

=====================================
FILE: ./src/entities/player/player.tscn
=====================================
[gd_scene load_steps=8 format=3 uid="uid://c6vknl71ea1bo"]

[ext_resource type="Script" path="res://src/entities/player/player.gd" id="1_4d1td"]
[ext_resource type="Script" path="res://src/entities/components/health_component.gd" id="2_hcomp"]
[ext_resource type="Script" path="res://src/entities/components/combat_component.gd" id="3_combat_comp"]
[ext_resource type="Script" path="res://src/entities/components/input_component.gd" id="4_input_comp"]
[ext_resource type="Script" path="res://src/entities/components/base_state_machine.gd" id="5_fsm"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playerbody"]
size = Vector2(40, 40)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playerhitbox"]
size = Vector2(40, 40)

[node name="Player" type="CharacterBody2D"]
collision_layer = 1
collision_mask = 14
script = ExtResource("1_4d1td")

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
color = Color(0.941176, 0.941176, 0.941176, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_playerbody")

[node name="Hitbox" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 20

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hitbox"]
shape = SubResource("RectangleShape2D_playerhitbox")
disabled = true

[node name="Hurtbox" type="Area2D" parent="."]
collision_layer = 64
collision_mask = 28

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hurtbox"]
shape = SubResource("RectangleShape2D_playerbody")

[node name="HealingTimer" type="Timer" parent="."]
one_shot = true

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_hcomp")

[node name="CombatComponent" type="Node" parent="."]
script = ExtResource("3_combat_comp")

[node name="InputComponent" type="Node" parent="."]
script = ExtResource("4_input_comp")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("5_fsm")

[connection signal="timeout" from="HealingTimer" to="." method="_on_healing_timer_timeout"]

=====================================
FILE: ./src/entities/player/player.gd
=====================================
# src/entities/player/player.gd
# This script is the "Context" for the State Machine. It now delegates all
# state management logic to its StateMachine child node.
extends CharacterBody2D

# --- Signals ---
signal health_changed(current_health, max_health)
signal healing_charges_changed(current_charges)
signal died

# --- State Enum ---
enum State {MOVE, JUMP, FALL, DASH, WALL_SLIDE, ATTACK, HURT, HEAL}

# --- Node References ---
@onready var visual_sprite: ColorRect = $ColorRect
@onready var hitbox: Area2D = $Hitbox
@onready var hurtbox: Area2D = $Hurtbox
@onready var healing_timer: Timer = $HealingTimer
@onready var hitbox_shape: CollisionShape2D = $Hitbox/CollisionShape2D
@onready var health_component: HealthComponent = $HealthComponent
@onready var combat_component: CombatComponent = $CombatComponent
@onready var input_component: InputComponent = $InputComponent
@onready var state_machine: BaseStateMachine = $StateMachine

# --- State Scripts (Loaded at Runtime) ---
var MoveStateScript: Script
var FallStateScript: Script
var JumpStateScript: Script
var DashStateScript: Script
var WallSlideStateScript: Script
var AttackStateScript: Script
var HurtStateScript: Script
var HealStateScript: Script

# --- Data ---
var p_data: PlayerStateData
const ACTION_ALLOWED_STATES = [State.MOVE, State.FALL, State.JUMP, State.WALL_SLIDE]

# --- Engine Functions ---
func _ready():
	add_to_group("player")
	
	p_data = PlayerStateData.new()
	
	MoveStateScript = load("res://src/entities/player/states/state_move.gd")
	FallStateScript = load("res://src/entities/player/states/state_fall.gd")
	JumpStateScript = load("res://src/entities/player/states/state_jump.gd")
	DashStateScript = load("res://src/entities/player/states/state_dash.gd")
	WallSlideStateScript = load("res://src/entities/player/states/state_wall_slide.gd")
	AttackStateScript = load("res://src/entities/player/states/state_attack.gd")
	HurtStateScript = load("res://src/entities/player/states/state_hurt.gd")
	HealStateScript = load("res://src/entities/player/states/state_heal.gd")

	health_component.setup(self, {
		"data_resource": p_data,
		"config": CombatDB.config
	})
	combat_component.setup(self, {
		"data_resource": p_data
	})
	input_component.setup(self, {
		"data_resource": p_data,
		"state_machine": state_machine,
		"combat_component": combat_component
	})
	
	var states = {
		State.MOVE: MoveStateScript.new(self, state_machine, p_data),
		State.FALL: FallStateScript.new(self, state_machine, p_data),
		State.JUMP: JumpStateScript.new(self, state_machine, p_data),
		State.DASH: DashStateScript.new(self, state_machine, p_data),
		State.WALL_SLIDE: WallSlideStateScript.new(self, state_machine, p_data),
		State.ATTACK: AttackStateScript.new(self, state_machine, p_data),
		State.HURT: HurtStateScript.new(self, state_machine, p_data),
		State.HEAL: HealStateScript.new(self, state_machine, p_data),
	}
	
	state_machine.setup(states, State.FALL)
	
	visual_sprite.color = Palette.COLOR_PLAYER
	
	hitbox.body_entered.connect(_on_hitbox_body_entered)
	hitbox.area_entered.connect(_on_hitbox_area_entered)
	hurtbox.area_entered.connect(_on_hurtbox_area_entered)
	health_component.health_changed.connect(_on_health_component_health_changed)
	health_component.died.connect(_on_health_component_died)
	combat_component.damage_dealt.connect(_on_damage_dealt)
	combat_component.pogo_bounce_requested.connect(_on_pogo_bounce_requested)
	
	_emit_healing_charges_changed_event()

func _notification(what):
	if what == NOTIFICATION_PREDELETE:
		if state_machine: state_machine.teardown()
		if health_component: health_component.teardown()
		if combat_component: combat_component.teardown()
		if input_component: input_component.teardown()
		p_data = null

func _physics_process(delta):
	_update_timers(delta)
	move_and_slide()
	_check_for_contact_damage()
	if is_on_wall() and not is_on_floor():
		p_data.wall_coyote_timer = CombatDB.config.player_wall_coyote_time
		p_data.last_wall_normal = get_wall_normal()

# --- Public Helper Functions (for States) ---

func apply_horizontal_movement():
	velocity.x = Input.get_axis("ui_left", "ui_right") * CombatDB.config.player_speed
	if not is_zero_approx(velocity.x):
		p_data.facing_direction = sign(velocity.x)

func _cancel_heal():
	if healing_timer.is_stopped(): return
	healing_timer.stop()

# --- Private Helper Functions ---

func _update_timers(delta):
	p_data.coyote_timer = max(0.0, p_data.coyote_timer - delta)
	p_data.jump_buffer_timer = max(0.0, p_data.jump_buffer_timer - delta)
	p_data.dash_cooldown_timer = max(0.0, p_data.dash_cooldown_timer - delta)
	p_data.dash_duration_timer = max(0.0, p_data.dash_duration_timer - delta)
	p_data.attack_duration_timer = max(0.0, p_data.attack_duration_timer - delta)
	p_data.attack_cooldown_timer = max(0.0, p_data.attack_cooldown_timer - delta)
	p_data.knockback_timer = max(0.0, p_data.knockback_timer - delta)
	p_data.wall_coyote_timer = max(0.0, p_data.wall_coyote_timer - delta)
	if p_data.is_charging and Input.is_action_pressed("ui_attack"):
		p_data.charge_timer += delta

func _emit_healing_charges_changed_event():
	var ev = PlayerHealingChargesChangedEvent.new()
	ev.current_charges = p_data.healing_charges
	# CORRECTED: Removed the third argument (`self`).
	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev)
	healing_charges_changed.emit(p_data.healing_charges)

# --- Signal Handlers ---

func _check_for_contact_damage():
	if p_data.is_invincible:
		return
	for i in range(get_slide_collision_count()):
		var col = get_slide_collision(i)
		if col:
			var collider = col.get_collider()
			if collider.is_in_group("enemy") or collider.is_in_group("hazard"):
				var damage_result = health_component.apply_damage(1, collider)
				if damage_result["was_damaged"]:
					self.velocity = damage_result["knockback_velocity"]
					state_machine.change_state(State.HURT)
				break

func _on_damage_dealt():
	if p_data.healing_charges >= CombatDB.config.player_max_healing_charges: return
	p_data.determination_counter += 1
	if p_data.determination_counter >= CombatDB.config.player_determination_per_charge:
		p_data.determination_counter = 0; p_data.healing_charges += 1
		_emit_healing_charges_changed_event()

func _on_hitbox_body_entered(body):
	if p_data.is_pogo_attack:
		combat_component.trigger_pogo(body)
	else:
		var damageable = CombatUtils.find_damageable(body)
		if damageable:
			var damage_result = damageable.apply_damage(1, self)
			if damage_result["was_damaged"]:
				_on_damage_dealt()

func _on_hitbox_area_entered(area):
	if area.is_in_group("enemy_projectile"):
		if p_data.is_pogo_attack:
			combat_component.trigger_pogo(area)
		else:
			ObjectPool.return_instance(area)

func _on_hurtbox_area_entered(area):
	if p_data.is_invincible:
		if area.is_in_group("enemy_projectile"):
			ObjectPool.return_instance(area)
		return
	
	if area.is_in_group("enemy_projectile"):
		var damage_result = health_component.apply_damage(1, area)
		if damage_result["was_damaged"]:
			self.velocity = damage_result["knockback_velocity"]
			state_machine.change_state(State.HURT)
		ObjectPool.return_instance(area)

func _on_healing_timer_timeout():
	if state_machine.current_state == state_machine.states[State.HEAL]:
		p_data.health += 1
		p_data.healing_charges -= 1
		health_component.health_changed.emit(p_data.health, p_data.max_health)
		_emit_healing_charges_changed_event()
		state_machine.change_state(State.MOVE)

func _on_health_component_health_changed(current, max_val):
	var ev = PlayerHealthChangedEvent.new()
	ev.current_health = current
	ev.max_health = max_val
	# CORRECTED: Removed the third argument (`self`).
	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev)
	health_changed.emit(current, max_val)

func _on_health_component_died():
	died.emit()

func _on_pogo_bounce_requested():
	velocity.y = -CombatDB.config.player_pogo_force
	position.y -= 1
	p_data.can_dash = true
	p_data.air_jumps_left = CombatDB.config.player_max_air_jumps
	state_machine.change_state(State.FALL)


=====================================
FILE: ./src/entities/player/states/state_jump.gd
=====================================
# src/entities/player/states/state_jump.gd
# Handles the player's upward movement (jump).
extends BaseState

func enter(_msg := {}):
	owner.velocity.y = -CombatDB.config.player_jump_force
	state_data.coyote_timer = 0
	state_data.jump_buffer_timer = 0

func process_physics(delta: float):
	owner.apply_horizontal_movement()
	
	if Input.is_action_just_released("ui_jump") and owner.velocity.y < 0:
		owner.velocity.y *= CombatDB.config.player_jump_release_dampener

	_apply_gravity(delta)
	
	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

	_check_for_wall_slide()

func _apply_gravity(delta):
	owner.velocity.y += CombatDB.config.gravity * delta
	if owner.velocity.y > 0.0:
		state_machine.change_state(owner.State.FALL)

func _check_for_wall_slide():
	if state_data.wall_coyote_timer > 0 and not owner.is_on_floor() and Input.get_axis("ui_left", "ui_right") != 0 and sign(Input.get_axis("ui_left", "ui_right")) == -state_data.last_wall_normal.x:
		state_machine.change_state(owner.State.WALL_SLIDE)


=====================================
FILE: ./src/entities/player/states/state_dash.gd
=====================================
# src/entities/player/states/state_dash.gd
# Handles the player's dashing state.
extends BaseState

func enter(_msg := {}):
	state_data.is_dash_invincible = true
	state_data.can_dash = false
	state_data.dash_duration_timer = CombatDB.config.player_dash_duration
	state_data.dash_cooldown_timer = CombatDB.config.player_dash_cooldown
	owner.velocity = _get_dash_direction() * CombatDB.config.player_dash_speed

func exit():
	state_data.is_dash_invincible = false
	owner.velocity = owner.velocity * 0.5 

func process_physics(_delta: float):
	if state_data.dash_duration_timer <= 0:
		state_machine.change_state(owner.State.FALL)

func _get_dash_direction():
	if Input.is_action_pressed("ui_up"): return Vector2.UP
	if Input.is_action_pressed("ui_down"): return Vector2.DOWN
	return Vector2(state_data.facing_direction, 0)


=====================================
FILE: ./src/entities/player/states/state_heal.gd
=====================================
# src/entities/player/states/state_heal.gd
# Handles the player's healing state.
extends BaseState

func enter(_msg := {}):
	owner.velocity = Vector2.ZERO
	owner.healing_timer.start(CombatDB.config.player_heal_duration)

func exit():
	owner._cancel_heal()

func process_physics(_delta: float):
	if not Input.is_action_pressed("ui_down") or not Input.is_action_pressed("ui_jump") or not is_zero_approx(owner.velocity.x) or not owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)


=====================================
FILE: ./src/entities/player/states/state_wall_slide.gd
=====================================
# src/entities/player/states/state_wall_slide.gd
# Handles the player's wall sliding state.
extends BaseState

func enter(_msg := {}):
	state_data.can_dash = true
	state_data.air_jumps_left = CombatDB.config.player_max_air_jumps

func exit():
	if state_data.last_wall_normal != Vector2.ZERO:
		state_data.facing_direction = sign(state_data.last_wall_normal.x)

func process_physics(delta: float):
	var gravity = CombatDB.config.gravity
	var wall_slide_speed = CombatDB.config.player_wall_slide_speed
	owner.velocity.y = min(owner.velocity.y + gravity * delta, wall_slide_speed)
	
	state_data.facing_direction = sign(-state_data.last_wall_normal.x)
	
	if state_data.jump_buffer_timer > 0:
		_perform_wall_jump()
		return
	
	if Input.get_axis("ui_left", "ui_right") * -state_data.last_wall_normal.x < 0.8:
		state_machine.change_state(owner.State.FALL)
		return
		
	if state_data.wall_coyote_timer <= 0:
		state_machine.change_state(owner.State.FALL)
		return

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

func _perform_wall_jump():
	owner.velocity.y = -CombatDB.config.player_wall_jump_force_y
	owner.velocity.x = state_data.last_wall_normal.x * CombatDB.config.player_wall_jump_force_x
	state_data.jump_buffer_timer = 0
	state_data.coyote_timer = 0
	state_data.wall_coyote_timer = 0
	state_machine.change_state(owner.State.JUMP)


=====================================
FILE: ./src/entities/player/states/state_attack.gd
=====================================
# src/entities/player/states/state_attack.gd
# Handles the player's melee attack.
extends BaseState

func enter(_msg := {}):
	state_data.is_pogo_attack = Input.is_action_pressed("ui_down")
	owner.hitbox_shape.disabled = false

	# --- UNIFIED POGO LOGIC ---
	if state_data.is_pogo_attack:
		owner.hitbox.position = Vector2(0, 60)
		
		# Always perform a physics check. If it fails, instantly cancel the attack.
		# This single check now handles ground, air, and enemy pogos.
		if not _check_for_immediate_pogo():
			state_machine.change_state(owner.State.FALL)
			return
	
	# --- MELEE ATTACK LOGIC ---
	else:
		state_data.attack_duration_timer = CombatDB.config.player_attack_duration
		state_data.attack_cooldown_timer = CombatDB.config.player_attack_cooldown
		
		if Input.is_action_pressed("ui_up"):
			owner.hitbox.position = Vector2(0, -60)
		else:
			owner.hitbox.position = Vector2(state_data.facing_direction * 60, 0)


func exit():
	owner.hitbox_shape.call_deferred("set", "disabled", true)
	state_data.is_pogo_attack = false

func process_physics(delta: float):
	if not state_data.is_pogo_attack:
		var friction = CombatDB.config.player_attack_friction
		owner.velocity = owner.velocity.move_toward(Vector2.ZERO, friction * delta)
	
	if state_data.attack_duration_timer <= 0:
		state_machine.change_state(owner.State.FALL)

func _check_for_immediate_pogo() -> bool:
	var query = PhysicsShapeQueryParameters2D.new()
	query.shape = owner.hitbox_shape.shape
	query.transform = owner.global_transform * owner.hitbox.transform
	query.collision_mask = PhysicsLayers.WORLD | PhysicsLayers.ENEMY | PhysicsLayers.HAZARD | PhysicsLayers.ENEMY_PROJECTILE
	query.exclude = [owner]
	query.collide_with_areas = true
	
	var results = owner.get_world_2d().direct_space_state.intersect_shape(query)
	
	if not results.is_empty():
		if owner.combat_component.trigger_pogo(results[0].collider):
			return true
	
	return false


=====================================
FILE: ./src/entities/player/states/state_hurt.gd
=====================================
# src/entities/player/states/state_hurt.gd
# This state now correctly implements a short stun duration, decoupled
# from the longer invincibility timer.
extends BaseState

func enter(_msg := {}):
	# Start the dedicated knockback timer using the value from our new config resource.
	state_data.knockback_timer = CombatDB.config.player_knockback_duration
	
	# These actions are still relevant.
	state_data.is_charging = false
	owner._cancel_heal()


func process_physics(delta: float):
	# Apply gravity and air friction to the existing knockback velocity.
	owner.velocity.y += CombatDB.config.gravity * delta
	owner.velocity.x = move_toward(owner.velocity.x, 0, 800 * delta)

	# CRITICAL FIX: The state now ends when the SHORT knockback timer runs out,
	# not when the LONG invincibility wears off.
	if state_data.knockback_timer <= 0:
		state_machine.change_state(owner.State.FALL)

=====================================
FILE: ./src/entities/player/states/state_fall.gd
=====================================
# src/entities/player/states/state_fall.gd
# Handles the player's falling state.
extends BaseState

func process_physics(delta: float):
	owner.apply_horizontal_movement()
	_apply_gravity(delta)

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

	_check_for_wall_slide()

	if state_data.jump_buffer_timer > 0:
		if state_data.wall_coyote_timer > 0:
			_perform_wall_jump()
		elif state_data.coyote_timer > 0:
			state_machine.change_state(owner.State.JUMP)
		elif state_data.air_jumps_left > 0:
			_perform_air_jump()

func _apply_gravity(delta):
	var gravity_multiplier = 1.0
	if Input.is_action_pressed("ui_down"):
		gravity_multiplier = CombatDB.config.player_fast_fall_gravity_multiplier
	owner.velocity.y += CombatDB.config.gravity * gravity_multiplier * delta

func _check_for_wall_slide():
	if state_data.wall_coyote_timer > 0 and not owner.is_on_floor() and Input.get_axis("ui_left", "ui_right") != 0 and sign(Input.get_axis("ui_left", "ui_right")) == -state_data.last_wall_normal.x:
		state_machine.change_state(owner.State.WALL_SLIDE)

func _perform_air_jump():
	state_data.air_jumps_left -= 1
	state_machine.change_state(owner.State.JUMP)
	
func _perform_wall_jump():
	owner.velocity.x = state_data.last_wall_normal.x * CombatDB.config.player_wall_jump_force_x
	state_data.coyote_timer = 0
	state_data.wall_coyote_timer = 0
	state_machine.change_state(owner.State.JUMP)


=====================================
FILE: ./src/entities/player/states/state_move.gd
=====================================
# src/entities/player/states/state_move.gd
# Handles the player's grounded movement state.
extends BaseState

func enter(_msg := {}):
	state_data.air_jumps_left = CombatDB.config.player_max_air_jumps
	state_data.can_dash = true

func process_physics(delta: float):
	state_data.coyote_timer = CombatDB.config.player_coyote_time
	
	owner.velocity.y += CombatDB.config.gravity * delta
	owner.apply_horizontal_movement()

	if not owner.is_on_floor():
		state_machine.change_state(owner.State.FALL)
		return
	
	if Input.is_action_pressed("ui_down") and Input.is_action_just_pressed("ui_jump"):
		if owner.get_last_slide_collision():
			var floor_collider = owner.get_last_slide_collision().get_collider()
			if floor_collider and floor_collider.is_in_group("oneway_platforms"):
				owner.position.y += 2
				state_data.jump_buffer_timer = 0
				state_machine.change_state(owner.State.FALL)
				return
	
	if state_data.jump_buffer_timer > 0:
		state_machine.change_state(owner.State.JUMP)
		return


=====================================
FILE: ./src/entities/player/data/player_state_data.gd
=====================================
# src/entities/player/data/player_state_data.gd
#
# A Resource that holds all shared state data for the Player. It now includes
# validation logic in its setters to ensure data integrity.
class_name PlayerStateData
extends Resource

# --- Health & Combat ---
var max_health: int = 5
var max_healing_charges: int = 1

var health: int = 5:
	set(value):
		health = clamp(value, 0, max_health)

var healing_charges: int = 0:
	set(value):
		healing_charges = clamp(value, 0, max_healing_charges)

var determination_counter: int = 0
var is_invincible: bool = false
var is_dash_invincible: bool = false

# --- Physics & Movement ---
var air_jumps_left: int = 0
var facing_direction: int = 1
var last_wall_normal: Vector2 = Vector2.ZERO
var can_dash: bool = true

# --- Timers ---
var coyote_timer: float = 0.0
var jump_buffer_timer: float = 0.0
var wall_coyote_timer: float = 0.0
var dash_duration_timer: float = 0.0
var dash_cooldown_timer: float = 0.0
var attack_duration_timer: float = 0.0
var attack_cooldown_timer: float = 0.0
var knockback_timer: float = 0.0

# --- State Flags ---
var is_charging: bool = false
var charge_timer: float = 0.0
var is_pogo_attack: bool = false

