+---------------------------------+
|       B O X  B A T T L E        |
|  Godot Project Source Context   |
+---------------------------------+
Generated on: Sun Aug 17 15:35:11 CDT 2025

=====================================
PROJECT DIRECTORY STRUCTURE:
=====================================
.
├── LICENSE
├── README.md
├── data
│   └── combat_config.tres
├── default_bus_layout.tres
├── docs
│   ├── ARCHITECTURE.txt
│   ├── ARENA_CONCEPTS.txt
│   ├── ASSETS.txt
│   ├── BRAINSTORM.txt
│   ├── BUGS.txt
│   ├── CHANGELOG.txt
│   ├── CHANGELOG_archive_pre-0.7.0.txt
│   ├── DEPRECATION.md
│   ├── DESIGN.txt
│   ├── DOCS_PROTOCOL.txt
│   ├── PLAYTESTING.txt
│   ├── ROADMAP.txt
│   ├── TODO.txt
│   ├── all_godot_source_code.txt
│   ├── all_script_errors.txt
│   ├── create_all_godot_source_code_txt.command
│   ├── create_all_godot_source_code_txt.sh
│   ├── last_commit_command.txt
│   └── sprint_0_audit
│       ├── ADR-002_Communication_Patterns.md
│       ├── ADR.md
│       ├── ADR.mdADR-001_Service_Locator_Pattern.md
│       ├── ARCH-001_Refactoring_Principles.md
│       ├── ARCH-002_Acceptance_Criteria.md
│       ├── EVENT-001_Event_Flow_Map.md
│       ├── FSM-001_Entity_State_Flows.md
│       ├── STYLE-001_GDScript_Style_Guide.md
│       ├── TEST-001_Baseline_Metrics.md
│       ├── TEST-002_Smoke_Tests.md
│       ├── TEST-003_Regression_Checklist.md
│       ├── config_usage.txt
│       ├── event_usage.txt
│       ├── singleton_map.txt
│       └── state_machine_flow.md
├── export_presets.cfg
├── icon.svg
├── pico.save
├── progess
│   └── progress_001-1.jpg
├── project.godot
└── src
    ├── api
    │   ├── combat
    │   │   ├── damage_info.gd
    │   │   └── damage_result.gd
    │   └── interfaces
    │       ├── IComponent.gd
    │       ├── IDamageable.gd
    │       └── IPoolable.gd
    ├── arenas
    ├── core
    │   ├── DEPRECATION.md
    │   ├── README.md
    │   ├── building
    │   │   ├── arena_builder.gd
    │   │   ├── level_build_data.gd
    │   │   ├── level_parser.gd
    │   │   └── terrain_builder.gd
    │   ├── data
    │   │   ├── combat_db.gd
    │   │   ├── config
    │   │   │   ├── combat_config.gd
    │   │   │   └── settings.gd
    │   │   ├── game_state_data.gd
    │   │   └── level_build_data.gd
    │   ├── events
    │   │   ├── event_bus.gd
    │   │   ├── event_catalog.gd
    │   │   └── typed_events
    │   │       ├── boss_health_changed_event.gd
    │   │       ├── player_healing_charges_changed_event.gd
    │   │       └── player_health_changed_event.gd
    │   ├── sequencing
    │   │   ├── sequence_handle.gd
    │   │   ├── sequence_step.gd
    │   │   ├── sequencer.gd
    │   │   └── steps
    │   │       ├── callable_step.gd
    │   │       ├── emit_step.gd
    │   │       └── wait_step.gd
    │   ├── systems
    │   │   ├── audio_manager.gd
    │   │   ├── camera_manager.gd
    │   │   ├── cursor_manager.gd
    │   │   ├── dialogue_manager.gd
    │   │   ├── fx_manager.gd
    │   │   ├── game_manager.gd
    │   │   ├── object_pool.gd
    │   │   ├── scene_manager.gd
    │   │   └── vfx_manager.gd
    │   └── util
    │       ├── asset_paths.gd
    │       ├── combat_utils.gd
    │       ├── constants.gd
    │       ├── grid_utils.gd
    │       ├── identifiers.gd
    │       ├── palette.gd
    │       ├── physics_layers.gd
    │       └── scene_validator.gd
    ├── data
    │   ├── dialogue
    │   │   ├── dialogue_data.gd
    │   │   └── test_conversation.tres
    │   ├── encounters
    │   │   ├── encounter_00.tres
    │   │   └── encounter_data.gd
    │   └── layouts
    │       ├── layout_00.tres
    │       └── level_layout.gd
    ├── entities
    │   ├── README.md
    │   ├── boss
    │   │   ├── attack_patterns
    │   │   │   ├── attack_pattern.gd
    │   │   │   ├── lunge_attack.tres
    │   │   │   ├── single_shot.tres
    │   │   │   └── volley_shot.tres
    │   │   ├── base_boss.gd
    │   │   ├── base_boss.tscn
    │   │   ├── boss_state_data.gd
    │   │   └── states
    │   │       ├── state_boss_attack.gd
    │   │       ├── state_boss_cooldown.gd
    │   │       ├── state_boss_idle.gd
    │   │       ├── state_boss_lunge.gd
    │   │       └── state_boss_patrol.gd
    │   ├── components
    │   │   ├── armor_component.gd
    │   │   ├── base_state.gd
    │   │   ├── base_state_machine.gd
    │   │   ├── combat_component.gd
    │   │   ├── health_component.gd
    │   │   ├── input_component.gd
    │   │   ├── telegraph_component.gd
    │   │   └── telegraph_component.tscn
    │   ├── minions
    │   │   ├── states
    │   │   │   ├── state_turret_attack.gd
    │   │   │   └── state_turret_idle.gd
    │   │   ├── turret.gd
    │   │   ├── turret.tscn
    │   │   └── turret_state_data.gd
    │   └── player
    │       ├── components
    │       │   ├── player_ability_component.gd
    │       │   ├── player_physics_component.gd
    │       │   └── player_resource_component.gd
    │       ├── data
    │       │   ├── forward_attack_shape.tres
    │       │   ├── player_state_data.gd
    │       │   └── upward_attack_shape.tres
    │       ├── player.gd
    │       ├── player.tscn
    │       └── states
    │           ├── state_attack.gd
    │           ├── state_dash.gd
    │           ├── state_fall.gd
    │           ├── state_heal.gd
    │           ├── state_hurt.gd
    │           ├── state_jump.gd
    │           ├── state_move.gd
    │           └── state_wall_slide.gd
    ├── projectiles
    │   ├── boss_shot.gd
    │   ├── boss_shot.tscn
    │   ├── player_shot.gd
    │   ├── player_shot.tscn
    │   ├── turret_shot.gd
    │   └── turret_shot.tscn
    ├── scenes
    │   ├── game
    │   │   ├── encounter_scene.gd
    │   │   └── encounter_scene.tscn
    │   ├── game_over
    │   │   ├── game_over_screen.gd
    │   │   └── game_over_screen.tscn
    │   ├── loading
    │   │   ├── loading_screen.gd
    │   │   └── loading_screen.tscn
    │   ├── main
    │   │   ├── main.gd
    │   │   └── main.tscn
    │   ├── menus
    │   │   ├── controls_screen.gd
    │   │   ├── controls_screen.tscn
    │   │   ├── credits_screen.gd
    │   │   ├── credits_screen.tscn
    │   │   ├── options_screen.gd
    │   │   ├── options_screen.tscn
    │   │   ├── sound_screen.gd
    │   │   ├── sound_screen.tscn
    │   │   ├── title_screen.gd
    │   │   └── title_screen.tscn
    │   └── victory
    │       ├── victory_screen.gd
    │       └── victory_screen.tscn
    └── ui
        ├── components
        │   ├── custom_slider
        │   │   └── custom_slider.gd
        │   ├── logo_display
        │   │   ├── logo_display.gd
        │   │   └── logo_display.tscn
        │   ├── mute_button
        │   │   ├── mute_button.gd
        │   │   └── mute_button.tscn
        │   └── styled_menu_item
        │       ├── styled_menu_item.gd
        │       └── styled_menu_item.tscn
        ├── dev
        │   ├── debug_overlay.gd
        │   └── debug_overlay.tscn
        ├── dialogue
        │   ├── dialogue_box.gd
        │   └── dialogue_box.tscn
        ├── game_hud
        │   ├── game_hud.gd
        │   └── game_hud.tscn
        ├── menu_manager
        │   └── menu_manager.gd
        └── pause_menu

55 directories, 173 files


=====================================
FILE: ./docs/TODO.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ████████╗ ██████╗ ██████╗  ██████╗                                         ║
║   ╚══██╔══╝██╔═══██╗██╔══██╗██╔═══██╗                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ╚██████╔╝██████╔╝╚██████╔╝                                        ║
║      ╚═╝    ╚═════╝ ╚═════╝  ╚═════╝                                         ║
║                                                                              ║
║                  Immediate Work Items & Actionable Tasks                     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PHASE 2: JUICE & FEEDBACK                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The focus is now on tangible "game feel" to make interactions satisfying.  ║
║                                                                              ║
║   □  Implement Screen Shake via `FXManager` for player damage and boss attacks.
║   □  Implement Hit-Stop via `FXManager` for close-range melee hits on the boss.
║   □  Create and pool a basic "hit spark" particle effect via a new `VFXManager`.
║   □  Implement the basic functionality for the `DialogueManager` and `DialogueBox`.
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                     INDEFINITELY DEFERRED TASKS                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of lower-priority goals for future consideration.                   ║
║                                                                              ║
║   ░  Fast-Fall: Holding 'Down' in the air increases gravity.                 ║
║   ░  Diegetic UI Implementation (UI integrated into the game world).         ║
║   ░  Advanced Boss AI (Adaptive tactics, environmental interaction).         ║
║   ░  Player Loadout System (Alternative weapons or abilities).               ║
║   ░  Special Game Modes (Boss Rush, Time Attack).                            ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/CHANGELOG_archive_pre-0.7.0.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.7.0] - DATA-DRIVEN ARCHITECTURE - 2025-08-13            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version completes the transformation to a fully data-driven        ║
║      architecture, implements robust memory management patterns, and         ║ 
║      enhances the combat system with distance-based mechanics and            ║
║      comprehensive scene validation tools.                                   ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Unified the project's configuration system to be exclusively driven ║
║      ░   by the `CombatDB` singleton and its `CombatConfig.tres` Resource.   ║
║      ░   All legacy `Config.gd` calls have been removed for consistency.     ║
║      ░ ■ Converted all gameplay tuning data into editor-friendly Resources   ║
║      ░   with `@export_group` and `@export_range` hints for designer-friendly║
║      ░   UI in the Godot Inspector.                                          ║
║      ░ ■ Refactored the `BaseBoss` to be fully data-driven, with attack      ║
║      ░   patterns for each phase assigned via exported arrays in Inspector,  ║
║      ░   decoupling boss design from hard-coded script paths.                ║
║      ░ ■ Unified the state machine architecture to be purely object-based,   ║
║      ░   removing inconsistent lifecycle logic and implementing formal       ║
║      ░   `teardown` patterns to prevent memory leaks and cyclic references.  ║
║      ░ ■ Created a central, static `SceneValidator` utility to house all     ║
║      ░   in-editor validation logic, adhering to the DRY principle.          ║
║      ░ ■ Hardened the `Sequencer` by adding a `cancel_all()` method called   ║
║      ░   by `SceneManager` during scene transitions, preventing sequences    ║
║      ░   from running across scenes.                                         ║
║      ░ ■ Hardened the `ObjectPool` against race conditions by deferring the  ║
║      ░   deactivation of returned instances to prevent same-frame access.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a two-tier melee hitbox system using distance-based     ║
║      ░   damage calculation, rewarding close-range attacks with higher damage║
║      ░   while maintaining a single, wide hitbox for better usability.       ║
║      ░ ■ The melee hitbox now dynamically changes shape and position for     ║
║      ░   upward attacks, ensuring precise square coverage above the player.  ║
║      ░ ■ Implemented in-editor scene validation for `BaseBoss` with warning  ║
║      ░   icons in the Scene Tree when required component nodes are missing.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Reverted experimental attack and dash input buffering after         ║
║      ░   playtesting revealed it negatively impacted the precise, deliberate ║
║      ░   combat feel. Retained the existing responsive input model.          ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Hardened the player's pogo attack physics query to correctly iterate║
║      ░   through all potential targets to find valid `IDamageable` objects,  ║
║      ░   making the mechanic more reliable against complex colliders.        ║
║      ░ ■ Resolved a critical race condition where the `ArenaBuilder` could   ║
║      ░   finish building before the boss intro sequence spawned the boss by  ║
║      ░   correctly awaiting a `SequenceHandle`.                              ║
║      ░ ■ Correctly configured all projectile scenes with necessary metadata  ║
║      ░   to ensure proper return to `ObjectPool` instead of deletion,        ║
║      ░   preventing performance degradation.                                 ║
║      ░ ■ Resolved a visual regression where boss phase indicators on the Game║
║      ░   HUD were not initialized correctly with more performant styling.    ║
║      ░ ■ Resolved a "modulo by zero" crash in the boss's idle state by adding║
║      ░   guard clauses for cases where no attack patterns are assigned.      ║
║      ░ ■ Resolved a critical race condition that caused crashes when Turret  ║
║      ░   minions were destroyed.                                             ║
║      ░ ■ Corrected resource loading errors caused by duplicated UIDs in      ║
║      ░   `base_boss.tscn` and `combat_config.tres` files.                    ║
║      ░ ■ Fixed asset database corruption by manually removing corrupted UID  ║
║      ░   references, allowing Godot's importer to re-establish correct links.║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Formalized the project's official Dependency Injection pattern in   ║
║      ░   `ARCHITECTURE.txt` as "Owner-Driven Injection" within entity        ║
║      ░   `_ready()` functions, leveraging Godot's lifecycle guarantees.      ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.6.0] - DYNAMIC ENCOUNTERS - 2025-08-11                 ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version introduces dynamic multi-phase boss encounters, minion     ║
║      support, widescreen compatibility, and comprehensive visual and         ║
║      performance improvements to create engaging, scalable combat scenarios. ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Hardened the `Sequencer` to return a `SequenceHandle`, allowing     ║
║      ░   cinematic sequences to be safely cancelled to prevent state bugs.   ║
║      ░ ■ Hardened the `ObjectPool` by replacing fragile, name-based node     ║
║      ░   lookups with direct references, making the system more robust.      ║
║      ░ ■ Decoupled game logic from screen resolution by creating `GridUtils` ║
║      ░   singleton to handle conversions between tile and world coordinates. ║
║      ░ ■ Implemented `CameraManager` to dynamically fit camera to arena's    ║
║      ░   logical size, enabling support for non-square aspect ratios.        ║
║      ░ ■ Enhanced `TerrainBuilder` to procedurally fill the entire camera    ║
║      ░   viewport with background tiles, creating seamless play areas.       ║
║      ░ ■ Created data-driven `AttackPattern` resources, allowing boss attack ║
║      ░   properties to be designed and tuned in the editor instead of        ║
║      ░   being hard-coded in scripts.                                        ║
║      ░ ■ Implemented reusable `TelegraphComponent` scene to provide consistent║
║      ░   visual warnings for all enemy attacks with context-aware displays.  ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented dynamic, three-phase boss fight system where bosses     ║
║      ░   become more aggressive as health decreases, using faster cooldowns  ║
║      ░   and complex attack patterns in later phases.                        ║
║      ░ ■ Added real-time phase indicator icons to Game HUD that visually     ║
║      ░   represent the boss's current phase and deplete right-to-left.       ║
║      ░ ■ Created templated boss death sequence using `Sequencer` for         ║
║      ░   cinematic pause before victory screen appears.                      ║
║      ░ ■ Implemented `ArmorComponent` to allow phases of boss invulnerability,║
║      ░   supporting "armored lunge" attacks where boss becomes invulnerable  ║
║      ░   and performs high-speed dashes across the arena.                    ║
║      ░ ■ Implemented "Turret" minion enemy system with stationary enemies    ║
║      ░   that detect players and fire projectiles, proving reusability of    ║
║      ░   unified state machine and component architecture.                   ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Project display settings updated to widescreen 16:9 (1920x1080)    ║
║      ░   from previous 1000x1000 square format for modern display support.   ║
║      ░ ■ Refactored `BaseBoss` and state machine to be fully data-driven,    ║
║      ░   with `AttackState` reading `AttackPattern` resources and `IdleState`║
║      ░   responsible for pattern selection.                                  ║
║      ░ ■ Enhanced Player's dash mechanic with momentum cancellation at end   ║
║      ░   for precise "hard stop" feel and controlled aerial maneuvers.       ║
║      ░ ■ `HealthComponent` now detects health threshold crossings and emits  ║
║      ░   signals for phase transitions, and is "armor-aware" to check for    ║
║      ░   active `ArmorComponent` before applying damage.                     ║
║      ░ ■ Encounter system upgraded to support spawning lists of minions from ║
║      ░   level layout files in addition to main bosses.                      ║
║      ░ ■ Refactored procedural UI menus to use container nodes for better    ║
║      ░   resizing behavior across different aspect ratios.                   ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved potential memory leak in `EventBus` by implementing        ║
║      ░   self-cleaning mechanism that automatically prunes dead subscriptions║
║      ░   during emit cycles.                                                 ║
║      ░ ■ Corrected several `async`/`await` errors in `Sequencer` and         ║
║      ░   `CallableStep` to ensure reliable execution of async functions.     ║
║      ░ ■ Resolved long-standing visual bug where debug collision shapes were ║
║      ░   incorrectly culled at viewport edges by correcting engine's update  ║
║      ░   order in `game.gd` scene.                                           ║
║      ░ ■ Replaced all `ColorRect` nodes used for in-world visuals with       ║
║      ░   `Polygon2D` nodes to prevent potential rendering conflicts.         ║
║      ░ ■ Fixed critical race condition where killing boss would not trigger  ║
║      ░   victory screen by moving logic to global `EventBus`.                ║
║      ░ ■ Resolved "zombie attack" bug where boss could still fire projectiles║
║      ░   after dying by adding `_is_dead` state flag.                        ║
║      ░ ■ Fixed bug where active projectiles persisted across scene           ║
║      ░   transitions by adding global reset function to `ObjectPool`.        ║
║      ░ ■ Resolved bug where turrets stopped firing after few shots by        ║
║      ░   refactoring state machine logic to be continuous rather than        ║
║      ░   reliant on one-shot `await` calls in enter functions.               ║
║      ░ ■ Fixed critical bug where projectiles were permanently deleted       ║
║      ░   instead of returned to `ObjectPool` by creating dedicated           ║
║      ░   `TurretShot` scene with correct pooling metadata.                   ║
║      ░ ■ Addressed several minor UI layout bugs for better consistency       ║
║      ░   across different screen resolutions.                                ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██          [0.5.0] - ARCHITECTURAL UNIFICATION - 2025-08-10            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║
║      This version completes a foundational architectural refactor,           ║
║      unifying the player and boss state machines, introducing a robust       ║
║      interface-based damage system, and fully decoupling all entity          ║ 
║      components to create a highly scalable and maintainable codebase.       ║                                                                 ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Introduced a robust, interface-based damage system (`IDamageable`)  ║
║      ░   to formalize how entities receive damage, replacing fragile,        ║
║      ░   string-based lookups with a type-safe contract.                     ║
║      ░ ■ Created a new `CombatUtils` singleton to provide a robust,          ║
║      ░   tree-traversing utility for finding `HealthComponent` nodes from any║
║      ░   physics collider, eliminating brittle `get_node` lookups.           ║
║      ░ ■ Decoupled `CombatComponent` from the `Player` by replacing direct   ║
║      ░   state and velocity mutation with a `pogo_bounce_requested` signal,  ║
║      ░   adhering to the Dependency Inversion Principle.                     ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, providing a single, robust API for navigation.    ║
║      ░ ■ Implemented state validation in `PlayerStateData` and `BossStateData`║
║      ░   using property setters. This makes the data resources self-validating
║      ░   and prevents invalid states (e.g., health > max_health).            ║
║      ░ ■ Created a formal `ComponentInterface` to act as a standardized      ║
║      ░   blueprint for all entity components, enforcing a consistent API.    ║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource,         ║
║      ░   eliminating the "dual architecture" of stateful singletons. All     ║
║      ░   runtime state is now consistently managed through `Resource` objects.║
║      ░ ■ Replaced the JSON-based `Config.gd` system with a type-safe,        ║
║      ░   `Resource`-based system (`CombatConfig.tres` and `CombatDB.gd`).    ║
║      ░   This provides compile-time safety against typos and enables direct  ║
║      ░   gameplay value tuning in the Godot editor's Inspector.              ║
║      ░ ■ Refactored the Player's state machine to load its state scripts at  ║
║      ░   runtime in `_ready()` instead of using `preload()`. This breaks a   ║
║      ░   brittle parse-time dependency cycle, making the game's startup      ║
║      ░   sequence significantly more robust.                                 ║
║      ░ ■ Further refined the `src/core` directory structure, creating new    ║
║      ░   subdirectories for typed configs and events (`data/config`, `events/typed_events`).║
║      ░ ■ Standardized script filenames to snake_case (e.g., `Config.gd` ->   ║
║      ░   `config.gd`) for project-wide consistency.                          ║
║      ░ ■ Reorganized the monolithic `src` directory into purpose-driven      ║
║      ░   subdirectories (`building`, `data`, `systems`, `util`, etc.) to     ║
║      ░   improve project modularity and scalability.                         ║
║      ░ ■ Simplified the global `EventBus` by removing unused features like   ║
║      ░   the priority system and `emit_async`, resulting in a leaner         ║
║      ░   implementation.                                                     ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the Player to use the new `BaseStateMachine`, simplifying║
║      ░   the main `player.gd` script and delegating all state logic.         ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities and  ║
║      ░   removing the final piece of duplicated state logic.                 ║
║      ░ ■ Decoupled all Components from their owners by passing dependencies  ║
║      ░   (data resources, other components) explicitly through a dictionary  ║
║      ░   in the `setup()` method, adhering to Dependency Inversion.          ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState`   ║
║      ░   to unify all entity state management, removing duplicated code.     ║
║      ░ ■ Refactored the `BaseBoss` to use the new `BaseStateMachine`,        ║
║      ░   unifying the state management architecture across all entities.     ║
║      ░ ■ Simplified the `EventBus` API by removing the unused `_source`      ║
║      ░   parameter from the `emit` function.                                 ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Renamed `HealthComponent.take_damage` to `apply_damage` to          ║
║      ░   conform to the new interface contract.                              ║
║      ░ ■ Refactored `CombatUtils` to find any `IDamageable` node, not just   ║
║      ░   a `HealthComponent`.                                                ║
║      ░ ■ Updated all damage sources (projectiles, melee, pogo, contact)      ║
║      ░   to use the new `CombatUtils.find_damageable` method.                ║
║      ░ ■ Refactored all UI screens and core game scripts to use the new      ║
║      ░   `SceneManager`, removing scattered `get_tree().change_scene` calls. ║
║      ░ ■ Refactored `HealthComponent` to initialize the new self-validating  ║
║      ░   data resources, simplifying its internal logic.                     ║
║      ░ ■ Refactored `CombatComponent` and `InputComponent` to extend the new ║
║      ░   `ComponentInterface`, standardizing the entire component architecture.║
║      ░ ■ Updated `player.gd` to use the standardized `setup` and `teardown`  ║
║      ░   methods for all its components.                                     ║
║      ░ ■ Refactored `HealthComponent` to extend the new `ComponentInterface` ║
║      ░   and use a more robust `is_in_group` check for its setup logic.      ║
║      ░ ■ Reorganized `AssetPaths.gd` by feature/system for improved clarity. ║
║      ░ ■ Added a validation system to `AssetPaths.gd` that checks for missing║
║      ░   files at startup, preventing runtime "file not found" errors.       ║
║      ░ ■ Added validation to `Settings.gd` property setters to clamp audio   ║
║      ░   volume values, making the system more robust against invalid data.  ║
║      ░ ■ Cleaned up all remaining GDScript static analysis warnings          ║
║      ░   (`UNUSED_PARAMETER`, `SHADOWED_VARIABLE`) for a clean build.        ║
║      ░ ■ Removed dead/broken event definitions from `EventCatalog` and       ║
║      ░   removed the corresponding broken logic from `EncounterDirector`.    ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Added placeholder `README.md` and `DEPRECATION.md` files to `core`, ║
║      ░   `entities`, and `docs` to establish a documentation framework.      ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Improved header comments in `Constants.gd` and `PhysicsLayers.gd`   ║
║      ░   to clarify their intended purpose and prevent architectural drift.  ║
║      ░ ■ Completed Sprint 0 architectural audit.                             ║
║      ░ ■ Added `docs/sprint_0_audit` directory to house analysis files.      ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Added `ADR-001` to formally document the existing Service Locator pattern.║
║      ░ ■ Added `FSM-001` to diagram the Player and Boss state machines.      ║
║      ░ ■ Created placeholder documents for testing (`TEST-*`) and refactoring║
║      ░   principles (`ARCH-*`) to guide future sprints.                      ║
║      ░ ■ Added `ADR-002_Communication_Patterns.md` to formally document the  ║
║      ░   project's standard for using Godot Signals (local communication)   ║
║      ░   vs. the EventBus (global communication).                            ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex series of bugs causing the pogo mechanic to be   ║
║      ░   unreliable. The attack now consistently damages the boss, bounces off║
║      ░   projectiles, and can be executed repeatedly on the ground without   ║
║      ░   "misfiring".                                                        ║
║      ░ ■ Unified the ground and air pogo logic into a single, physics-driven ║
║      ░   system that correctly handles all valid bounce surfaces (enemies,   ║
║      ░   projectiles, and world geometry).                                   ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   the player to seamlessly transition between bouncing and landing.   ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to detect and destroy projectiles.            ║
║      ░ ■ Resolved a memory leak by ensuring the `GameManager` frees its      ║
║      ░   `GameStateData` resource in `_exit_tree`.                           ║
║      ░ ■ Fixed a critical parse error by removing a conflicting `class_name` ║
║      ░   from the `SceneManager` autoload script.                            ║
║      ░ ■ Added missing `max_health` property to `BossStateData` to resolve a ║
║      ░   crash when the boss took damage.                                    ║
║      ░ ■ Resolved a crash caused by using the non-existent `has()` method in ║
║      ░   `HealthComponent`; replaced with a more robust `is_in_group()` check.║
║      ░ ■ Corrected invalid GDScript 4 dictionary access syntax in `player.gd`.║
║      ░ ■ Removed the invalid `override` keyword from `HealthComponent`, which ║
║      ░   was causing a critical parse error.                                 ║
║      ░ ■ Corrected the argument order in `HealthComponent.setup` calls to    ║
║      ░   match the newly defined `ComponentInterface` contract.              ║
║      ░ ■ Resolved a parse-time dependency error by ensuring `GameStateData`  ║
║      ░   is loaded at runtime in `GameManager`, preventing a startup crash.  ║
║      ░ ■ Resolved a cascade of parse errors by correcting the implementation ║
║      ░   of the new `CombatConfig` resource and refactoring dependent scripts.║
║      ░ ■ Corrected multiple typos and syntax errors in player state scripts  ║
║      ░   (`state_attack.gd`, `state_hurt.gd`, `state_wall_slide.gd`) that    ║
║      ░   were causing crashes during gameplay.                               ║
║      ░ ■ Updated all autoload paths in `project.godot` to reflect the new    ║
║      ░   `core` directory structure, resolving all 'File not found' errors.  ║
║      ░ ■ Fixed a critical race condition where player contact damage could   ║
║      ░   interrupt a pogo attack, preventing the pogo from dealing damage.   ║
║      ░ ■ Resolved a critical bug where the Player and Boss would receive the ║
║      ░   wrong invincibility durations. Moved `add_to_group()` to the top of ║
║      ░   `_ready()` to ensure entities are correctly identified before their ║
║      ░   components are configured.                                          ║
║      ░ ■ Restored player knockback and invincibility, which were failing due ║
║      ░   to the incorrect invincibility timer.                               ║
║      ░ ■ The `Hurt` state now correctly uses its own short `knockback_timer` ║
║      ░   for stun duration, decoupled from the longer invincibility timer.   ║
║      ░ ■ Implemented robust `teardown` methods in the state machine and all  ║
║      ░   components to prevent potential memory leaks from cyclic references.║
║      ░ ■ Corrected all calls to `EventBus.emit` to match the new, simpler    ║
║      ░   2-argument signature, resolving a crash.                            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██             [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.2.0] - THE ARCHITECTURAL REFACTOR - 2025-08-07             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       [0.1.0] - 2025-08-05                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝



=====================================
FILE: ./docs/all_script_errors.txt
=====================================
Run in Box Battle folder for all errors in Terminal


"/Applications/Godot.app/Contents/MacOS/Godot" --verbose --check-only "/Users/stevencasteel/Desktop/GODOT/BOX BATTLE" > all_script_errors.txt


=====================================
FILE: ./docs/last_commit_command.txt
=====================================
git reset --hard origin/main

=====================================
FILE: ./docs/DESIGN.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗ ███████╗███████╗██╗ ██████╗ ███╗   ██╗                             ║
║   ██╔══██╗██╔════╝██╔════╝██║██╔════╝ ████╗  ██║                             ║
║   ██║  ██║█████╗  ███████╗██║██║  ███╗██╔██╗ ██║                             ║
║   ██║  ██║██╔══╝  ╚════██║██║██║   ██║██║╚██╗██║                             ║
║   ██████╔╝███████╗███████║██║╚██████╔╝██║ ╚████║                             ║
║   ╚═════╝ ╚══════╝╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝                             ║
║                                                                              ║
║      The official documentation for game mechanics and design philosophy.    ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         DESIGN PHILOSOPHY                            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Sublime Movement by Default: The player is given a complete, perfected, ║
║      and expressive moveset from the beginning. The joy of the game comes    ║
║      from mastering these tools, not from unlocking them.                    ║
║                                                                              ║
║   █  Aesthetic Minimalism, Technical Maximalism: The visual style will be    ║
║      clean, minimalist, and beautiful, inspired by high-end web design       ║
║      (e.g., Framer websites). We will use advanced shaders, procedural       ║
║      generation, and particle effects to create a polished, "expensive"      ║
║      look with elements like frosted glass, backlighting, and subtle gradients.║
║                                                                              ║
║   █  Robust, Maintainable Code: Development will adhere to the SOLID principles║
║      (Single Responsibility, Open/Closed, etc.) to ensure the codebase is    ║
║      scalable, easy to debug, and a pleasure to work on. We refactor first.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                           CORE MECHANICS                             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▓  Player Movement                                                         ║
║      ░ ■ Coyote Time & Jump Buffering for forgiving platforming.             ║
║      ░ ■ 4-directional Dash with a cooldown.                                 ║
║      ░ ■ Wall-Sliding and Wall-Jumping for verticality.                      ║
║                                                                              ║
║   ▓  Combat System                                                           ║
║      ░ ■ Primary Melee: A fast, close-range attack.                          ║
║      ░ ■ Charged Shot: A long-range projectile attack.                       ║
║      ░ ■ Pogo Attack: A downward aerial attack that bounces on enemies.      ║
║      ░ ■ Dash Invincibility: The player cannot take damage during a dash.    ║
║                                                                              ║
║   ▓  Planned Combat Refinements                                              ║
║      ░ ■ Enhanced Melee Hitbox: The melee swing will have two hitboxes. The  ║
║      ░   inner box (close to the player) will deal 1.5x damage, rewarding    ║
║      ░   risky positioning. The outer box will deal 1.0x damage.             ║
║      ░ ■ Input Buffering: Attack and dash inputs will be buffered just like  ║
║      ░   the jump input, making the controls feel more responsive.           ║
║      ░ ■ Pogo-Fall Prevention: A brief window after a pogo will prevent      ║
║      ░   accidental fast-falling.                                            ║
║                                                                              ║
║   ▓  Health and Healing: The Determination System                            ║
║      ░  Healing is a resource earned by dealing damage. Landing hits fills a ║
║      ░  `determination_counter` to grant a `healing_charge`.                 ║
║                                                                              ║
║   ▓  Boss Design Template (The "Kitchen Sink")                               ║
║      ░  Our `base_boss` will be a template with a library of toggleable mechanics:║
║      ░  ■ Health Phases: Boss behavior and attacks change at health thresholds.║
║      ░  ■ Armor / Weak Points: Boss can enter armored states where it takes  ║
║      ░    no damage, punctuated by moments of vulnerability.                 ║
║      ░  ■ Clear Telegraphing: All attacks will be preceded by clear visual/audio║
║      ░    cues, ensuring tough but fair encounters.                          ║
║      ░  ■ Modular Movement: Bosses can be configured to fly, dash, jump, etc.║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 ARENA & BOSS BATTLE CONCEPTS                         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Each boss battle is a unique mechanical challenge inspired by a classic    ║
║   arcade game loop. The player's sublime moveset is the constant tool used to║
║   solve these varied combat puzzles.                                         ║
║                                                                              ║
║   ▒  Beat Box (Rhythm Game): Platforms appear/disappear on a musical beat.   ║
║   ▒  Sandbox (Momentum Vampirism): Boss steals player momentum on hit.       ║
║   ▒  Circuit Box (Tempest-like): Central core protected by rotating shields. ║
║   ▒  Garden Box (Centipede-like): Segmented boss weaves through obstacles.   ║
║   ▒  Traffic Box (Frogger-like): Cross "lanes" of projectiles to reach boss. ║
║   ▒  Gravity Box (Gravity Man-inspired): Gravity reverses periodically.      ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

DESIGN SUMMARY (core gameplay)
==============================

Purpose
-------
Capture the player-facing rules and important implementation decisions so designers and devs stay aligned.

Mechanics (short)
-----------------
- Movement: standard platformer ground & air with coyote time + jump buffering.
- Pogo: jump-on-enemy mechanic that bounces the player and applies damage to the enemy.
- Contact damage: mutual damage when entity collides with dangerous zones/actors — resolved through CombatUtils.
- Projectiles: use pooled nodes; projectiles are *DamageSource* emitters on hit.

Pogo — implementation notes
---------------------------
Goal: reliable, consistent damage application and deterministic bounce.

Canonical rules:
1. Pogo triggers when the player is moving downward and the player's pogo sensor area overlaps enemy hurtbox while the attack input or a pogo-frame confidence check is true.
2. On pogo hit:
   - Player receives a vertical impulse/bounce and may gain a brief invulnerability window.
   - Enemy receives damage via `CombatUtils.apply_damage(player, enemy, damage_info)`.
   - Use CombatUtils to de-duplicate or throttle repeated hits within the same physics tick.
3. Edge cases to watch:
   - Multiple damage sources on a single frame (ensure CombatUtils dedupes per damage hit-id).
   - Pogo while a boss is invulnerable (respect `is_invulnerable()`).

Jump buffering & coyote time
----------------------------
- Jump-buffer: store jump input for a short window (eg. 0.1s) to allow forgiving timing.
- Coyote time: allow jumping up to a short window after leaving ground (eg. 0.08s).
- Implemented in the player state machine as small time accumulators — prefer deterministic values stored in a `.tres` tuning resource.

Hit detection & damage flow
---------------------------
- Always route damage through CombatUtils; do not directly mutate HP from collision callbacks.
- DamageInfo shape (recommended):
  {
    "amount": int,
    "type": "physical" | "fire" | ...,
    "source": Node,           # optional reference
    "hit_id": String,         # optional dedupe id
    "knockback": Vector2,
    "flags": {"ignore_armor": false, ...}
  }

Data-driven tuning
------------------
- Keep numeric tuning in resource files (`.tres`) stored under `res://assets/config/` or `res://data/`.
- Example resources: `combat_config.tres`, `player_tuning.tres`, `boss_phase_1.tres`
- Designers edit these in the Godot inspector; code reads them at runtime.

Guidelines for adding new mechanics
----------------------------------
- Add logic as a component when it can be reused across entities.
- Add high-level sequencing to Sequencer when you need deterministic, ordered scripts.
- Keep state transitions in the state machine; do not splice logic between multiple components arbitrarily.

Testing checklist (dev)
-----------------------
- Reproduce pogo behavior on small enemy and boss (ensure single hit / correct bounce).
- Verify contact damage doesn't double-apply for simultaneous collisions.
- Run memory/profile track for object pool usage to ensure reuse works.

Where to update this doc
------------------------
- If you change damage_info shape, update `docs/ARCHITECTURE.txt` and this file.


=====================================
FILE: ./docs/ROADMAP.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗  ██████╗  █████╗ ██████╗ ███╗   ███╗ █████╗ ██████╗                ║
║   ██╔══██╗██╔═══██╗██╔══██╗██╔══██╗████╗ ████║██╔══██╗██╔══██╗               ║
║   ██████╔╝██║   ██║███████║██║  ██║██╔████╔██║███████║██████╔╝               ║
║   ██╔══██╗██║   ██║██╔══██║██║  ██║██║╚██╔╝██║██╔══██║██╔═══╝                ║
║   ██║  ██║╚██████╔╝██║  ██║██████╔╝██║ ╚═╝ ██║██║  ██║██║                    ║
║   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝                    ║
║                                                                              ║
║          The long-term vision and planned features for the project.          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              VERSION 1.0 GOALS - THE POLISHED SLICE                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The primary objective is to create a single, complete, and highly          ║
║   polished gameplay loop that serves as a benchmark for the entire game.     ║
║                                                                              ║
║   █  A Dynamic Boss: Arena 00 boss is fully functional with multiple,        ║
║      telegraphed attack patterns and basic AI (patrolling, facing player).   ║
║                                                                              ║
║   █  Functional HUD: Clear displays for player health, boss health, and      ║
║      healing charges.                                                        ║
║                                                                              ║
║   █  Satisfying Feedback: All core actions are accompanied by appropriate    ║
║      SFX, VFX (hit-flash, particles), and screen shake. The game feels good. ║
║                                                                              ║
║   █  Complete Flow: Player can go from Title -> Game -> Win/Loss -> Title    ║
║      with smooth transitions.                                                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         FUTURE VERSIONS                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▓  v1.1 - "The Content Expansion"                                          ║
║      Focus shifts to expanding content and adding a new dimension to combat. ║
║      ░  ■ Introduce a Second Arena & Boss (e.g., a flying or agile enemy).   ║
║      ░  ■ Introduce a "Minion" Enemy Type for more varied encounters.        ║
║      ░  ■ Refine Player Combat Indicators (Fizzle & Charge Meter).           ║
║                                                                              ║
║   ▓  v2.0 - "The Full Game Loop"                                             ║
║      Transforms the project from encounters into a cohesive game.            ║
║      ░  ■ Implement a Stage Select Screen.                                   ║
║      ░  ■ Basic Progression (Defeating a boss unlocks the next stage).       ║
║      ░  ■ Introduce More Enemy Variety (e.g., a stationary turret).          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                         DREAM FEATURES                               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A "blue sky" list of ideas to explore once the core game is robust.        ║
║                                                                              ║
║   ■  Advanced Boss Mechanics (Multi-stage health, cinematic `Path2D` moves). ║
║   ■  Expanded Player Abilities (Unlockable weapons/skills post-boss fight).  ║
║   ■  Deeper Lore & Narrative (Expand on "Determination" theme).              ║
║   ■  Official GitHub Wiki for community documentation.                       ║
║   ■  Robust Debug Tools (More hotkeys and overlays).                         ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/PLAYTESTING.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═════════════╗
║  ██████╗ ██╗      █████╗ ██╗   ██╗████████╗███████╗███████╗████████╗██╗███╗   ██╗ ██████╗  ║
║  ██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║████╗  ██║██╔════╝  ║
║  ██████╔╝██║     ███████║ ╚████╔╝    ██║   █████╗  ███████╗   ██║   ██║██╔██╗ ██║██║  ███╗ ║
║  ██╔═══╝ ██║     ██╔══██║  ╚██╔╝     ██║   ██╔══╝  ╚════██║   ██║   ██║██║╚██╗██║██║   ██║ ║
║  ██║     ███████╗██║  ██║   ██║      ██║   ███████╗███████║   ██║   ██║██║ ╚████║╚██████╔╝ ║
║  ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝  ║ 
║                                                                              ╔═════════════╝
║           A log of all playtesting sessions and resulting feedback.          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PLAYTEST SESSION LOG                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   (New playtest session reports should be added here, most recent at top.)   ║
║                                                                              ║
║  --------------------------------------------------------------------------  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                      TEST SESSION TEMPLATE                           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Date: YYYY-MM-DD                                                        ║
║   █  Tester: [Name or description, e.g., "Developer," "Friend A"]            ║
║   █  Build Version: [e.g., 0.1.0]                                            ║
║   █  Session Goal: [e.g., "Test boss fight fairness", "Check menu UI"]       ║
║                                                                              ║
║   ▓  General Observations & Player Behavior                                  ║
║      ░  What did the player do? Did they understand the goals? Where did     ║
║      ░  they go first? (e.g., "Tester immediately tried to wall-jump.")      ║
║                                                                              ║
║   ▓  Issues & Bugs Found                                                     ║
║      ░  List any bugs, crashes, or moments of confusion. Was anything        ║
║      ░  frustrating or unfair?                                               ║
║                                                                              ║
║   ▓  Positive Feedback                                                       ║
║      ░  What did the player say they enjoyed? What felt good to them?        ║
║      ░  (e.g., "Player audibly said 'nice' after a successful pogo.")        ║
║                                                                              ║
║   ▓  Suggestions & Ideas                                                     ║
║      ░  What did the player suggest? Did they have any ideas for new         ║
║      ░  features or changes?                                                 ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/BUGS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗ ██╗   ██╗ ██████╗ ███████╗                                         ║
║   ██╔══██╗██║   ██║██╔════╝ ██╔════╝                                         ║
║   ██████╔╝██║   ██║██║  ███╗███████╗                                         ║
║   ██╔══██╗██║   ██║██║   ██║╚════██║                                         ║
║   ██████╔╝╚██████╔╝╚██████╔╝███████║                                         ║
║   ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝                                         ║
║                                                                              ║
║             A tracker for all known issues, their status, and solutions.     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                             OPEN ISSUES                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   (All known bugs have been resolved.)                                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                             FIXED ISSUES                             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   □  [BUG-F007] Intermittent major hitch on first run or debug mode toggle.  ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Implemented a shader pre-warming system in `LoadingScreen`.║
║      ░  An off-screen `SubViewport` is used to instantiate key entities      ║
║      ░  (Player, Boss, Projectiles) for a single frame, which forces the     ║
║      ░  engine to compile their shaders before they are needed in the main   ║
║      ░  game scene. This eliminates the first-appearance stutter.            ║
║                                                                              ║
║   □  [BUG-F006] Significant stutter/hitch occurred on arena load.            ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Replaced the synchronous, blocking level generation with a ║
║      ░  new asynchronous system in `ArenaBuilder.gd`. The `build_level_async`║
║      ░  function now creates the level in batches, using `await` to yield    ║
║      ░  control back to the engine between batches. This prevents the main   ║
║      ░  thread from freezing, resulting in a smooth loading sequence managed ║
║      ░  by a new `LoadingScreen`.                                            ║
║                                                                              ║
║   □  [BUG-F005] Player death caused a physics crash.                         ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Scene changes in `game.gd`'s `_on_player_died` and         ║
║      ░  `_on_boss_died` functions were changed to `get_tree().call_deferred()`.║
║      ░  This prevents the engine from trying to delete a physics body while  ║
║      ░  it is still processing a physics callback.                           ║
║                                                                              ║
║   □  [BUG-F004] Hazard tiles did not deal contact damage.                    ║
║      ░  FIXED: 2025-08-07                                                    ║
║      ░  SOLUTION: Corrected the implementation in `ArenaBuilder.gd`. The     ║
║      ░  `_create_hazard_tile` function now creates a single `StaticBody2D`   ║
║      ░  that exists on both the "world" and "hazard" collision layers and is ║
║      ░  part of both corresponding groups, ensuring it's both solid and damaging.║
║                                                                              ║
║   □  [BUG-F003] Drop-through platforms ("-") were not functioning.           ║
║      ░  FIXED: 2025-08-06                                                    ║
║      ░  SOLUTION: Re-implemented the Down+Jump logic in the player's         ║
║      ░  `state_move` function. Corrected the platform's collision shape      ║
║      ░  position and group assignment in `game.gd`.                          ║
║                                                                              ║
║   □  [BUG-F002] Player pogo attack was not working correctly on all surfaces.║
║      ░  FIXED: 2025-08-05                                                    ║
║      ░  SOLUTION: Re-implemented the `_check_for_immediate_pogo()` physics   ║
║      ░  query to allow instant bounces on surfaces directly below the        ║
║      ░  player. Updated the `_trigger_pogo()` function to correctly handle   ║
║      ░  bouncing on enemy projectiles in addition to standard enemies.       ║
║                                                                              ║
║   □  [BUG-F001] Player was not taking contact damage from boss/hazards.      ║
║      ░  FIXED: 2025-08-05                                                    ║
║      ░  SOLUTION: During the state machine refactor, the player's            ║
║      ░  `CharacterBody2D` `collision_mask` was changed to ignore the         ║
║      ░  "enemy" and "hazard" layers. The mask was updated in `player.tscn`   ║
║      ░  to correctly detect these layers again, allowing the existing        ║
║      ░  `_check_for_contact_damage()` function to work as intended.          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


# BUGS.txt — Live Bug Tracker
# Legend:
#   ID — Optional local ID or GitHub Issue # if applicable.
#   [ ] — Open
#   [-] — In Progress
#   [x] — Fixed (date)

## Open
[ ] #— None at present.

## In Progress
[-] #— None at present.

## Fixed
[x] #101 — Pogo mechanic sometimes failed to register damage on boss (2025-08-09)
[x] #99  — Contact damage applied twice under rare conditions (2025-08-05)

# Notes:
# - This file is intentionally minimal. Add new items to "Open" as:
#   [ ] # — Short title (owner | date) + one-line reproduction steps
# - If you create a GitHub Issue for an item, add the issue number after the bracket:
#   [ ] #14 — Example bug title (alice | 2025-08-11)


   □  [BUG-UI001] Inconsistent Back Button Centering in Sub-Menus.
      ░  STATUS: OPEN
      ░  DESCRIPTION: The "Back" button in the Sound and Controls menus is not
      ░  perfectly centered horizontally, unlike the button in the Credits menu.
      ░  This is likely due to a conflict between manual positioning and the
      ░  parent container's layout logic.
      ░  DEFERRED: A full UI overhaul is planned for a future sprint. This
      ░  minor visual bug will be resolved then.

         □  [BUG-RENDER001] Debug collision shapes are culled at viewport edges.
      ░  STATUS: OPEN
      ░  DESCRIPTION: When running with "Visible Collision Shapes", the blue
      ░  debug lines for physics bodies that fall exactly on the camera's
      ░  viewport boundary are inconsistently rendered (often missing). This
      ░  appears to be a minor engine culling artifact.
      ░  DEFERRED: This is a debug-only visual issue and has no impact on
      ░  gameplay, final visuals, or actual collision detection. It is a very
      ░  low priority fix.

=====================================
FILE: ./docs/DOCS_PROTOCOL.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ██████╗  ██████╗  ██████╗ ███████╗                                         ║
║   ██╔══██╗██╔═══██╗██╔════╝ ██╔════╝                                         ║
║   ██║  ██║██║   ██║██║      ███████╗                                         ║
║   ██║  ██║██║   ██║██║   ██╗╚════██║                                         ║
║   ██████╔╝╚██████╔╝╚██████╔╝███████║                                         ║
║   ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝                                         ║
║                                                                              ║
║    ██████╗ ██████╗  ██████╗ ████████╗ ██████╗  ██████╗  ██████╗ ██╗          ║
║    ██╔══██╗██╔══██╗██╔═══██╗╚══██╔══╝██╔═══██╗██╔════╝ ██╔═══██╗██║          ║
║    ██████╔╝██████╔╝██║   ██║   ██║   ██║   ██║██║      ██║   ██║██║          ║
║    ██╔═══╝ ██╔══██╗██║   ██║   ██║   ██║   ██║██║   ██╗██║   ██║██║          ║
║    ██║     ██║  ██║╚██████╔╝   ██║   ╚██████╔╝╚██████╔╝╚██████╔╝███████╗     ║
║    ╚═╝     ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝     ║
║                                                                              ║
║           Project Documentation & Communication Formatting Standard          ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       DOCUMENTATION STANDARDS                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This document defines the visual and structural standards for all `.txt`   ║
║   project files. Its purpose is to maintain a cohesive, readable, and        ║
║   thematically appropriate aesthetic that reflects the game's design.        ║
║                                                                              ║
║   █  FILE STRUCTURE                                                          ║
║      All `.md` files essential for GitHub integration (README.md,            ║
║      LICENSE.md) will remain as Markdown. All other project documents        ║
║      (TODO, ROADMAP, DESIGN, etc.) will be `.txt` files following this guide.║
║                                                                              ║
║   █  DOCUMENT FRAME                                                          ║
║      Each document will be enclosed in a double-line box frame.              ║
║      (Characters: ╔ ╗ ╚ ╝ ║ ═ ╠ ╣)                                           ║
║                                                                              ║
║   █  TITLE BLOCK                                                             ║
║      Each document begins with its custom ASCII art title block, followed    ║
║      by a one-line subtitle describing its purpose.                          ║
║                                                                              ║
║   █  SECTION HEADERS                                                         ║
║      Major sections are demarcated with a dithered block header. The text    ║
║      should be centered and padded within the solid blocks.                  ║
║                                                                              ║
║        ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ║
║        ██                        SECTION TITLE                         ██    ║
║        ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ║
║                                                                              ║
║   █  BODY TEXT & PARAGRAPHS                                                  ║
║      Standard body text should be indented by 2 spaces from the main frame.  ║
║      Paragraphs should have a single blank line between them for spacing.    ║
║      Text should be manually wrapped to fit within the document frame.       ║
║                                                                              ║
║   █  BULLET POINTS & HIERARCHY (PRIORITY GRADIENT)                           ║
║      Lists will use dithered blocks to indicate importance or sequence.      ║
║      All bullet points should be indented by 3 spaces. Sub-points should     ║
║      be indented an additional 2 spaces using the `░` character.             ║
║                                                                              ║
║        █  Primary Point / Critical Item / Most Important                     ║
║        ▓  Secondary Point / High Priority                                    ║
║        ▒  Tertiary Point / Medium Priority                                   ║
║        ░  Note, Sub-point, or Low Priority Item                              ║
║                                                                              ║
║        ■  Checklist item (complete).                                         ║
║        □  Checklist item (incomplete).                                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 ARCHIVE OF ADVANCED & ESOTERIC STYLES                ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   The following are alternative formatting ideas. They are archived here for ║
║   future inspiration but are not part of the current standard to maintain    ║
║   simplicity and consistency.                                                ║
║                                                                              ║
║   ▒  Progress Bars & Status Indicators                                       ║
║      Use the priority gradient to create visual progress meters.             ║
║                                                                              ║
║      ░  LOADING       █████████████▓▓▓▓▒▒▒░░░ 73%                            ║
║      ░  BOSS HEALTH   ████████▓▓▓▓▒▒▒▒░░░░░░░░ 58%                           ║
║                                                                              ║
║   ▒  Circuit Board Style                                                     ║
║      A highly technical aesthetic for documents like ARCHITECTURE.txt.       ║
║                                                                              ║
║      ┌─┬─┬─┬─┬─┬─┬─┬─┬── SECTION ──┬─┬─┬─┬─┬─┬─┬─┬─┐                         ║
║      │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │                         ║
║      └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘                         ║
║                                                                              ║
║   ▒  PETSCII-style Graphics                                                  ║
║      A retro computer aesthetic using block and pattern characters.          ║
║                                                                              ║
║      ▗▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▖     ║
║      ▐ ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚  SECTION TITLE HERE  ▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚▚ ▌     ║
║      ▝▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▘     ║
║                                                                              ║
║   ▒  Geometric Separators                                                    ║
║      Use repeating patterns to divide sections instead of headers.           ║
║                                                                              ║
║      ◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇                    ║
║      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼            ║
║                                                                              ║
║   ▒  Square Density Patterns                                                 ║
║      An alternative to the priority gradient for status tracking.            ║
║                                                                              ║
║      ■■■■■■■■■■ COMPLETE                                                     ║
║      ■■■■■■■□□□ IN PROGRESS                                                  ║
║      ■□□□□□□□□□ PLANNED                                                      ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/sprint_0_audit/TEST-002_Smoke_Tests.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/TEST-001_Baseline_Metrics.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/FSM-001_Entity_State_Flows.md
=====================================
# State Machine Flow Diagrams

**Date:** 2025-08-10

**Status:** Documented

---

This document provides a visual representation of the Finite State Machines (FSMs) for the core entities in the game. These diagrams are generated using Mermaid syntax and represent the logical flow of states based on player input and game physics.

## Player State Machine

The Player FSM is complex and responsive, designed to facilitate a fluid and expressive moveset. The core loop revolves around the `Move`, `Fall`, and `Jump` states, with multiple entry points into action states like `Dash` and `Attack`.

```mermaid
graph TD
    subgraph Core Movement
        MOVE <-->|Gravity/On Floor| FALL;
        MOVE -->|Jump Input| JUMP;
        FALL -->|Coyote Time Jump| JUMP;
        JUMP -->|Apex Reached| FALL;
    end

    subgraph Wall Interaction
        FALL -->|Holding Direction into Wall| WALL_SLIDE;
        JUMP -->|Holding Direction into Wall| WALL_SLIDE;
        WALL_SLIDE -->|Jump Input| JUMP;
        WALL_SLIDE -->|Not Holding Direction| FALL;
    end

    subgraph Action States
        MOVE --> DASH;
        FALL --> DASH;
        JUMP --> DASH;
        WALL_SLIDE --> DASH;
        DASH -->|Duration Ends| FALL;

        MOVE --> ATTACK;
        FALL --> ATTACK;
        JUMP --> ATTACK;
        WALL_SLIDE --> ATTACK;
        ATTACK -->|Duration Ends| FALL;
    end

    subgraph Special States
        ANY_STATE[Any State] -->|Takes Damage| HURT;
        HURT -->|Knockback Ends| FALL;
        MOVE -->|Hold Heal Buttons| HEAL;
        HEAL -->|Buttons Released| MOVE;
    end

    style MOVE fill:#cde4f0,stroke:#333,stroke-width:2px
    style FALL fill:#cde4f0,stroke:#333,stroke-width:2px
    style JUMP fill:#cde4f0,stroke:#333,stroke-width:2px
    style WALL_SLIDE fill:#e8d1e8,stroke:#333,stroke-width:2px
    style DASH fill:#f0e4cd,stroke:#333,stroke-width:2px
    style ATTACK fill:#f0e4cd,stroke:#333,stroke-width:2px
    style HURT fill:#f8cbcb,stroke:#333,stroke-width:2px
    style HEAL fill:#d1e8d1,stroke:#333,stroke-width:2px


## Boss State Machine

The Base Boss FSM is a simple, predictable loop designed as a template for more complex behaviors. It cycles cleanly through its states based on timers.


graph TD
    COOLDOWN -->|Cooldown Timer Finishes| PATROL;
    PATROL -->|Patrol Timer Finishes| IDLE;
    IDLE -->|Immediately| ATTACK;
    ATTACK -->|Immediately| COOLDOWN;

    style COOLDOWN fill:#cde4f0,stroke:#333,stroke-width:2px
    style PATROL fill:#e8d1e8,stroke:#333,stroke-width:2px
    style IDLE fill:#f0e4cd,stroke:#333,stroke-width:2px
    style ATTACK fill:#f8cbcb,stroke:#333,stroke-width:2px


=====================================
FILE: ./docs/sprint_0_audit/event_usage.txt
=====================================
--- EventCatalog.gd ---
# src/core/event_catalog.gd
# This script serves as the canonical, central list of all event names in the project.
# By using these constants instead of raw strings, we gain IDE autocompletion and
# prevent typos that would lead to silent runtime failures.
extends Object
class_name EventCatalog

# --- Player Events ---
const PLAYER_HEALTH_CHANGED = "player.health_changed"
const PLAYER_HEALING_CHARGES_CHANGED = "player.healing_charges_changed"
const PLAYER_TOOK_DAMAGE = "player.took_damage"
const PLAYER_DIED = "player.died"

# --- Boss / Entity Events ---
const BOSS_HEALTH_CHANGED = "boss.health_changed"
const BOSS_DIED = "boss.died"

# --- Game State Events ---
const GAME_PAUSED = "game.paused"
const GAME_RESUMED = "game.resumed"

# --- UI State Events ---
const MENU_OPENED = "ui.menu_opened"
const MENU_CLOSED = "ui.menu_closed"

--- EventBus.on() Subscriptions ---
src/ui/game_hud/game_hud.gd:17:	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
src/ui/game_hud/game_hud.gd:18:	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
src/ui/game_hud/game_hud.gd:19:	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
src/ui/global_hud/global_hud.gd:35:	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
src/ui/global_hud/global_hud.gd:36:	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
src/scenes/game/game.gd:17:	_pause_token = EventBus.on(EventCatalog.GAME_PAUSED, _on_game_paused)
src/scenes/game/game.gd:18:	_resume_token = EventBus.on(EventCatalog.GAME_RESUMED, _on_game_resumed)


--- EventBus.emit() Emissions ---
src/ui/screens/controls_menu/controls_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/controls_menu/controls_menu.gd:70:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/credits_menu/credits_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/credits_menu/credits_menu.gd:60:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/options_menu/options_menu.gd:9:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/options_menu/options_menu.gd:61:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/sound_menu/sound_menu.gd:19:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/sound_menu/sound_menu.gd:47:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/title_screen/title_screen.gd:10:	EventBus.emit(EventCatalog.MENU_OPENED) # Announce that a menu is open
src/ui/screens/title_screen/title_screen.gd:42:	EventBus.emit(EventCatalog.MENU_CLOSED) # Announce that the menu is closing
src/core/sequencing/steps/emit_step.gd:16:	EventBus.emit(event_name, payload)
src/entities/boss/base_boss.gd:121:	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev, self)
src/entities/player/player.gd:127:	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev, self)
src/entities/player/player.gd:191:	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev, self)


=====================================
FILE: ./docs/sprint_0_audit/EVENT-001_Event_Flow_Map.md
=====================================
# Event Flow Map

**Date:** 2025-08-10
**Status:** Generated

---

This document maps all events defined in `EventCatalog.gd`. For each event, it lists all scripts that emit the event and all scripts that subscribe (listen) to it.

## Event: `PLAYER_HEALTH_CHANGED`

**Path:** `player.health_changed`

### Emitters (who sends this event?)
```
src/entities/player/player.gd:	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
```

---

## Event: `PLAYER_HEALING_CHARGES_CHANGED`

**Path:** `player.healing_charges_changed`

### Emitters (who sends this event?)
```
src/entities/player/player.gd:	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
```

---

## Event: `PLAYER_TOOK_DAMAGE`

**Path:** `player.took_damage`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `PLAYER_DIED`

**Path:** `player.died`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `BOSS_HEALTH_CHANGED`

**Path:** `boss.health_changed`

### Emitters (who sends this event?)
```
src/entities/boss/base_boss.gd:	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev, self)
```

### Listeners (who listens for this event?)
```
src/ui/game_hud/game_hud.gd:	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
```

---

## Event: `BOSS_DIED`

**Path:** `boss.died`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
No listeners found.
```

---

## Event: `GAME_PAUSED`

**Path:** `game.paused`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
src/scenes/game/game.gd:	_pause_token = EventBus.on(EventCatalog.GAME_PAUSED, _on_game_paused)
```

---

## Event: `GAME_RESUMED`

**Path:** `game.resumed`

### Emitters (who sends this event?)
```
No emitters found.
```

### Listeners (who listens for this event?)
```
src/scenes/game/game.gd:	_resume_token = EventBus.on(EventCatalog.GAME_RESUMED, _on_game_resumed)
```

---

## Event: `MENU_OPENED`

**Path:** `ui.menu_opened`

### Emitters (who sends this event?)
```
src/ui/screens/controls_menu/controls_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/credits_menu/credits_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/options_menu/options_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/sound_menu/sound_menu.gd:	EventBus.emit(EventCatalog.MENU_OPENED)
src/ui/screens/title_screen/title_screen.gd:	EventBus.emit(EventCatalog.MENU_OPENED) # Announce that a menu is open
```

### Listeners (who listens for this event?)
```
src/ui/global_hud/global_hud.gd:	_menu_opened_token = EventBus.on(EventCatalog.MENU_OPENED, _on_menu_opened)
```

---

## Event: `MENU_CLOSED`

**Path:** `ui.menu_closed`

### Emitters (who sends this event?)
```
src/ui/screens/controls_menu/controls_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/credits_menu/credits_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/options_menu/options_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/sound_menu/sound_menu.gd:	EventBus.emit(EventCatalog.MENU_CLOSED)
src/ui/screens/title_screen/title_screen.gd:	EventBus.emit(EventCatalog.MENU_CLOSED) # Announce that the menu is closing
```

### Listeners (who listens for this event?)
```
src/ui/global_hud/global_hud.gd:	_menu_closed_token = EventBus.on(EventCatalog.MENU_CLOSED, _on_menu_closed)
```

---



=====================================
FILE: ./docs/sprint_0_audit/ARCH-002_Acceptance_Criteria.md
=====================================
# ARCH-002: Refactoring Acceptance Criteria

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

This document serves as a high-level checklist for our entire refactoring initiative. A sprint's work is considered "done" when it meets its specific criteria, and the entire initiative is "done" when all items on this list are checked.

## Global Acceptance Criteria

The refactoring is complete when all of the following are true:

### Architectural Health
- [ ] **Single Source of State:** All mutable runtime state (player data, game state) is managed via `Resource`-based data containers, eliminating the "dual architecture" of stateful singletons.
- [ ] **Standardized Configuration:** All tunable gameplay values are sourced from `.tres` `Resource` files, not `Constants.gd` or hardcoded magic numbers. A validation system checks for missing configs at startup.
- [ ] **Explicit Dependencies:** Core components (`HealthComponent`, `CombatComponent`, etc.) receive their dependencies via a `setup(config, services)` method, not by calling global singletons directly.
- [ ] **Clear Communication Rules:** The `EventBus` is used for global, cross-system messages. Godot signals are used for local, intra-scene communication. Direct calls between components are minimized or eliminated.

### Testing & Verification
- [ ] **Baseline Metrics Met:** The refactored game performs equal to or better than the baseline metrics established in `TEST-001_Baseline_Metrics.md`.
- [ ] **Regression Tests Pass:** The game successfully passes all manual checks in the `TEST-003_Regression_Checklist.md`.
- [ ] **Smoke Tests Pass:** The game is verifiably stable and key systems are functional as defined in `TEST-002_Smoke_Tests.md`.

### Code Quality & Documentation
- [ ] **No Dead Code:** All old, replaced systems and scripts have been safely removed from the project.
- [ ] **Documentation Updated:** All relevant architectural documents (`README.md`, ADRs) have been updated to reflect the new patterns.
- [ ] **Linter/Formatter Clean:** The entire codebase is formatted consistently and passes static analysis checks without warnings.


=====================================
FILE: ./docs/sprint_0_audit/ARCH-001_Refactoring_Principles.md
=====================================
# ARCH-001: Refactoring Principles

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

To ensure our refactoring effort is focused, consistent, and successful, we must operate from a shared set of guiding principles. These principles will act as a tie-breaker when design decisions are unclear and will define the target state of our architecture.

## Guiding Principles

1.  **Work *With* the Engine, Not Against It.**
    *   **Rationale:** Our attempt to force a classic DI pattern failed because it fought Godot's startup lifecycle. All future architectural decisions must respect and leverage Godot's idiomatic patterns (nodes, scenes, signals, resources).
    *   **In Practice:** We will prefer solutions that feel natural in Godot over patterns that require complex workarounds to function.

2.  **Every Change Must Be Verifiable.**
    *   **Rationale:** Refactoring without testing is just moving code around. To prevent regressions, every significant change must be accompanied by a clear method of verification.
    *   **In Practice:** This means creating smoke tests, regression checklists, and eventually, automated unit tests. We will use the documents `TEST-002` and `TEST-003` to track this.

3.  **Prioritize Decoupling and Explicit Dependencies.**
    *   **Rationale:** The primary weakness of the current Service Locator pattern is that dependencies are hidden. Our goal is to make dependencies explicit.
    *   **In Practice:** Components and systems should receive their dependencies through a `setup()` method where possible, rather than calling global singletons in their internal logic. Communication should favor events (`EventBus`) for global messages and signals for local, parent-child messages.

4.  **Standardize Patterns; Eliminate "Dual Architectures".**
    *   **Rationale:** The audit identified several areas (state management, configuration) where two different patterns exist to solve the same problem. This increases cognitive load and maintenance cost.
    *   **In Practice:** We will choose a single, standard way to manage state (the `Resource`-based data pattern) and a single way to manage configuration (`tres` config resources), and migrate all existing code to these standards.

5.  **The Strangler Fig Pattern: Migrate Incrementally.**
    *   **Rationale:** Big-bang rewrites are risky and prone to failure. We will adopt the Strangler Fig pattern.
    *   **In Practice:** We will create the new, improved system alongside the old one. We will then migrate dependencies one by one to the new system. Once all dependencies are migrated, we can safely delete the old system. This ensures the game remains functional throughout the entire process.


=====================================
FILE: ./docs/sprint_0_audit/config_usage.txt
=====================================
src/ui/game_hud/game_hud.gd:22:	var max_health = Config.get_value("player.health.max_health", 5)
src/ui/game_hud/game_hud.gd:25:	boss_health_bar.max_value = Config.get_value("boss.stats.health", 30)
src/core/data/config/config.gd:14:# Example: Config.get_value("player.physics.speed")
src/entities/boss/base_boss.gd:31:	b_data.patrol_speed = Config.get_value("boss.stats.patrol_speed", 100.0)
src/entities/boss/base_boss.gd:57:		velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/components/combat_component.gd:23:	p_data.attack_cooldown_timer = Config.get_value("player.combat.attack_cooldown")
src/entities/components/combat_component.gd:37:	owner_node.velocity.y = -Config.get_value("player.physics.pogo_force")
src/entities/components/combat_component.gd:40:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/components/health_component.gd:47:	max_health = Config.get_value(config_paths.max_health, 10)
src/entities/components/health_component.gd:48:	invincibility_duration = Config.get_value(config_paths.get("invincibility", "player.health.invincibility_duration"), 1.0)
src/entities/components/health_component.gd:84:	var knockback_speed = Config.get_value(_knockback_config.speed, 400.0)
src/entities/components/health_component.gd:86:		knockback_speed = Config.get_value(_knockback_config.hazard_speed, knockback_speed)
src/entities/components/input_component.gd:24:		p_data.jump_buffer_timer = Config.get_value("player.physics.jump_buffer")
src/entities/components/input_component.gd:35:			if p_data.charge_timer >= Config.get_value("player.combat.charge_time"):
src/entities/player/player.gd:87:		p_data.wall_coyote_timer = Config.get_value("player.physics.wall_coyote_time")
src/entities/player/player.gd:120:	velocity.x = Input.get_axis("ui_left", "ui_right") * Config.get_value("player.physics.speed")
src/entities/player/player.gd:144:	if p_data.healing_charges >= Config.get_value("player.health.max_healing_charges"): return
src/entities/player/player.gd:146:	if p_data.determination_counter >= Config.get_value("player.combat.determination_per_charge"):
src/entities/player/states/state_jump.gd:6:	player.velocity.y = -Config.get_value("player.physics.jump_force")
src/entities/player/states/state_jump.gd:15:		player.velocity.y *= Config.get_value("player.physics.jump_release_dampener")
src/entities/player/states/state_jump.gd:26:	player.velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/player/states/state_dash.gd:9:	p_data.dash_duration_timer = Config.get_value("player.physics.dash_duration")
src/entities/player/states/state_dash.gd:10:	p_data.dash_cooldown_timer = Config.get_value("player.physics.dash_cooldown")
src/entities/player/states/state_dash.gd:11:	player.velocity = _get_dash_direction() * Config.get_value("player.physics.dash_speed")
src/entities/player/states/state_heal.gd:7:	player.healing_timer.start(Config.get_value("player.health.heal_duration"))
src/entities/player/states/state_wall_slide.gd:7:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/player/states/state_wall_slide.gd:14:	var gravity = Config.get_value("general.physics.gravity")
src/entities/player/states/state_wall_slide.gd:15:	var wall_slide_speed = Config.get_value("player.physics.wall_slide_speed")
src/entities/player/states/state_wall_slide.gd:38:	player.velocity.y = -Config.get_value("player.physics.wall_jump_force_y")
src/entities/player/states/state_wall_slide.gd:39:	player.velocity.x = p_data.last_wall_normal.x * Config.get_value("player.physics.wall_jump_force_x")
src/entities/player/states/state_attack.gd:6:	p_data.attack_duration_timer = Config.get_value("player.combat.attack_duration")
src/entities/player/states/state_attack.gd:7:	p_data.attack_cooldown_timer = Config.get_value("player.combat.attack_cooldown")
src/entities/player/states/state_attack.gd:33:		var friction = Config.get_value("player.combat.attack_friction")
src/entities/player/states/state_hurt.gd:8:	p_data.knockback_timer = Config.get_value("player.combat.knockback_duration")
src/entities/player/states/state_hurt.gd:11:	player.velocity.y += Config.get_value("general.physics.gravity") * delta
src/entities/player/states/state_fall.gd:27:		gravity_multiplier = Config.get_value("player.physics.fast_fall_gravity_multiplier")
src/entities/player/states/state_fall.gd:28:	player.velocity.y += Config.get_value("general.physics.gravity") * gravity_multiplier * delta
src/entities/player/states/state_fall.gd:40:	player.velocity.x = p_data.last_wall_normal.x * Config.get_value("player.physics.wall_jump_force_x")
src/entities/player/states/state_move.gd:6:	p_data.air_jumps_left = Config.get_value("player.physics.max_air_jumps")
src/entities/player/states/state_move.gd:10:	p_data.coyote_timer = Config.get_value("player.physics.coyote_time")
src/entities/player/states/state_move.gd:12:	player.velocity.y += Config.get_value("general.physics.gravity") * delta


=====================================
FILE: ./docs/sprint_0_audit/singleton_map.txt
=====================================

Settings="*res://src/core/data/config/settings.gd"
AudioManager="*res://src/core/systems/audio_manager.gd"
CursorManager="*res://src/core/systems/cursor_manager.gd"
Constants="*res://src/core/util/constants.gd"
AssetPaths="*res://src/core/util/asset_paths.gd"
GlobalHud="*res://src/ui/global_hud/global_hud.tscn"
GameManager="*res://src/core/systems/game_manager.gd"
ArenaBuilder="*res://src/core/building/arena_builder.gd"
EventBus="*res://src/core/events/event_bus.gd"
Sequencer="*res://src/core/sequencing/sequencer.gd"
Config="*res://src/core/data/config/config.gd"
Palette="*res://src/core/util/palette.gd"
ObjectPool="*res://src/core/systems/object_pool.gd"
PhysicsLayers="*res://src/core/util/physics_layers.gd"



=====================================
FILE: ./docs/sprint_0_audit/state_machine_flow.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/TEST-003_Regression_Checklist.md
=====================================


=====================================
FILE: ./docs/sprint_0_audit/ADR-002_Communication_Patterns.md
=====================================
# ADR-002: Communication Patterns (Signal vs. EventBus)

**Date:** 2025-08-10

**Status:** Adopted

---

## Context

The project utilizes two primary methods for communication between different parts of the codebase: Godot's built-in **Signal** system and our custom global **EventBus**. Without a clear standard, it can be ambiguous which tool to use, potentially leading to tightly-coupled systems that are difficult to maintain or debug.

This document defines the official standard for choosing a communication pattern.

## Decision

We will adhere to a clear "Local vs. Global" distinction for communication:

1. **Use Godot Signals for *Local* Communication.**
2. **Use the EventBus for *Global* Communication.**

---

### 1. Godot Signals: Local Communication

Signals are the preferred method for communication **within a single, self-contained scene** or between a parent node and its direct children. This represents a tightly-coupled, "owner-to-part" relationship.

**Use a Signal when:**
- A child node needs to tell its parent that something happened (e.g., a `Button` telling a `Menu` it was pressed).
- A parent node needs to broadcast a message to all of its direct children.
- A component needs to communicate its result back to its owner (e.g., `CombatComponent` emitting `pogo_bounce_requested` for `Player` to handle).

**Litmus Test:** If the sender and receiver are part of the same scene file (`.tscn`) and have a direct parent-child relationship, use a signal.

**Example (`player.gd`):**
```gdscript
# The HealthComponent (child) emits a signal.
signal died

# The Player (parent) listens to its own component.
health_component.died.connect(_on_health_component_died)
```

### 2. EventBus: Global Communication

The EventBus is the preferred method for communication **between disparate, decoupled systems**. The sender and receiver should have no direct knowledge of each other. This represents a loosely-coupled, "system-to-system" relationship.

**Use the EventBus when:**
- A gameplay event needs to be reflected in the UI (e.g., the Player's health changes, and the GameHUD must be updated).
- A UI action needs to trigger a global system change (e.g., a TitleScreen button opens a menu, and the GlobalHUD must show the mute icon).
- An entity in the game world needs to trigger an audio cue (e.g., the Boss dies, and the AudioManager needs to play a victory sound).

**Litmus Test:** If the sender and receiver are in completely different parts of the scene tree and do not know about each other's existence, use the EventBus.

**Example (player.gd emitting, game_hud.gd listening):**

```gdscript
# player.gd (Sender)
var ev = PlayerHealthChangedEvent.new()
EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev)

# game_hud.gd (Receiver)
EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
```

## Consequences

**Positive:** This standard provides a clear, unambiguous rule that is easy to follow, promoting clean architecture and preventing "spaghetti" code where everything is globally connected via the EventBus. It keeps scenes self-contained and makes systems highly modular.

**Negative:** None. This is a best-practice clarification that reduces cognitive overhead.

=====================================
FILE: ./docs/sprint_0_audit/ADR.mdADR-001_Service_Locator_Pattern.md
=====================================
# ADR-001: Global System Access via Autoload Singletons (Service Locator)

**Date:** 2025-08-10

**Status:** Accepted (Existing Pattern)

---

## Context

The project requires numerous cross-cutting services that need to be accessible from various parts of the codebase. These include core systems (EventBus, AudioManager, ObjectPool), data providers (Config, Settings, Palette), and utility services (AssetPaths, PhysicsLayers).

A simple and idiomatic way to achieve this in Godot is by using the **Autoload** feature, which creates a globally accessible singleton instance of a script or scene. This effectively implements the **Service Locator** design pattern, where any node in the game can directly access a service by its global name (e.g., `EventBus.emit()`, `Config.get_value()`).

## Decision

We will use the Godot Autoload (Service Locator) pattern as the primary mechanism for providing global services throughout the application.

This decision was made because it is the most direct, performant, and engine-idiomatic way to solve the problem of global access in Godot 4. It avoids the need for complex dependency injection frameworks or manual "prop-drilling" of dependencies through the node tree.

The audit file `singleton_map.txt` confirms there are currently 14 such services registered in `project.godot`.

## Consequences

### Positive:
-   **Simplicity & Speed:** Accessing a service is trivial (`ServiceName.method()`). There is no setup boilerplate required in consumer scripts.
-   **Performance:** Autoloads are instantiated once at startup, providing fast and reliable access.
-   **Decoupling:** Systems can communicate through a central service like `EventBus` without needing direct references to each other, as shown in `event_usage.txt`.

### Negative (Risks & Architectural Debt):
-   **Hidden Dependencies:** The dependencies of a script are not explicitly declared in its API. To know that `player.gd` depends on `Config`, one must read the entire script body. This makes the code harder to reason about.
-   **Difficult to Test:** This is the most significant drawback. It is very difficult to unit-test a script that calls a global singleton. You cannot easily replace `EventBus` with a "mock" or "fake" version for a test, which was the root cause of the failed DI refactor attempt.
-   **Risk of Tight Coupling:** Because services are so easy to access, it can encourage developers to create a "spaghetti" architecture where everything calls everything else, bypassing more structured communication patterns.
-   **Configuration Fragility:** The heavy reliance on string-based keys for services like `Config` and `EventBus` is fragile. A typo will result in a runtime error, not a compile-time one. The `config_usage.txt` file shows dozens of such calls, each being a potential point of failure.

---

## Next Steps (Refactoring Plan)

This pattern, while accepted, is the primary target for refinement in our upcoming refactoring sprints. The plan is not to eliminate autoloads, but to mitigate their negative consequences by:
1.  **Standardizing Configuration (Sprint 1):** Introduce validation to catch bad config paths at startup.
2.  **Unifying Data Architecture (Sprint 2):** Reduce the number of singletons that hold mutable state.
3.  **Refining Communication (Sprint 3):** Clarify when to use `EventBus` versus other patterns to reduce the risk of "spaghetti" code.


=====================================
FILE: ./docs/sprint_0_audit/STYLE-001_GDScript_Style_Guide.md
=====================================
# STYLE-001: GDScript Style Guide

**Date:** 2025-08-16
**Status:** Adopted

---

## Context

This document codifies the official style and formatting standards for all GDScript files in the project. The purpose is to maintain a cohesive, readable, and predictable codebase that is easy for any developer to navigate.

## Script Structure Standard

All `.gd` script files **MUST** adhere to the following structure and order:

1.  **File Path Header:** A single-line comment with the full `res://` path.
    ```gdscript
    # src/entities/player/player.gd
    ```
2.  **`@tool` Annotation:** If the script needs to run in the editor.
3.  **Class Docstring:** A multi-line `##` comment explaining the class's purpose.
4.  **`class_name` Declaration:** If applicable.
5.  **`extends` Declaration.**
6.  **Signals:** All `signal` definitions.
7.  **Enums:** All `enum` definitions.
8.  **Constants:** All `const` definitions.
9.  **`@export` Variables:** Grouped with `@export_group`.
10. **Node References:** All `@onready var` declarations.
11. **Public Member Variables:** Documented with a `##` comment.
12. **Private Member Variables:** Prefixed with an underscore `_`.
13. **Godot Lifecycle Methods:** `_ready`, `_process`, `_physics_process`, etc.
14. **Public Methods:** The primary API of the class.
15. **Private Methods:** Helper functions, prefixed with an underscore `_`.
16. **Signal Handlers:** All `_on_*` methods.

## Naming Conventions

-   **Classes & Nodes:** `PascalCase` (e.g., `Player`, `HealthComponent`).
-   **Files:** `snake_case` (e.g., `player.gd`, `health_component.gd`).
-   **Functions & Variables:** `snake_case` (e.g., `apply_damage`, `current_health`).
-   **Private Members:** `_snake_case` (e.g., `_player_node`).
-   **Constants & Enums:** `UPPER_SNAKE_CASE` (e.g., `CLOSE_RANGE_THRESHOLD`, `State.MOVE`).
-   **Interfaces:** `IPascalCase` (e.g., `IDamageable`, `IComponent`).

## Documentation

-   **Class Docstrings:** Use `##` on the lines before `class_name` to provide a high-level overview of the class's responsibility.
-   **Function/Variable Docstrings:** Use `##` on the line immediately preceding a function, signal, or public variable to generate an in-editor tooltip.
-   **Brevity:** Keep comments concise and focused on the "why," not the "what." The code should explain what it does; comments should explain why it does it that way.

=====================================
FILE: ./docs/sprint_0_audit/ADR.md
=====================================


=====================================
FILE: ./docs/ARCHITECTURE.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═════════════════╗
║  █████╗ ██████╗  ██████╗██╗  ██╗██╗████████╗███████╗ ██████╗████████╗██╗   ██╗██████╗ ███████╗ ║
║ ██╔══██╗██╔══██╗██╔════╝██║  ██║██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗██╔════╝ ║
║ ███████║██████╔╝██║     ███████║██║   ██║   █████╗  ██║        ██║   ██║   ██║██████╔╝█████╗   ║
║ ██╔══██║██╔══██╗██║     ██╔══██║██║   ██║   ██╔══╝  ██║        ██║   ██║   ██║██╔══██╗██╔══╝   ║
║ ██║  ██║██║  ██║╚██████╗██║  ██║██║   ██║   ███████╗╚██████╗   ██║   ╚██████╔╝██║  ██║███████╗ ║
║ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝ ║
║                                                                              ╔═════════════════╝
║          A high-level summary of the project's technical patterns.           ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       KEY ARCHITECTURAL PATTERNS                     ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Singleton-Driven Core (Service Locator)                                 ║
║      ░ Global systems (e.g., `AudioManager`, `ObjectPool`, `EventBus`) are   ║
║      ░ managed by Autoload singletons for universal, easy access.            ║
║                                                                              ║
║   █  Component-Based Entities                                                ║
║      ░ Entities (Player, Boss) are orchestrators for a collection of         ║
║      ░ single-responsibility components (e.g., `HealthComponent`). All       ║
║      ░ components extend the `IComponent` interface contract.                ║
║                                                                              ║
║   █  State Pattern for Logic                                                 ║
║      ░ Complex entity behavior is managed by a `BaseStateMachine`. Each state║
║      ░ (e.g., `StateMove`, `StateAttack`) is its own class, encapsulating    ║
║      ░ logic for a single behavior.                                          ║
║                                                                              ║
║   █  Data-Driven Design via Resources                                        ║
║      ░ All tunable gameplay values (damage, health, cooldowns) are defined   ║
║      ░ in custom `Resource` files (`.tres`), primarily `combat_config.tres`. ║
║      ░ This decouples game balance from code and allows for rapid tuning.    ║
║                                                                              ║
║   █  Owner-Driven Dependency Injection                                       ║
║      ░ This is the official DI pattern. An owner node (like `player.gd`) is  ║
║      ░ responsible for gathering its dependencies (child nodes, global configs)║
║      ░ in its `_ready()` function and injecting them into its components via ║
║      ░ their `setup()` method. Components NEVER call singletons directly.    ║
║                                                                              ║
║   █  Communication Patterns                                                  ║
║      ░ ■ Godot Signals: Used for **local**, intra-scene communication,       ║
║      ░   typically between a component and its owner or a child and parent.  ║
║      ░ ■ EventBus: Used for **global**, cross-system communication between   ║
║      ░   decoupled parts of the game (e.g., `Player` -> `GameHUD`).          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/ASSETS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║    █████╗ ███████╗███████╗███████╗████████╗███████╗                          ║
║   ██╔══██╗██╔════╝██╔════╝██╔════╝╚══██╔══╝██╔════╝                          ║
║   ███████║███████╗███████╗███████╗   ██║   ███████╗                          ║
║   ██╔══██║╚════██║╚════██║██╔════╝   ██║   ╚════██║                          ║
║   ██║  ██║███████║███████║███████╗   ██║   ███████║                          ║
║   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝   ╚═╝   ╚══════╝                          ║
║                                                                              ║
║        A registry for asset sources, licenses, and style guidelines.         ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                            STYLE GUIDE                               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Visual Style                                                            ║
║      ░  Overall: Clean, minimalist, and geometric.                           ║
║      ░  Color Palette: High-contrast grayscale for placeholders.             ║
║      ░  Shape Language: A strict adherence to square-based geometry.         ║
║      ░  Rectangles are only permitted for static environmental elements.     ║
║                                                                              ║
║   █  Audio Style                                                             ║
║      ░  Music: Chiptune-inspired, melodic, and loopable tracks.              ║
║      ░  Sound Effects: Crisp, digital, and immediately recognizable SFX.     ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                           ASSET SOURCES                              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  Graphics                                                                ║
║      ░  Source: All current visual assets (sprites, icons) are original      ║
║      ░  creations for this project.                                          ║
║      ░  License: N/A (Internal)                                              ║
║                                                                              ║
║   █  Audio                                                                   ║
║      ░  Source: All audio assets were generated by the project creator using ║
║      ░  paid subscriptions to ElevenLabs (SFX) and Udio (Music).             ║
║      ░  License: CC0 1.0 Universal (Public Domain).                          ║
║                                                                              ║
║   █  Fonts                                                                   ║
║      ░  Source: "M PLUS Rounded 1c" by the M+ FONTS PROJECT.                 ║
║      ░  License: SIL Open Font License (OFL).                                ║
║      ░  Source Link: `https://fonts.google.com/specimen/M+PLUS+Rounded+1c`   ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                      ATTRIBUTION REQUIREMENTS                        ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Per the CC0 license for audio and original creation for graphics, no       ║
║   attribution is required for any asset. It is good practice to keep the     ║
║   OFL.txt for the font with the project files.                               ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

=====================================
FILE: ./docs/CHANGELOG.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║

║      This version introduces a complete, professional-grade Continuous       ║
║      Integration and Deployment (CI/CD) pipeline. The build, packaging,      ║
║      and release process for all target platforms is now fully automated,    ║
║      ensuring consistent, repeatable, and error-free distributions.          ║
║                                                                              ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Implemented a new, multi-job GitHub Actions workflow defined in     ║
║      ░   `.github/workflows/main.yml`. This pipeline automates two key       ║
║      ░   development cycles:                                                 ║
║      ░   - **Development Builds:** On every push to the `main` branch, the   ║
║      ░     workflow automatically compiles the game for all target platforms ║
║      ░     and saves the results as downloadable `Artifacts` for internal    ║
║      ░     testing and validation.                                           ║
║      ░   - **Public Releases:** When a new version tag (e.g., `v0.10.4`) is  ║
║      ░     pushed, the workflow performs all builds and then automatically   ║
║      ░     creates a new, public GitHub Release, attaching the final,        ║
║      ░     polished game packages for the community.                         ║
║      ░ ■ Configured four parallel build jobs to compile and export the game  ║
║      ░   for **Windows**, **macOS**, **Linux**, and **Web**, ensuring that    ║
║      ░   cross-platform compatibility is tested continuously.                ║
║      ░ ■ Solved a critical build dependency by integrating dynamic           ║
║      ░   installation of Godot's export templates. The workflow now downloads ║
║      ░   the official `.tpz` archive, unpacks it, and correctly places the   ║
║      ░   template files in the expected directory, making the CI environment ║
║      ░   fully self-contained and resolving all "template not found" errors. ║
║      ░ ■ Implemented a robust post-build packaging and polishing strategy:   ║
║      ░   - **Asset Packaging:** All build outputs are now automatically      ║
║      ░     packaged into clean, platform-specific `.zip` archives. This      ║
║      ░     resolves the issue of a cluttered release page and provides users 
║      ░     with a simple, single download per platform.                      
║      ░   - **Filename Standardization:** Release assets are now consistently 
║      ░     named to clearly identify their target platform (e.g.,           
║      ░     `BOX-BATTLE-windows.zip`, `BOX-BATTLE-mac.zip`).                   
║      ░ ■ Resolved a critical asset upload conflict caused by filename        ║
║      ░   collisions between the Windows and Linux `.pck` files. This was     ║
║      ░   fixed with a pre-packaging rename step in the workflow.             ║
║      ░ ■ Correctly configured workflow permissions by adding                 ║
║      ░   `permissions: contents: write` to grant the `GITHUB_TOKEN` the      ║
║      ░   necessary scope to publish releases, fixing a `403 Forbidden` error.║
║                                                                              ║









║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 [0.9.0] - NO TITLE YET - 2025-XX-XX                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 


║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script by abstracting its     ║
║      ░   core responsibilities into three new, single-purpose components:    ║
║      ░   - `PlayerPhysicsComponent`: Now exclusively handles `move_and_slide`, gravity, and contact damage.
║      ░   - `PlayerAbilityComponent`: Manages the activation logic for all player actions (dash, heal, attack).
║      ░   - `PlayerResourceComponent`: Manages the economy of determination and healing charges.
║      ░ ■ Simplified the `Player` script to act as a pure "Orchestrator,"     ║
║      ░   responsible only for initializing components and handling signals.  ║
║      ░   The main `_physics_process` loop has been removed from `player.gd`. ║
║      ░ ■ Formalized the `IComponent` and `IDamageable` interface contracts   ║
║      ░   and applied them consistently across all relevant components.       ║
║                                                                              ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established and applied a formal, project-wide cosmetic standard to ║
║      ░   every script file, standardizing layout, naming, and formatting.    ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all classes, methods, ║
║      ░   and variables, providing proper in-editor tooltips and integrated help.║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the entire codebase to improve static safety.         ║
║      ░ ■ Enhanced shader pre-warming to include entity actions, significantly║
║      ░   reducing first-action stutter at the start of a match.              ║
║                                                                              ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted all obsolete arena baking and layout scripts (`ArenaBakerTest`,
║      ░   `ArenaStage`, `arena_00_layout.gd`, `arena_00_encounter.gd`).       ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved all parse errors and static analysis warnings, including   ║
║      ░   autoload name collisions, incorrect static calls, and missing `@tool`
║      ░   annotations, for a completely clean build.                          ║
║                                                                              ║






║                                                                              ║
║      This version completes a full-scale refactor of the entire codebase to  ║
║      enhance modularity and establish a strict, project-wide code style for  ║
║      readability, consistency, and in-editor documentation.                  ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script by abstracting its     ║
║      ░   core responsibilities into three new, single-purpose components:    ║
║      ░   - `PlayerPhysicsComponent`: Now exclusively handles `move_and_slide`, gravity, and contact damage.
║      ░   - `PlayerAbilityComponent`: Manages the activation logic for all player actions (dash, heal, attack).
║      ░   - `PlayerResourceComponent`: Manages the economy of determination and healing charges.
║      ░ ■ Simplified the `Player` script to act as a pure "Orchestrator,"     ║
║      ░   responsible only for initializing components and handling signals.  ║
║      ░   The main `_physics_process` loop has been removed from `player.gd`. ║
║                                                                              ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established and applied a formal, project-wide cosmetic standard to ║
║      ░   every script file. All scripts now follow a consistent layout:      ║
║      ░   file path header, docstring, signals, enums, constants, exports,    ║
║      ░   variables, lifecycle methods, public methods, and signal handlers.  ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all classes, methods, ║
║      ░   and variables, providing proper in-editor tooltips and integrated help.║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the entire codebase to improve static safety.         ║
║                                                                              ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted the obsolete `arena_00_encounter.gd` and `arena_00_layout.gd`║
║      ░   scripts, which were fully replaced by the `.tres` resource system.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a fundamental architectural conflict by removing `class_name`║
║      ░   declarations from all autoloaded singletons, fixing a cascade of    ║
║      ░   "hides an autoload singleton" parse errors.                          ║
║      ░ ■ Resolved all `MISSING_TOOL` warnings by removing the erroneous      ║
║      ░   `@tool` annotation from the abstract `BaseState` class.             ║
║      ░ ■ Corrected an invalid `static` function call in `base_boss.gd` by    ║
║      ░   adding the missing `static` keyword to `SceneValidator.gd`.         ║
║      ░ ■ Corrected all remaining `STATIC_CALLED_ON_INSTANCE` warnings by     ║
║      ░   using the correct script-class syntax for static method calls.      ║
║      ░ ■ Fixed a parse error in `HealthComponent` caused by an invalid       ║
║      ░   `get()` call with a default parameter on a Resource.                ║
║      ░ ■ Resolved a variable scoping error in `base_boss.gd` after renaming  ║
║      ░   the `player` reference to `_player`.                                ║
║                                                                              ║



-------


║      This  completes a major refactor of the Player entity to enhance ║
║      modularity and establishes a strict, project-wide code style standard   ║
║      to improve readability, consistency, and in-editor documentation.       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script by abstracting its     ║
║      ░   core responsibilities into three new, single-purpose components:    ║
║      ░   - `PlayerPhysicsComponent`: Now exclusively handles `move_and_slide`, gravity, and contact damage detection.
║      ░   - `PlayerAbilityComponent`: Manages the activation logic and rules for all player actions (dash, heal, attack).
║      ░   - `PlayerResourceComponent`: Manages the "economy" of determination and healing charges.
║      ░ ■ Simplified the `Player` script to act as a pure "Orchestrator,"     ║
║      ░   responsible only for initializing components and handling signals.  ║
║      ░   The main `_physics_process` loop has been removed from `player.gd`. ║
║                                                                              ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established a formal, project-wide cosmetic restructuring standard. ║
║      ░   All scripts now follow a consistent layout: file path header,       ║
║      ░   docstring, signals, enums, constants, exports, variables, lifecycle ║
║      ░   methods, public methods, private methods, and signal handlers.      ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all key classes,      ║
║      ░   functions, and variables, providing proper in-editor tooltips and   ║
║      ░   integrated help documentation.                                      ║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the refactored player scripts to improve static safety.║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved all static analysis warnings introduced by the refactor,   ║
║      ░   including `UNUSED_PARAMETER`, `UNUSED_SIGNAL`, and                  ║
║      ░   `STATIC_CALLED_ON_INSTANCE` errors in the player components.        ║
║                                                                              ║

-------

║   █  Architectural Changes                                                   ║
║      ░ ■ Abstracted the input system by refactoring `InputComponent` to use a║
║      ░   command buffer. All player states now read from this buffer         ║
║      ░   instead of polling the global `Input` singleton, fully decoupling   ║
║      ░   game logic from hardware input.                                     ║
║      ░ ■ Centralized core physics logic by creating an `apply_gravity`       ║
║      ░   helper function on the Player node. Duplicated gravity calculations ║
║      ░   were removed from all relevant states, adhering to the DRY principle.║
║      ░ ■ Established a new `FXManager` singleton to serve as a dedicated     ║
║      ░   subsystem for "game feel" effects. This separates purely aesthetic  ║
║      ░   feedback (like hit-stop) from core gameplay components, improving   ║
║      ░   modularity and adhering to SRP.                                     ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a toggleable Developer Debug Overlay (F1) that displays ║
║      ░   the player's real-time state and velocity, significantly speeding up║
║      ░   the debugging and tuning process.                                   ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a crash in `game.gd` caused by calling an `Input` singleton║
║      ░   method on an `InputEvent` object in the `_unhandled_input` function.║
║                                                                              ║

-------


   █  Editor & Tooling
      ░ ■ Successfully created a proof-of-concept "baking" tool that can
      ░   procedurally generate a permanent tree of `ColorRect` nodes from a
      ░   `LevelLayout` resource. This achieved the goal of a WYSIWYG editor
      ░   preview for our data-driven levels and validated the workflow of
      ░   generating scene content from `@tool` scripts. This success paves
      ░   the way for a final migration to a more robust, native `TileMap` workflow.

-------


   █  Code Quality & Tooling
      ░ ■ Improved clarity by renaming variables in core systems (`GameManager`,
      ░   `ArenaBuilder`, etc.) to accurately reflect the new data-driven
      ░   architecture (e.g., `encounter_script_path` -> `encounter_path`).
      ░ ■ Enhanced the designer workflow by adding `@export_group` annotations
      ░   to the `EncounterData` resource, organizing its properties into
      ░   clean, collapsible sections in the Godot Inspector.
      ░ ■ Added a configuration warning system to the `LevelLayout` resource.
      ░   This `@tool` script now automatically checks if all rows in the
      ░   terrain data have the same length and will notify the editor if an
      ░   invalid layout is detected.

--------------------

   █  Architectural Changes
      ░ ■ Completed a major refactor of the encounter and level definition
      ░   system. All arena data has been moved from hardcoded `.gd` scripts
      ░   into new, data-driven custom resources (`EncounterData.tres`,
      ░   `LevelLayout.tres`).
      ░ ■ The `ArenaBuilder` and `LevelParser` have been updated to be fully
      ░   data-driven, loading and parsing these new `.tres` files at runtime.
      ░   This decouples level design from game logic and makes creating new
      ░   encounters a code-free, designer-friendly process.

   █  Removed
      ░ ■ Deleted the obsolete `arena_00_encounter.gd` and `arena_00_layout.gd`
      ░   scripts, as their data is now stored in `.tres` resources.

   █  Editor & Tooling
      ░ ■ **[Deferred]** An attempt was made to create a universal `@tool` scene
      ░   (`ArenaStage`) that would visually render `LevelLayout` data directly
      ░   in the 2D editor. Both custom drawing (`_draw`) and programmatic
      ░   `TileMap` generation were explored. The feature has been deferred
      ░   due to unresolved, deep-seated engine errors related to parsing
      ░   programmatically-generated `TileSet` resources in a pure code-first,
      ░   non-editor workflow. The runtime implementation remains stable and unaffected.

║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 [0.8.0] - NO TITLE YET - 2025-08-14                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║


 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Completed a full-scale UI refactor, migrating the entire menu
      ░   system to a new, scene-based architecture. All menus now exist as
      ░   self-contained scenes in a new `src/scenes/menus` directory,
      ░   built with robust Container nodes for consistent, editor-friendly layout.
      ░ ■ Deprecated and removed the `GlobalHud` autoload. Its functionality
      ░   was replaced by a new, reusable `MuteButton` component, which is
      ░   now instanced directly in each menu scene, improving encapsulation.
      ░ ■ Formalized the project's directory structure by creating dedicated
      ░   top-level scene folders (`menus`, `game_over`, `victory`), clarifying
      ░   the distinction between primary game states and reusable UI components.

   █  Added
      ░ ■ Created new, rebuilt versions of all menu screens (Title, Options,
      ░   Sound, Controls, Credits) using the new component-based architecture.
      ░ ■ Implemented `@tool` scripts across all new UI scenes, making them
      ░   fully visible and editable within the Godot editor.

   █  Changed
      ░ ■ Overhauled the `game_over` and `victory` screens, upgrading them to
      ░   the new `StyledMenuItem` component and modern scene structure.
      ░ ■ Standardized the naming convention for all UI-related assets (audio,
      ░   fonts, sprites) to a consistent `[type]_[context]_[descriptor]`
      ░   pattern (e.g., `music_menu_loop.mp3`).

   █  Removed
      ░ ■ Deleted the entire legacy `src/ui/screens` directory and all of its
      ░   obsolete, procedurally-generated menu files.
      ░ ■ Deleted the now-empty `src/scenes/dev` directory.
      ░ ■ Removed the obsolete `GlobalHud` scene and script files.
      ░ ■ Deleted all legacy `menu-item-*.png` sprite assets, which are no
      ░   longer used by the new procedurally drawn buttons.

   █  Fixed
      ░ ■ Permanently resolved all persistent `invalid UID` warnings by
      ░   manually re-saving all refactored scenes, forcing Godot to update
      ░   its asset database and cache. The project now runs with a clean log.
      ░ ■ Corrected all remaining script errors caused by the asset rename by
      ░   updating font and audio path constants in all components.

 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Deprecated the `GlobalHud` autoload in favor of a new, reusable
      ░   `GuiMuteButton` component placed directly in scenes. This completes
      ░   the shift to a fully component-based, scene-driven UI architecture,
      ░   eliminating a piece of legacy global state.

   █  Added
      ░ ■ Rebuilt and connected the entire menu flow (Title, Options, Sound,
      ░   Controls, Credits) using the new scene-based architecture.
      ░ ■ Implemented `@tool` scripts for all new menus, allowing them to be
      ░   visually rendered and laid out directly in the Godot editor.
      ░ ■ Added the new `GuiMuteButton` component to all menu screens for a
      ░   consistent user experience.

   █  Fixed
      ░ ■ Resolved a critical state synchronization bug in `MenuManager` that
      ░   caused unpredictable keyboard navigation after using the mouse. The
      ░   manager now correctly syncs its state with Godot's focus system.
      ░ ■ Hardened menu navigation by preventing non-button UI elements (sliders,
      ░   checkboxes, mute icon) from being part of the keyboard focus chain.
      ░ ■ Corrected the application's entry point to start the menu music
      ░   globally, ensuring it plays seamlessly across all menu scenes.
      ░ ■ Resolved a scene-loading crash caused by an incorrect `@onready`
      ░   variable in the new options menu script.

 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Began the official "UI Overhaul" by creating a new prototype title
      ░   screen (`gui_title_screen.tscn`) that is fully scene-based and
      ░   leverages Godot's Container nodes for a robust, designer-friendly
      ░   layout, establishing the pattern for all future menu development.

   █  Added
      ░ ■ Created `StyledMenuItem`, a new reusable, component-based menu item
      ░   that is procedurally drawn and highly configurable (size, text, font size).
      ░ ■ Created `LogoDisplay`, a new reusable component for interactive
      ░   footer logos with hover and press feedback.

   █  Fixed
      ░ ■ Resolved a critical input bug where only the first of several UI
      ░   components would correctly process mouse clicks. Components now use
      ░   the correct `mouse_filter` property for reliable, engine-idiomatic
      ░   input handling.


 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   state machine, fully decoupling all states from the global `CombatDB`
      ░   singleton. States now receive their configuration through the
      ░   `PlayerStateData` resource, which is populated by the `Player` owner
      ░   node. This completes a critical step in adhering to the Dependency
      ░   Inversion Principle, making states more modular and testable.
      ░ ■ Hardened system contracts by creating a new `Identifiers` singleton
      ░   to hold all string-based group names and pool keys. All scripts
      ░   were refactored to use these constants, eliminating the risk of
      ░   runtime errors from string typos and improving code safety.
      ░ ■ Refactored the `_ready` functions in `Player` and `BaseBoss` to
      ░   adhere to the Single Responsibility Principle. All initialization
      ░   logic is now delegated to smaller, clearly named helper methods,
      ░   improving code readability and maintainability.

   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   and BaseBoss state machines. All states are now fully decoupled from
      ░   global singletons and receive their configuration through their
      ░   respective data resources (`PlayerStateData`, `BossStateData`).
      ░ ■ Formalized the project's damage system by creating typed `Resource`
      ░   contracts (`DamageInfo`, `DamageResult`), replacing the previous
      ░   use of primitive integers and untyped Dictionaries for robust,
      ░   self-documenting, and type-safe combat interactions.
      ░ ■ Standardized all entity components, including `BaseStateMachine` and
      ░   `ArmorComponent`, to formally implement the `ComponentInterface`
      ░   contract. This unifies the lifecycle and setup for all entity
      ░   behaviors across the entire project.
      ░ ■ Refined `CombatUtils` to adhere to SRP; its sole responsibility is
      ░   now finding a valid `IDamageable` target.

   █  Fixed
      ░ ■ Resolved a visual bug where entity hit-flash colors would not reset
      ░   correctly. The `HealthComponent` now uses a more robust metadata-
      ░   based system to store and restore original entity colors.
      ░ ■ Fixed a "zombie minion" bug where Turrets would continue to fire
      ░   after the boss was defeated. The game director now deactivates all
      ░   minions upon boss death.
      ░ ■ Corrected a parse error in `Turret.gd` caused by an incorrect setup
      ░   call signature after the `BaseStateMachine` was refactored.
      ░ ■ Eliminated `STATIC_CALLED_ON_INSTANCE` warnings by refactoring all
      ░   calls to `CombatUtils.find_damageable` to use the correct static
      ░   script-based syntax.


 - - - start separating via the time it was submitted - - -

   █  Fixed
      ░ ■ Resolved a visual bug where the boss's hit-flash color would not
      ░   reset correctly. The `HealthComponent` now uses a more robust
      ░   metadata-based system to store and restore original entity colors.
      ░ ■ Fixed a bug where Turret minions would continue to fire after the
      ░   boss was defeated. The central `game.gd` script now finds and calls a
      ░   new `deactivate()` method on all remaining minions upon boss death.
      ░ ■ Resolved a critical autoload naming conflict caused by `class_name`
      ░   hiding the `Identifiers` singleton, which previously caused a cascade
      ░   of parse errors across the entire project.

 - - - start separating via the time it was submitted - - -


      ░ ■ Extended the "Owner-Driven Injection" pattern to the `BaseBoss`
      ░   and its state machine. All boss states are now fully decoupled
      ░   from global singletons, mirroring the clean architecture of the
      ░   Player and unifying the entity design across the project.


=====================================
FILE: ./docs/BRAINSTORM.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═══════╗
║    ██████╗ ██████╗  █████╗ ██╗███╗   ██╗███████╗████████╗ ██████╗ ██████╗ ███╗  ███╗ ║
║   ██╔══██╗██╔══██╗██╔══██╗██║████╗  ██║██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗████╗ ████║ ║
║   ██████╔╝██████╔╝███████║██║██╔██╗ ██║███████╗   ██║   ██║   ██║██████╔╝██╔████╔██║ ║
║   ██╔══██╗██╔══██╗██╔══██║██║██║╚██╗██║╚════██║   ██║   ██║   ██║██╔══██╗██║╚██╔╝██║ ║
║   ██████╔╝██║  ██║██║  ██║██║██║ ╚████║███████║   ██║   ╚██████╔╝██║  ██║██║ ╚═╝ ██║ ║
║   ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝ ║
║                                                                              ╔═══════╝
║              A free-form collection of creative ideas and experiments.       ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       BOX BATTLE BOSS CONCEPTS                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A categorized list of all potential boss ideas for the game. Each concept  ║
║   includes ideas for its theme, mechanics, and unique shader effects.        ║
║                                                                              ║
║   █  PUN-BASED CONCEPTS                                                      ║
║      ░ ■ Beat Box: Rhythm-based boss. Platforms and attacks sync to a beat.  ║
║      ░ ■ Sandbox: Deforms terrain, uses momentum-stealing attacks.           ║
║      ░ ■ Matchbox: Fire-themed, tight vertical arena, limited dash.          ║
║      ░ ■ Toolbox: Utility-themed, projectile-only combat.                    ║
║      ░ ■ Gearbox: Mechanical theme with rotating platforms and gravity shifts.║
║      ░ ■ Strongbox: Defense-themed, tries to corner player.                  ║
║      ░ ■ Icebox: Slippery physics, reduced friction.                         ║
║      ░ ■ Shoebox: Cramped arena, precise movement required.                  ║
║      ░ ■ Jukebox: Different songs change the environmental physics.          ║
║      ░ ■ Mailbox: Arena is filled with flying "letters" as platforms.        ║
║      ░ ■ Puzzle Box: Arena rearranges itself as movement puzzles are solved. ║
║      ░ ■ Shadow Box: Past movements leave shadow trails that become platforms.║
║      ░ ■ Cardboard Box: Platforms are fragile and break after use.           ║
║      ░ ■ Pandora's Box: Randomly opens to release temporary chaos effects.   ║
║      ░ ■ Rubik's Box: Arena rotates in 90-degree chunks.                     ║
║                                                                              ║
║   █  MEGA MAN-INSPIRED CONCEPTS                                              ║
║      ░ ■ Flame Box (Heat Man): Teleports in fire bursts, leaves flame trails.║
║      ░ ■ Ice Box (Ice Man): Slides with momentum, freezes platforms.         ║
║      ░ ■ Electric Box (Elec Man): Zips in straight lines at high speed.      ║
║      ░ ■ Wind Box (Air Man): Constant wind pushes player, affects jumps.     ║
║      ░ ■ Gravity Box (Gravity Man): Gravity flips, ceiling becomes floor.    ║
║      ░ ■ Time Box (Flash Man): Slow-motion bursts, delayed attacks.          ║
║      ░ ■ Plant Box (Wood Man): Platforms grow and shrink, sticky surfaces.   ║
║      ░ ■ Slash Box (Zero/Harpuia): Fast strikes cut through platforms.       ║
║      ░ ■ Phantom Box (Phantom): Stealth/clone attacks, false reflections.    ║
║                                                                              ║
║   █  LOOP-THEMED CONCEPTS                                                    ║
║      ░ ■ Infinite Box: Arena wraps around (left edge connects to right).     ║
║      ░ ■ Möbius Box: Twisted space; jumping up can make you fall down.       ║
║      ░ ■ Pendulum Box: Gravity shifts left/right in a rhythmic swing.        ║
║      ░ ■ Echo Box: Player inputs are repeated after a short delay.           ║
║      ░ ■ Ouroboros Box: The room slowly "eats" itself from the edges inward. ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                        SHADER & VFX BRAINSTORM                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of potential shader and visual effect ideas.                        ║
║                                                                              ║
║   ▒  Prism Box: Chromatic aberration effect, splits attacks into RGB channels.║
║   ▒  Void Box: Black hole distortion that pulls the player and projectiles.  ║
║   ▒  Static Box: Digital noise/glitch effects that can corrupt controls.     ║
║   ▒  Mirror Box: Kaleidoscope/reflection effects, duplicates player attacks. ║
║   ▒  Pulse Box: Rhythmic, concentric shockwave rings.                        ║
║   ▒  Phase Box: Flickers in and out of existence, unpredictable collision.   ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                   ADVANCED MOVEMENT & MECHANICS                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   ▒  Parrying System: A simple parry could stun the boss or grant the player ║
║      a momentum boost, rewarding precise timing.                             ║
║                                                                              ║
║   ▒  Ledge Grab: A brief pause/slowdown when hitting the top edge of a wall  ║
║      to create a more forgiving window for wall-jumping.                     ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           ADVANCED COMBAT & FEEDBACK CONCEPTS (from Audit)           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A collection of high-impact ideas for improving the "game feel" of combat. ║
║                                                                              ║
║   ▒  Hit-Stop / Hit-Freeze: A micro-pause (e.g., 0.05 seconds) of the entire ║
║      game simulation when a high-impact melee hit connects. This adds a      ║
║      feeling of weight and power to attacks.                                 ║
║                                                                              ║
║   ▒  Attack-Interrupting Windows: Specific boss telegraph animations could   ║
║      have a brief "vulnerable" window. Landing a hit during this window      ║
║      would interrupt the boss's attack and potentially trigger a mini-stun.  ║
║                                                                              ║
║   ▒  Cinematic Phase Transitions: When the boss's health crosses a threshold,║
║      it could enter a brief, invulnerable `PhaseChange` state, play a unique ║
║      animation or visual effect, and then resume combat with its new attack  ║
║      patterns. This makes the phase shifts feel like significant events.     ║
║                                                                              ║
║   ▒  Enhanced Stun Feedback: As the boss's stun meter fills, provide clear   ║
║      feedback to the player. This could include a subtle vignette effect, a  ║
║      pulsing glow on the boss, or a rising audio cue that indicates a stun   ║
║      is imminent.                                                            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 DEVELOPER TOOLS & TOOLING (from Audit)               ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Ideas for internal systems that would improve the development workflow.    ║
║                          _NOTE: This is not user-facing text._               ║
║                                                                              ║
║   ▒  Diagnostics Singleton: A dedicated global service for logging important ║
║      but non-crashing gameplay events. For example, it could record every    ║
║      time a pogo attack fails its physics check, or when a damage calculation║
║      is ignored due to invincibility. This would create a detailed log to help║
║      reproduce and debug subtle, hard-to-find edge cases.                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                UI / UX ENHANCEMENT CONCEPTS                          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A collection of high-impact, mobile-friendly UI effects inspired by        ║
║   modern web design (Framer) and arcade games (Geometry Wars).               ║
║                                                                              ║
║   █  Animation & Motion                                                      ║
║      ░ ■ Entrance Stack: Slide, scale, and fade-in menu items with a         ║
║      ░   slight overshoot and a staggered delay for a cascading reveal.      ║
║      ░   (Technique: `create_tween()` with `TRANS_BACK`)                     ║
║      ░ ■ Micro-motion / Idle Breathing: Subtle, slow, looping scale or       ║
║      ░   rotation animations on UI panels to keep the screen feeling alive.  ║
║      ░   (Technique: `AnimationPlayer` or looping `Tween`)                   ║
║      ░ ■ Directional Hover Parallax: Make text/icon layers on a button       ║
║      ░   shift slightly in the opposite direction of the mouse cursor.       ║
║      ░   (Technique: Child `Control` nodes, `Input.get_local_mouse_position()` + `lerp`)║
║      ░ ■ Energy Bursts on Click: A small burst of particles on button press. ║
║      ░   (Technique: `GPUParticles2D` with a low-count, short-lived emission)║
║                                                                              ║
║   █  Shape & Form (Procedural Drawing)                                       ║
║      ░ ■ Animated Rounded Corners: Tween the corner radius of a procedurally ║
║      ░   drawn shape on hover for a fluid morphing effect.                   ║
║      ░   (Technique: `_draw()` with `draw_circle` + `draw_rect`, property tween)║
║      ░ ■ Inset / Layered Borders: Use multiple `draw_rect` calls with        ║
║      ░   different palette colors and slight offsets to create a 2.5D bevel. ║
║      ░ ■ Chamfered Corners: Use `draw_polygon()` to create geometric cutouts.║
║      ░ ■ Dynamic Clipping Mask: Reveal content by animating the size of a    ║
║      ░   parent `Control` node with `clip_contents` enabled.                 ║
║                                                                              ║
║   █  Interactivity & Feedback                                                ║
║      ░ ■ Click Ripple: A circular ripple animates outwards from the click point.║
║      ░   (Technique: `_input()` + tweened properties + `draw_circle()`)      ║
║      ░ ■ Keyboard/Controller Focus Ring: A distinct visual state for non-mouse║
║      ░   selection, like a subtle pulsing of the existing glow effect.       ║
║      ░   (Technique: Animate `glow_size` property when `is_selected` is true)║
║      ░ ■ Haptic Feedback: Use `OS.vibrate()` on mobile for subtle physical feedback.║
║                                                                              ║
║   █  Simple & Efficient Shaders                                              ║
║      ░ ■ Sheen / Moving Highlight: A simple shader that moves a soft gradient║
║      ░   across a surface to simulate a glassy reflection.                   ║
║      ░   (Technique: `ShaderMaterial` with a `smoothstep` ramp, driven by `TIME`)║
║      ░ ■ Noise Grain Overlay: A subtle, low-alpha tiling noise texture to add║
║      ░   surface detail without blurring. (Technique: `TextureRect` with `BLEND_MODE_ADD`)║
║      ░ ■ Vertex Displacement Parallax: A very cheap shader that slightly     ║
║      ░   offsets vertices based on mouse position for a subtle 3D effect.    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                          FUTURE GAME SYSTEMS                         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   High-level ideas for new architectural components and features.            ║
║                                                                              ║
║   ▒  Advanced SFX Management                                                 ║
║      ░ Expand `AudioManager` to manage audio buses dynamically, limit voice  ║
║      ░ counts for specific sounds (e.g., footsteps), and handle positional   ║
║      ░ audio via `AudioStreamPlayer2D` nodes for world-space sound effects.  ║
║                                                                              ║
║   ▒  Dynamic Music System                                                    ║
║      ░ A system to dynamically layer or transition music based on combat     ║
║      ░ intensity, boss health phases, or location in the arena.              ║
║                                                                              ║
║   ▒  Object Pool Expansion                                                   ║
║      ░ Pool VFX particle effects (`GPUParticles2D` scenes).                  ║
║      ░ Pool common, weak minion types to optimize performance in encounters  ║
║      ░ with many enemies.                                                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                        GAMEPLAY ENHANCEMENTS                         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Ideas for mechanics and feedback to improve the player experience.         ║
║                                                                              ║
║   ▒  Combat Feel                                                             ║
║      ░ Attack-Interrupting Windows: Specific boss animations could have a    ║
║      ░ "vulnerable" window where a player hit interrupts the attack.         ║
║      ░ Cinematic Phase Transitions: When a boss changes phase, trigger a     ║
║      ░ brief, scripted sequence with unique animations or effects.           ║
║                                                                              ║
║   ▒  New Interfaces & Mechanics                                              ║
║      ░ `IInteractable`: For world objects the player can interact with.      ║
║      ░ Damage Type Enum: If combat complexity increases, create an enum for  ║
║      ░ `DamageType { MELEE, PROJECTILE, HAZARD }` to allow for resistances.  ║
║                                                                              ║
║   ▒  Boss Concepts                                                           ║
║      ░ Beat Box: Rhythm-based boss where platforms and attacks sync to music.║
║      ░ Gravity Box: Arena gravity flips periodically between floor and ceiling.
║      ░ Garden Box: Segmented, Centipede-style boss weaves through obstacles. ║
║      ░ Circuit Box: Tempest-style boss in the center of a circular arena.    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                     DEVELOPER EXPERIENCE & TOOLING                   ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Ideas for internal systems to improve the development workflow.            ║
║                                                                              ║
║   ▒  In-Game Debug Console                                                   ║
║      ░ A Quake-style dropdown console to run debug commands like `kill_boss`,║
║      ░ `give_heal`, `noclip`, or `set_player_speed`.                         ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝






=====================================
FILE: ./docs/ARENA_CONCEPTS.txt
=====================================
╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║    █████╗ ██████╗ ███████╗███╗   ██╗ █████╗     ██████╗  ██████╗ ███╗   ███╗ ║
║   ██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔══██╗   ██╔═══██╗██╔═══██╗████╗ ████║ ║
║   ███████║██████╔╝█████╗  ██╔██╗ ██║███████║   ██║   ██║██║   ██║██╔████╔██║ ║
║   ██╔══██║██╔══██╗██╔══╝  ██║╚██╗██║██╔══██║   ██║   ██║██║   ██║██║╚██╔╝██║ ║
║   ██║  ██║██║  ██║███████╗██║ ╚████║██║  ██║   ╚██████╔╝╚██████╔╝██║ ╚═╝ ██║ ║
║   ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝    ╚═════╝  ╚═════╝ ╚═╝     ╚═╝ ║
║                                                                              ║
║           A visual library of potential boss battle arena layouts.           ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                       PUN-THEMED ARENA MOCKUPS                       ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  "SANDBOX" - Momentum Vampirism                                          ║
║      SPECIAL RULE: No Wall-Jump ability. Boss steals player speed on hit.    ║
║      ####################                                                    ║
║      #..................#                                                    ║
║      #..@...........&...#                                                    ║
║      #..................#                                                    ║
║      #....##########....#                                                    ║
║      #....#........#....#                                                    ║
║      #....#..^^^^..#....#                                                    ║
║      #....#........#....#                                                    ║
║      #....##--##--##....#                                                    ║
║      #..................#                                                    ║
║      #..##...........##.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..#......--.....#.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..##...........##.#                                                    ║
║      #..................#                                                    ║
║      #^^^^^^^^....^^^^^^#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "MATCHBOX" - Fire Theme                                                 ║
║      SPECIAL RULE: Only ONE dash per ground contact.                         ║
║      ####################                                                    ║
║      #@.................#                                                    ║
║      #..................#                                                    ║
║      #..####....####....#                                                    ║
║      #..#..#....#..#....#                                                    ║
║      #..#..######..#....#                                                    ║
║      #..#..........#....#                                                    ║
║      #..#..--##--..#....#                                                    ║
║      #..#........&.#....#                                                    ║
║      #..#..--##--..#....#                                                    ║
║      #..#..........#....#                                                    ║
║      #..#..######..#....#                                                    ║
║      #..#..#....#..#....#                                                    ║
║      #..####....####....#                                                    ║
║      #..................#                                                    ║
║      #..^^^^^^^^^^^^^^..#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "ICEBOX" - Slippery Mechanics                                           ║
║      SPECIAL RULE: Reduced friction - momentum carries much further.         ║
║      ####################                                                    ║
║      #@................&#                                                    ║
║      #--................#                                                    ║
║      #..................#                                                    ║
║      #......########....#                                                    ║
║      #......#......#....#                                                    ║
║      #......#..--..#....#                                                    ║
║      #......#......#....#                                                    ║
║      #......########....#                                                    ║
║      #..................#                                                    ║
║      #........^^^^......#                                                    ║
║      #..................#                                                    ║
║      #......########....#                                                    ║
║      #......#......#....#                                                    ║
║      #......#..--..#....#                                                    ║
║      #......#......#....#                                                    ║
║      #......########....#                                                    ║
║      #..................#                                                    ║
║      #................--#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                     CLASSIC ARCADE-THEMED MOCKUPS                    ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   █  "CIRCUIT BOX" - Tempest-style                                           ║
║      MECHANIC: Boss in center shoots through tunnels. Player circles outer ring.║
║      ####################                                                    ║
║      #..................#                                                    ║
║      #..###############.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..#..##########.#.#                                                    ║
║      #..#..#........#.#.#                                                    ║
║      #..#..#..####..#.#.#                                                    ║
║      #..#..#..#&&#..#.#.#                                                    ║
║      #..#..#..####..#.#.#                                                    ║
║      #..#..#..@.....#.#.#                                                    ║
║      #..#..##########.#.#                                                    ║
║      #..#.............#.#                                                    ║
║      #..###############.#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
║   █  "GARDEN BOX" - Centipede-style                                          ║
║      MECHANIC: Boss is a long segmented entity weaving between obstacles.    ║
║      ####################                                                    ║
║      #@................&#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      #..##..##..##..##..#                                                    ║
║      #..................#                                                    ║
║      #....##..##..##....#                                                    ║
║      #..................#                                                    ║
║      ####################                                                    ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


=====================================
FILE: ./docs/DEPRECATION.md
=====================================
# Project Deprecation Map

This document tracks major file renames and moves across the entire project.

| Old Path | New Path | Reason | Date | Migration Note |
|---|---|---|---|---|
| `res://src/core/Config.gd` | `res://src/core/data/config/config.gd` | Architectural refactor | 2025-08-10 | Autoload path updated in `project.godot`. No script changes required. |
| `res://src/core/settings.gd` | `res://src/core/data/config/settings.gd` | Architectural refactor | 2025-08-10 | Autoload path updated in `project.godot`. No script changes required. |
| `res://src/core/events/*_event.gd` | `res://src/core/events/typed_events/*_event.gd` | Architectural refactor | 2025-08-10 | Update `preload` or `load` paths in scripts if referenced directly. |

=====================================
FILE: ./README.md
=====================================
# BOX BATTLE

```
██████╗  ██████╗ ██╗  ██╗    ██████╗  █████╗ ████████╗████████╗██╗     ███████╗
██╔══██╗██╔═══██╗╗██╗██╔╝    ██╔══██╗██╔══██╗╚══██╔══╝╚══██╔══╝██║     ██╔════╝
██████╔╝██║   ██║╚███╔╝      ██████╔╝███████║   ██║      ██║   ██║     █████╗  
██╔══██╗██║   ██║██╔██╗      ██╔══██╗██╔══██║   ██║      ██║   ██║     ██╔══╝  
██████╔╝╚██████╔╝██╔╝ ██╗    ██████╔╝██║  ██║   ██║      ██║   ███████╗███████╗
╚═════╝  ╚═════╝ ╚═╝  ╚═╝    ╚═════╝ ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝
```


A combat-focused 2D action game built in Godot 4. This repo contains the engine, gameplay systems, and tools used to produce a modular, maintainable boss-arena prototype.

**Current Status:** Architecturally stable. The codebase has been fully refactored to use a modular, component-based entity system, a standardized code style, and data-driven design patterns.

---

## Architectural Highlights
- **Component-Based Entities:** The Player and Boss are lean orchestrators for single-responsibility components (`HealthComponent`, `PlayerPhysicsComponent`, `IComponent` interface).
- **State Pattern:** Complex entity logic is encapsulated in discrete state classes (`BaseState`, `BaseStateMachine`).
- **Data-Driven Design:** All gameplay tuning is managed in `Resource` files (`.tres`) for easy balancing.
- **Robust Core Systems:** A suite of decoupled singletons manage global services (`EventBus`, `SceneManager`, `ObjectPool`, `AudioManager`).
- **Performance:** Stutter is minimized via asynchronous level building, object pooling, and enhanced shader pre-warming.

---

## Quick Start
1.  Install Godot 4.x.
2.  Clone the repository.
3.  Open the project in Godot and run `res://src/scenes/main/main.tscn`.

**Controls (default)**
-   Move: Arrow Keys / WASD
-   Jump / Confirm: X / Space / Enter
-   Attack / Pogo: C / Left-Click
-   Dash: Z / Shift
-   Heal: Down + Jump (on ground)

---

## Repository Layout

src/
├── api/ # "Interface" contracts (IComponent, IDamageable)
├── core/ # Autoloaded singletons and core infrastructure
├── data/ # Data resources (.tres files for encounters, layouts)
├── entities/ # Player, Boss, Minions, and their components/states
├── scenes/ # Main scenes (game, loading, menus)
├── ui/ # UI components, HUD, and menu controllers
└── ...
docs/ # High-level design, architecture, and style guide


---

## Key Documentation
-   `docs/ARCHITECTURE.txt`: A high-level summary of all key technical patterns.
-   `docs/sprint_0_audit/STYLE-001_GDScript_Style_Guide.md`: The official coding standard for the project.
-   `docs/DESIGN.txt`: The design philosophy and breakdown of core gameplay mechanics.
-   `docs/CHANGELOG.txt`: A log of all notable changes to the project.

=====================================
FILE: ./default_bus_layout.tres
=====================================
[gd_resource type="AudioBusLayout" format=3 uid="uid://c65ja7dwrkbrc"]

[resource]
bus/1/name = &"Music"
bus/1/solo = false
bus/1/mute = false
bus/1/bypass_fx = false
bus/1/volume_db = 0.0
bus/1/send = &"Master"
bus/2/name = &"SFX"
bus/2/solo = false
bus/2/mute = false
bus/2/bypass_fx = false
bus/2/volume_db = 0.0
bus/2/send = &"Master"

=====================================
FILE: ./.github/scripts/get_version.gd
=====================================
# .github/scripts/get_version.gd
# This script runs in the CI environment to get the version
# from project.godot and print it to the command line.
extends SceneTree

func _init():
    var version = ProjectSettings.get_setting("application/config/version")
    print(version)
    quit()

=====================================
FILE: ./project.godot
=====================================
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="BOX BATTLE"
config/version="0.10.4"
run/main_scene="res://src/scenes/main/main.tscn"
config/features=PackedStringArray("4.4", "Mobile")
config/icon="res://icon.svg"

[autoload]

Settings="*res://src/core/data/config/settings.gd"
AudioManager="*res://src/core/systems/audio_manager.gd"
CursorManager="*res://src/core/systems/cursor_manager.gd"
Constants="*res://src/core/util/constants.gd"
AssetPaths="*res://src/core/util/asset_paths.gd"
GameManager="*res://src/core/systems/game_manager.gd"
SceneManager="*res://src/core/systems/scene_manager.gd"
ArenaBuilder="*res://src/core/building/arena_builder.gd"
EventBus="*res://src/core/events/event_bus.gd"
Sequencer="*res://src/core/sequencing/sequencer.gd"
CombatDB="*res://src/core/data/combat_db.gd"
Palette="*res://src/core/util/palette.gd"
ObjectPool="*res://src/core/systems/object_pool.gd"
PhysicsLayers="*res://src/core/util/physics_layers.gd"
CombatUtils="*res://src/core/util/combat_utils.gd"
GridUtils="*res://src/core/util/grid_utils.gd"
CameraManager="*res://src/core/systems/camera_manager.gd"
Identifiers="*res://src/core/util/identifiers.gd"
FXManager="*res://src/core/systems/fx_manager.gd"

[display]

window/size/viewport_width=1800
window/size/viewport_height=1000
window/stretch/mode="canvas_items"

[input]

ui_left={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194319,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":65,"key_label":0,"unicode":97,"location":0,"echo":false,"script":null)
]
}
ui_right={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194321,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":68,"key_label":0,"unicode":100,"location":0,"echo":false,"script":null)
]
}
ui_up={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194320,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":87,"key_label":0,"unicode":119,"location":0,"echo":false,"script":null)
]
}
ui_down={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194322,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":83,"key_label":0,"unicode":115,"location":0,"echo":false,"script":null)
]
}
debug_toggle={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194332,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
]
}
ui_jump={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":32,"physical_keycode":32,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":88,"physical_keycode":88,"key_label":0,"unicode":120,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":46,"physical_keycode":46,"key_label":0,"unicode":46,"location":0,"echo":false,"script":null)
]
}
ui_attack={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":67,"physical_keycode":67,"key_label":0,"unicode":99,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":44,"physical_keycode":44,"key_label":0,"unicode":44,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":true,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":16777218,"physical_keycode":16777218,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":2,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
ui_dash={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":90,"physical_keycode":90,"key_label":0,"unicode":122,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":47,"physical_keycode":47,"key_label":0,"unicode":47,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":true,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":16777217,"physical_keycode":16777217,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":3,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}

[layer_names]

2d_physics/layer_1="player"
2d_physics/layer_2="world"
2d_physics/layer_3="enemy"
2d_physics/layer_4="hazard"
2d_physics/layer_5="enemy_projectile"
2d_physics/layer_6="player_hitbox"
2d_physics/layer_7="player_hurtbox"

[rendering]

renderer/rendering_method="mobile"
textures/vram_compression/import_etc2_astc=true
environment/defaults/default_clear_color=Color(0, 0, 0, 1)


=====================================
FILE: ./.vscode/settings.json
=====================================
{
    "godotTools.editorPath.godot4": "/Applications/Godot.app"
}

=====================================
FILE: ./data/combat_config.tres
=====================================
[gd_resource type="Resource" script_class="CombatConfig" load_steps=2 format=3 uid="uid://kov03lmcorvh"]

[ext_resource type="Script" path="res://src/core/data/config/combat_config.gd" id="1_config"]

[resource]
script = ExtResource("1_config")
gravity = 1200.0
player_speed = 450.0
player_jump_force = 680.0
player_pogo_force = 450.0
player_coyote_time = 0.1
player_jump_buffer = 0.1
player_jump_release_dampener = 0.4
player_wall_coyote_time = 0.05
player_fast_fall_gravity_multiplier = 1.4
player_max_air_jumps = 0
player_dash_speed = 1400.0
player_dash_duration = 0.15
player_dash_cooldown = 0.5
player_wall_slide_speed = 120.0
player_wall_jump_force_x = 1650.0
player_wall_jump_force_y = 680.0
player_attack_cooldown = 0.12
player_charge_time = 0.35
player_attack_duration = 0.1
player_attack_friction = 2000.0
player_knockback_speed = 700.0
player_knockback_duration = 0.1
player_hazard_knockback_speed = 400.0
player_determination_per_charge = 10
player_max_health = 5
player_heal_duration = 2.0
player_max_healing_charges = 1
player_invincibility_duration = 1.5
boss_health = 30
boss_patrol_speed = 100.0
boss_invincibility_duration = 0.1


=====================================
FILE: ./src/ui/game_hud/game_hud.gd
=====================================
# src/ui/game_hud/game_hud.gd
## Manages the in-game heads-up display.
##
## Subscribes to [EventBus] events to keep the player health, boss health,
## and phase indicators updated in real-time.
extends CanvasLayer

# --- Node References ---
@onready var player_health_value: Label = $PlayerInfo/PlayerHealthHBox/PlayerHealthValue
@onready var player_heal_charges_value: Label = $PlayerInfo/PlayerHealChargesHBox/PlayerHealChargesValue
@onready var boss_health_bar: ProgressBar = $BossHealthBar
@onready var phase_indicators: HBoxContainer = $PhaseIndicators

# --- Private Member Variables ---
var _phase_squares: Array[Panel] = []
var _total_phases: int = 3
var _player_health_token: int
var _player_charges_token: int
var _boss_health_token: int
var _boss_phase_token: int
var _boss_died_token: int
var _filled_style: StyleBoxFlat
var _empty_style: StyleBoxFlat

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	_subscribe_to_events()
	_create_styles()
	_initialize_ui_state()

func _exit_tree() -> void:
	_unsubscribe_from_events()

# --- Private Methods ---

func _subscribe_to_events() -> void:
	_player_health_token = EventBus.on(EventCatalog.PLAYER_HEALTH_CHANGED, on_player_health_changed)
	_player_charges_token = EventBus.on(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, on_player_healing_charges_changed)
	_boss_health_token = EventBus.on(EventCatalog.BOSS_HEALTH_CHANGED, on_boss_health_changed)
	_boss_phase_token = EventBus.on(EventCatalog.BOSS_PHASE_CHANGED, on_boss_phase_changed)
	_boss_died_token = EventBus.on(EventCatalog.BOSS_DIED, on_boss_died)

func _unsubscribe_from_events() -> void:
	EventBus.off(_player_health_token)
	EventBus.off(_player_charges_token)
	EventBus.off(_boss_health_token)
	EventBus.off(_boss_phase_token)
	EventBus.off(_boss_died_token)

func _initialize_ui_state() -> void:
	var max_health = CombatDB.config.player_max_health
	player_health_value.text = "%d / %d" % [max_health, max_health]
	player_heal_charges_value.text = "0"

	var health_bar_style = boss_health_bar.get_theme_stylebox("fill").duplicate()
	health_bar_style.bg_color = Palette.COLOR_PLAYER_PROJECTILE
	boss_health_bar.add_theme_stylebox_override("fill", health_bar_style)

	boss_health_bar.max_value = CombatDB.config.boss_health
	boss_health_bar.value = boss_health_bar.max_value

	phase_indicators.add_theme_constant_override("separation", 5)
	_create_phase_indicators()

func _create_styles() -> void:
	_filled_style = StyleBoxFlat.new()
	_filled_style.bg_color = Palette.COLOR_HAZARD_PRIMARY
	_filled_style.border_width_bottom = 3
	_filled_style.border_width_left = 3
	_filled_style.border_width_right = 3
	_filled_style.border_width_top = 3
	_filled_style.border_color = Palette.COLOR_UI_ACCENT_PRIMARY

	_empty_style = _filled_style.duplicate()
	_empty_style.bg_color = Palette.COLOR_BACKGROUND

func _create_phase_indicators() -> void:
	for i in range(_total_phases):
		var panel = Panel.new()
		panel.custom_minimum_size = Vector2(40, 40)
		phase_indicators.add_child(panel)
		_phase_squares.append(panel)
	_update_phase_visuals(_total_phases)

func _update_phase_visuals(phases_remaining: int) -> void:
	for i in range(_phase_squares.size()):
		var square = _phase_squares[i]
		if i < phases_remaining:
			square.add_theme_stylebox_override("panel", _filled_style)
		else:
			square.add_theme_stylebox_override("panel", _empty_style)

# --- EventBus Callbacks ---

func on_player_health_changed(payload: PlayerHealthChangedEvent) -> void:
	player_health_value.text = str(payload.current_health) + " / " + str(payload.max_health)

func on_player_healing_charges_changed(payload: PlayerHealingChargesChangedEvent) -> void:
	player_heal_charges_value.text = str(payload.current_charges)

func on_boss_health_changed(payload: BossHealthChangedEvent) -> void:
	boss_health_bar.max_value = payload.max_health
	boss_health_bar.value = payload.current_health

func on_boss_phase_changed(payload: Dictionary) -> void:
	var phases_remaining = payload.get("phases_remaining", 1)
	_update_phase_visuals(phases_remaining)

func on_boss_died(_payload) -> void:
	_update_phase_visuals(0)

=====================================
FILE: ./src/ui/game_hud/game_hud.tscn
=====================================
[gd_scene load_steps=4 format=3 uid="uid://c1qkhw0snj226"]

[ext_resource type="Script" path="res://src/ui/game_hud/game_hud.gd" id="1_3f8wa"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_1"]
bg_color = Color(0.262745, 0.262745, 0.262745, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_2"]
bg_color = Color(0.92549, 0.92549, 0.92549, 1)

[node name="GameHUD" type="CanvasLayer"]
script = ExtResource("1_3f8wa")

[node name="PlayerInfo" type="VBoxContainer" parent="."]
anchors_preset = 2
anchor_top = 1.0
anchor_bottom = 1.0
offset_left = 20.0
offset_top = -100.0
offset_right = 220.0
offset_bottom = -20.0
grow_vertical = 0

[node name="PlayerHealthHBox" type="HBoxContainer" parent="PlayerInfo"]
layout_mode = 2

[node name="PlayerHealthLabel" type="Label" parent="PlayerInfo/PlayerHealthHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "Health:"

[node name="PlayerHealthValue" type="Label" parent="PlayerInfo/PlayerHealthHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "5 / 5"

[node name="PlayerHealChargesHBox" type="HBoxContainer" parent="PlayerInfo"]
layout_mode = 2

[node name="PlayerHealChargesLabel" type="Label" parent="PlayerInfo/PlayerHealChargesHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "Heal Charges:"

[node name="PlayerHealChargesValue" type="Label" parent="PlayerInfo/PlayerHealChargesHBox"]
layout_mode = 2
theme_override_font_sizes/font_size = 24
text = "0"

[node name="BossHealthBar" type="ProgressBar" parent="."]
anchors_preset = 10
anchor_right = 1.0
offset_left = 250.0
offset_top = 20.0
offset_right = -250.0
offset_bottom = 50.0
grow_horizontal = 2
theme_override_styles/background = SubResource("StyleBoxFlat_1")
theme_override_styles/fill = SubResource("StyleBoxFlat_2")
max_value = 30.0
step = 1.0
value = 30.0
show_percentage = false

[node name="PhaseIndicators" type="HBoxContainer" parent="."]
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -220.0
offset_top = 20.0
offset_right = -20.0
offset_bottom = 60.0
grow_horizontal = 0
alignment = 2

=====================================
FILE: ./src/ui/menu_manager/menu_manager.gd
=====================================
# src/ui/menu_manager/menu_manager.gd
## A helper node that manages keyboard navigation and cursor display for a menu.
##
## This is intended to be instanced by a menu scene at runtime. It handles
## focus changes and draws selection cursors next to the focused item.
extends Node

# --- Member Variables ---
var menu_items: Array[Control] = []
var current_selection_index: int = 0

var _cursor_left: ColorRect
var _cursor_right: ColorRect

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	_cursor_left = ColorRect.new()
	_cursor_left.size = Vector2(20, 20)
	_cursor_left.color = Palette.COLOR_UI_ACCENT_PRIMARY
	_cursor_left.visible = false
	add_child(_cursor_left)

	_cursor_right = ColorRect.new()
	_cursor_right.size = Vector2(20, 20)
	_cursor_right.color = Palette.COLOR_UI_ACCENT_PRIMARY
	_cursor_right.visible = false
	add_child(_cursor_right)

func _unhandled_input(event: InputEvent) -> void:
	if menu_items.is_empty(): return

	if event.is_action_pressed("ui_down"):
		_change_selection(1)
		get_viewport().set_input_as_handled()
	elif event.is_action_pressed("ui_up"):
		_change_selection(-1)
		get_viewport().set_input_as_handled()

# --- Public Methods ---

## Initializes the manager with a list of menu items to control.
func setup_menu(items: Array[Control]) -> void:
	if items.is_empty(): return
	self.menu_items = items

	for item in menu_items:
		item.focus_entered.connect(_on_item_focused.bind(item))

# --- Private Methods ---

func _change_selection(amount: int) -> void:
	if menu_items.size() <= 1:
		AudioManager.play_sfx(AssetPaths.SFX_UI_ERROR)
		return

	var new_selection = (current_selection_index + amount + menu_items.size()) % menu_items.size()
	menu_items[new_selection].grab_focus()

func _update_cursors(selected_item: Control) -> void:
	await get_tree().process_frame # Wait for layout to settle

	if not is_instance_valid(selected_item): return

	var item_pos = selected_item.global_position
	var item_size = selected_item.size
	var cursor_padding = 40.0

	_cursor_left.global_position.y = item_pos.y + (item_size.y - _cursor_left.size.y) / 2.0
	_cursor_left.global_position.x = item_pos.x - cursor_padding - _cursor_left.size.x

	_cursor_right.global_position.y = item_pos.y + (item_size.y - _cursor_right.size.y) / 2.0
	_cursor_right.global_position.x = item_pos.x + item_size.x + cursor_padding

	_cursor_left.visible = true
	_cursor_right.visible = true

# --- Signal Handlers ---

func _on_item_focused(focused_item: Control) -> void:
	var index = menu_items.find(focused_item)
	if index != -1:
		current_selection_index = index

	_update_cursors(focused_item)
	AudioManager.play_sfx(AssetPaths.SFX_UI_MOVE)

=====================================
FILE: ./src/ui/dialogue/dialogue_box.gd
=====================================
# src/ui/dialogue/dialogue_box.gd
## The UI scene responsible for displaying dialogue text.
##
## It receives data from the [DialogueManager] and handles the visual
## presentation, including animated text effects.
class_name DialogueBox
extends Control

# TODO: Create @onready vars for Label nodes (character name, main text).
# @onready var name_label: Label = %NameLabel
# @onready var text_label: RichTextLabel = %TextLabel

# --- Public Methods ---

## Displays a single line of dialogue.
func display_line(_line_data: DialogueData.DialogueLine) -> void:
	assert(false, "DialogueBox.display_line() is not yet implemented.")
	pass

# --- Private Methods ---

# TODO: Implement a tween or timer-based text animation effect.
# func _animate_text(p_full_text: String) -> void:

=====================================
FILE: ./src/ui/dialogue/dialogue_box.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://dialogue_box_tscn"]

[ext_resource type="Script" path="res://src/ui/dialogue/dialogue_box.gd" id="1_dialogue_box_script"]

[node name="DialogueBox" type="Control"]
layout_mode = 3
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_top = -250.0
grow_horizontal = 2
grow_vertical = 0
script = ExtResource("1_dialogue_box_script")

[node name="Panel" type="Panel" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 20
theme_override_constants/margin_top = 20
theme_override_constants/margin_right = 20
theme_override_constants/margin_bottom = 20

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2

[node name="NameLabel" type="Label" parent="MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_font_sizes/font_size = 32
text = "Character Name"

[node name="TextLabel" type="RichTextLabel" parent="MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3
theme_override_font_sizes/normal_font_size = 28
bbcode_enabled = true
text = "This is where the dialogue text will appear, animating one character at a time..."

=====================================
FILE: ./src/ui/components/mute_button/mute_button.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://d1g2h3i4j5k6l"]

[ext_resource type="Texture2D" uid="uid://dmdfbw1txq0nf" path="res://assets/sprites/ui/icons/icon_ui_sound_off.png" id="1_g0pcd"]
[ext_resource type="Script" uid="uid://cotrj67gsvbw8" path="res://src/ui/components/mute_button/mute_button.gd" id="1_mute_button_script"]

[node name="MuteButton" type="TextureButton"]
focus_mode = 0
texture_normal = ExtResource("1_g0pcd")
script = ExtResource("1_mute_button_script")


=====================================
FILE: ./src/ui/components/mute_button/mute_button.gd
=====================================
# src/ui/components/mute_button/mute_button.gd
@tool
## A reusable UI component for toggling the game's music mute state.
##
## It automatically syncs its icon with the global [Settings] resource.
class_name MuteButton
extends TextureButton

# --- Constants ---
const ICON_SOUND_ON = preload(AssetPaths.ICON_UI_SOUND_ON)
const ICON_SOUND_OFF = preload(AssetPaths.ICON_UI_SOUND_OFF)

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	focus_mode = FOCUS_NONE
	_update_icon()

	if not Engine.is_editor_hint():
		self.pressed.connect(_on_pressed)
		Settings.audio_settings_changed.connect(_update_icon)
		mouse_entered.connect(CursorManager.set_pointer_state.bind(true))
		mouse_exited.connect(CursorManager.set_pointer_state.bind(false))

func _exit_tree() -> void:
	if not Engine.is_editor_hint():
		if Settings.audio_settings_changed.is_connected(_update_icon):
			Settings.audio_settings_changed.disconnect(_update_icon)

# --- Private Methods ---

func _update_icon() -> void:
	if Settings.music_muted:
		self.texture_normal = ICON_SOUND_OFF
	else:
		self.texture_normal = ICON_SOUND_ON

# --- Signal Handlers ---

func _on_pressed() -> void:
	Settings.music_muted = not Settings.music_muted
	AudioManager.play_sfx(AssetPaths.SFX_UI_SELECT)

=====================================
FILE: ./src/ui/components/styled_menu_item/styled_menu_item.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://cgt63w7k4w5gq"]

[ext_resource type="Script" path="res://src/ui/components/styled_menu_item/styled_menu_item.gd" id="1_menu_item_script"]

[node name="StyledMenuItem" type="Control"]
custom_minimum_size = Vector2(400, 80)
layout_mode = 3
anchors_preset = 0
script = ExtResource("1_menu_item_script")

=====================================
FILE: ./src/ui/components/styled_menu_item/styled_menu_item.gd
=====================================
# src/ui/components/styled_menu_item/styled_menu_item.gd
@tool
## A reusable, procedurally-drawn menu item component.
##
## Handles its own drawing, state changes (hover, press, focus), input,
## and animations for a self-contained, highly configurable button.
class_name StyledMenuItem
extends Control

# --- Signals ---
## Emitted when the menu item is clicked or activated via keyboard.
signal pressed

# --- Editor Properties ---
@export var text: String = "Menu Item" : set = set_text
@export var font_size: int = 48 : set = set_font_size
@export var glow_size: float = 0.0 : set = set_glow_size
@export var glow_alpha: float = 0.0 : set = set_glow_alpha

# --- Member Variables ---
var is_hovered: bool = false
var is_pressed: bool = false
var is_selected: bool = false

# --- Private Member Variables ---
var _font: Font
var _active_tween: Tween

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	_font = load(AssetPaths.FONT_MAIN_BOLD)
	focus_mode = FOCUS_ALL
	mouse_filter = MOUSE_FILTER_STOP

	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)
	resized.connect(queue_redraw)
	focus_entered.connect(_on_focus_entered)
	focus_exited.connect(_on_focus_exited)

func _gui_input(event: InputEvent) -> void:
	if event.is_action_pressed("ui_accept") and has_focus():
		get_viewport().set_input_as_handled()
		AudioManager.play_sfx(AssetPaths.SFX_UI_SELECT)
		emit_signal("pressed")
		_show_keyboard_press_feedback()
		return

	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.is_pressed():
			is_pressed = true
			queue_redraw()
		elif is_pressed: # On release
			AudioManager.play_sfx(AssetPaths.SFX_UI_SELECT)
			emit_signal("pressed")
			is_pressed = false
			queue_redraw()

func _draw() -> void:
	var bg_color: Color
	var text_color: Color
	var border_color: Color
	var border_width: float = 3.0

	if is_pressed:
		bg_color = Palette.get_color(2)
		text_color = Palette.COLOR_TEXT_PRIMARY
		border_color = Palette.COLOR_UI_ACCENT_PRIMARY
	elif is_hovered or is_selected:
		bg_color = Palette.COLOR_UI_ACCENT_PRIMARY
		text_color = Palette.COLOR_BACKGROUND
		border_color = Palette.get_color(4)
	else:
		bg_color = Palette.COLOR_UI_PANEL_BG
		text_color = Palette.COLOR_TEXT_PRIMARY
		border_color = Palette.COLOR_UI_ACCENT_PRIMARY

	if (is_hovered or is_selected) and glow_size > 0.0 and glow_alpha > 0.0:
		var glow_base_color = Palette.COLOR_UI_GLOW
		var final_glow_color = Color(glow_base_color.r, glow_base_color.g, glow_base_color.b, glow_alpha)
		var glow_rect = Rect2(Vector2.ZERO, size).grow(glow_size)
		draw_rect(glow_rect, final_glow_color)

	draw_rect(Rect2(Vector2.ZERO, size), bg_color)
	draw_rect(Rect2(Vector2.ZERO, size), border_color, false, border_width)

	var text_width = _font.get_string_size(text, HORIZONTAL_ALIGNMENT_CENTER, -1, font_size).x
	var text_pos_x = (size.x - text_width) / 2.0
	var text_pos_y = (size.y / 2.0) + (font_size / 3.0)
	draw_string(_font, Vector2(text_pos_x, text_pos_y), text, HORIZONTAL_ALIGNMENT_LEFT, -1, font_size, text_color)

# --- Public Setters ---

func set_text(new_text: String) -> void:
	if text != new_text:
		text = new_text
		queue_redraw()

func set_font_size(new_size: int) -> void:
	if font_size != new_size:
		font_size = new_size
		queue_redraw()

func set_glow_size(value: float) -> void:
	glow_size = value
	queue_redraw()

func set_glow_alpha(value: float) -> void:
	glow_alpha = value
	queue_redraw()

# --- Private Methods ---

func _show_keyboard_press_feedback() -> void:
	is_pressed = true
	queue_redraw()
	await get_tree().create_timer(0.1).timeout
	if is_instance_valid(self):
		is_pressed = false
		queue_redraw()

func _animate_selection(p_is_selected: bool) -> void:
	if _active_tween and _active_tween.is_valid():
		_active_tween.kill()

	_active_tween = create_tween().set_parallel(true)
	var target_glow_size = 28.0 if p_is_selected else 0.0
	var target_glow_alpha = 0.2 if p_is_selected else 0.0
	var duration = 0.3 if p_is_selected else 0.2

	_active_tween.tween_property(self, "glow_size", target_glow_size, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	_active_tween.tween_property(self, "glow_alpha", target_glow_alpha, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)

# --- Signal Handlers ---

func _on_mouse_entered() -> void:
	is_hovered = true
	grab_focus()
	CursorManager.set_pointer_state(true)

func _on_mouse_exited() -> void:
	is_hovered = false
	if is_pressed:
		is_pressed = false
		queue_redraw()
	CursorManager.set_pointer_state(false)

func _on_focus_entered() -> void:
	is_selected = true
	_animate_selection(true)
	queue_redraw()

func _on_focus_exited() -> void:
	is_selected = false
	_animate_selection(false)
	queue_redraw()

=====================================
FILE: ./src/ui/components/custom_slider/custom_slider.gd
=====================================
# src/ui/components/custom_slider/custom_slider.gd
@tool
## A self-contained, reusable custom slider component.
extends TextureRect

# --- Signals ---
## Emitted when the slider's value changes.
signal value_changed(value: float)

# --- Member Variables ---
var knob: TextureRect
var is_dragging: bool = false
var min_x_pos: float = 0.0
var max_x_pos: float = 0.0
var drag_offset: float = 0.0
var _initial_value: float = -1.0 # Used to set value before node is ready

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	self.texture = load(AssetPaths.SPRITE_SLIDER_TRACK)

	knob = TextureRect.new()
	knob.texture = load(AssetPaths.SPRITE_SLIDER_KNOB)
	add_child(knob)

	knob.mouse_entered.connect(_on_knob_mouse_entered)
	knob.mouse_exited.connect(_on_knob_mouse_exited)

	# Wait for the next frame to ensure parent containers have arranged children.
	await get_tree().process_frame

	knob.position.y = (size.y - knob.size.y) / 2.0
	min_x_pos = global_position.x
	max_x_pos = global_position.x + size.x - knob.size.x

	if _initial_value >= 0.0:
		var new_x_pos = min_x_pos + (max_x_pos - min_x_pos) * _initial_value
		knob.global_position.x = clamp(new_x_pos, min_x_pos, max_x_pos)

func _process(_delta: float) -> void:
	if is_dragging:
		var global_mouse_pos = get_global_mouse_position()
		knob.global_position.x = clamp(global_mouse_pos.x - drag_offset, min_x_pos, max_x_pos)

		if (max_x_pos - min_x_pos) > 0:
			var current_value = (knob.global_position.x - min_x_pos) / (max_x_pos - min_x_pos)
			emit_signal("value_changed", current_value)

func _gui_input(event: InputEvent) -> void:
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		var knob_rect = knob.get_global_rect()

		if event.is_pressed():
			if knob_rect.has_point(event.global_position):
				is_dragging = true
				drag_offset = event.global_position.x - knob.global_position.x
		else:
			is_dragging = false
			if not knob_rect.has_point(get_global_mouse_position()):
				CursorManager.set_pointer_state(false)
			drag_offset = 0.0

# --- Public Methods ---

## Sets the initial value of the slider.
func set_value(initial_value: float) -> void:
	_initial_value = initial_value

# --- Signal Handlers ---

func _on_knob_mouse_entered() -> void:
	CursorManager.set_pointer_state(true)

func _on_knob_mouse_exited() -> void:
	if not is_dragging:
		CursorManager.set_pointer_state(false)

=====================================
FILE: ./src/ui/components/logo_display/logo_display.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://b1c2d3e4f5g6h"]

[ext_resource type="Script" path="res://src/ui/components/logo_display/logo_display.gd" id="1_logo_script"]

[node name="LogoDisplay" type="Control"]
custom_minimum_size = Vector2(200, 200)
layout_mode = 3
anchors_preset = 0
script = ExtResource("1_logo_script")

[node name="TextureRect" type="TextureRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
expand_mode = 1
stretch_mode = 5

=====================================
FILE: ./src/ui/components/logo_display/logo_display.gd
=====================================
# src/ui/components/logo_display/logo_display.gd
@tool
## A reusable UI component for displaying an interactive logo.
##
## Provides visual feedback on hover and emits a signal when pressed.
class_name LogoDisplay
extends Control

# --- Signals ---
## Emitted when the logo is clicked, passing its [member logo_name].
signal pressed(logo_name: String)

# --- Node References ---
@onready var texture_rect: TextureRect = $TextureRect

# --- Editor Properties ---
@export var texture: Texture2D:
	set(value):
		texture = value
		if is_instance_valid(texture_rect):
			texture_rect.texture = texture

@export var logo_name: String = "Logo"
@export var glow_size: float = 0.0 : set = set_glow_size
@export var glow_alpha: float = 0.0 : set = set_glow_alpha

# --- Member Variables ---
var is_hovered: bool = false
var is_pressed: bool = false

# --- Private Member Variables ---
var _active_tween: Tween

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	mouse_filter = MOUSE_FILTER_STOP

	if is_instance_valid(texture_rect) and texture:
		texture_rect.texture = texture

	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)

func _gui_input(event: InputEvent) -> void:
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		if event.is_pressed():
			is_pressed = true
			queue_redraw()
		elif is_pressed: # On release
			AudioManager.play_sfx(AssetPaths.SFX_UI_SELECT)
			emit_signal("pressed", logo_name)
			is_pressed = false
			queue_redraw()

func _draw() -> void:
	if is_hovered and glow_size > 0.0 and glow_alpha > 0.0:
		var glow_base_color = Palette.COLOR_UI_GLOW
		var final_glow_color = Color(glow_base_color.r, glow_base_color.g, glow_base_color.b, glow_alpha)
		var glow_rect = Rect2(Vector2.ZERO, size).grow(glow_size)
		draw_rect(glow_rect, final_glow_color)

# --- Public Setters ---

func set_glow_size(value: float) -> void:
	glow_size = value
	queue_redraw()

func set_glow_alpha(value: float) -> void:
	glow_alpha = value
	queue_redraw()

# --- Private Methods ---

func _animate_hover(p_is_hovered: bool) -> void:
	if _active_tween and _active_tween.is_valid():
		_active_tween.kill()

	_active_tween = create_tween().set_parallel(true)
	var target_glow_size = 20.0 if p_is_hovered else 0.0
	var target_glow_alpha = 0.2 if p_is_hovered else 0.0
	var duration = 0.3 if p_is_hovered else 0.2

	_active_tween.tween_property(self, "glow_size", target_glow_size, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)
	_active_tween.tween_property(self, "glow_alpha", target_glow_alpha, duration).set_trans(Tween.TRANS_SINE).set_ease(Tween.EASE_OUT)

# --- Signal Handlers ---

func _on_mouse_entered() -> void:
	is_hovered = true
	CursorManager.set_pointer_state(true)
	AudioManager.play_sfx(AssetPaths.SFX_UI_MOVE)
	_animate_hover(true)

func _on_mouse_exited() -> void:
	is_hovered = false
	if is_pressed:
		is_pressed = false
		queue_redraw()
	CursorManager.set_pointer_state(false)
	_animate_hover(false)

=====================================
FILE: ./src/ui/dev/debug_overlay.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://debug_overlay_scene_id"]

[ext_resource type="Script" path="res://src/ui/dev/debug_overlay.gd" id="1_debug_script"]

[node name="DebugOverlay" type="CanvasLayer"]
layer = 100
script = ExtResource("1_debug_script")

[node name="Panel" type="Panel" parent="."]
unique_name_in_owner = true
layout_mode = 0
offset_left = 10.0
offset_top = 10.0
offset_right = 460.0
offset_bottom = 330.0
mouse_filter = 2

[node name="MarginContainer" type="MarginContainer" parent="Panel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="VBoxContainer" type="VBoxContainer" parent="Panel/MarginContainer"]
layout_mode = 2

[node name="FPSLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_font_sizes/font_size = 20
text = "FPS:"

[node name="HSeparator" type="HSeparator" parent="Panel/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="StateLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 20
text = "State:"
autowrap_mode = 2

[node name="VelocityLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
theme_override_font_sizes/font_size = 20
text = "Velocity:"

[node name="FlagsLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 20
text = "Flags:"
autowrap_mode = 2

[node name="StateHistoryLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 20
text = "History:"
autowrap_mode = 2

[node name="HSeparator2" type="HSeparator" parent="Panel/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="InputBufferLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 20
text = "Input:"
autowrap_mode = 2

[node name="HSeparator3" type="HSeparator" parent="Panel/MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="ObjectPoolLabel" type="Label" parent="Panel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 20
text = "Pools:"
autowrap_mode = 2

=====================================
FILE: ./src/ui/dev/debug_overlay.gd
=====================================
# src/ui/dev/debug_overlay.gd
## A toggleable overlay for displaying real-time developer debug information.
extends CanvasLayer

# --- Node References ---
@onready var fps_label: Label = %FPSLabel
@onready var state_label: Label = %StateLabel
@onready var velocity_label: Label = %VelocityLabel
@onready var flags_label: Label = %FlagsLabel
@onready var state_history_label: Label = %StateHistoryLabel
@onready var input_buffer_label: Label = %InputBufferLabel
@onready var object_pool_label: Label = %ObjectPoolLabel
@onready var panel: Panel = %Panel

# --- Private Member Variables ---
var _player_node: Player = null

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	# --- Apply custom styling to the panel ---
	var panel_style = StyleBoxFlat.new()
	panel_style.bg_color = Color(0, 0, 0, 0.6) # Semi-transparent black
	panel_style.border_width_left = 2
	panel_style.border_width_top = 2
	panel_style.border_width_right = 2
	panel_style.border_width_bottom = 2
	panel_style.border_color = Palette.COLOR_UI_ACCENT_PRIMARY
	panel.add_theme_stylebox_override("panel", panel_style)
	
	# THE FIX: Ensure long text is clipped instead of overflowing the panel.
	state_history_label.clip_text = true
	input_buffer_label.clip_text = true
	object_pool_label.clip_text = true
	
	# Attempt to find the player node once the scene is ready.
	_player_node = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER) as Player

func _process(_delta: float) -> void:
	# --- General Info ---
	fps_label.text = "FPS: %d" % Engine.get_frames_per_second()

	# --- Player-Specific Info ---
	if not is_instance_valid(_player_node):
		state_label.text = "PLAYER NOT FOUND"
		velocity_label.text = ""
		flags_label.text = ""
		state_history_label.text = ""
		input_buffer_label.text = ""
		object_pool_label.text = ""
		return

	# --- State and Physics ---
	var state_machine: BaseStateMachine = _player_node.state_machine
	var current_state_name = "N/A"
	if is_instance_valid(state_machine) and is_instance_valid(state_machine.current_state):
		current_state_name = state_machine.current_state.get_script().resource_path.get_file()

	state_label.text = "State: %s" % current_state_name
	velocity_label.text = "Velocity: %s" % _player_node.velocity.round()

	var p_data: PlayerStateData = _player_node.p_data
	flags_label.text = "Flags: OnFloor(%s) CanDash(%s) Invincible(%s)" % [_player_node.is_on_floor(), p_data.can_dash, p_data.is_invincible]

	state_history_label.text = "History: " + ", ".join(state_machine.state_history)

	# --- Input Buffer ---
	var input_buffer: Dictionary = _player_node.input_component.buffer
	var input_text_parts: Array[String] = []
	for key in input_buffer:
		var value = input_buffer[key]
		var should_display = false
		if value is bool and value == true:
			should_display = true
		elif value is float and not is_zero_approx(value):
			should_display = true
		
		if should_display:
			input_text_parts.append("%s: %s" % [key, value])
			
	input_buffer_label.text = "Input: " + ", ".join(input_text_parts)

	# --- Object Pool ---
	var pool_stats: Dictionary = ObjectPool.get_pool_stats()
	var pool_text_parts: Array[String] = []
	for pool_name in pool_stats:
		var stats = pool_stats[pool_name]
		pool_text_parts.append("%s [%d/%d]" % [pool_name, stats.active, stats.total])
	object_pool_label.text = "Pools: " + " ".join(pool_text_parts)


=====================================
FILE: ./src/scenes/loading/loading_screen.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://loading_screen_scene_id"]

[ext_resource type="Script" path="res://src/scenes/loading/loading_screen.gd" id="1_loading_script"]

[node name="LoadingScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_loading_script")

[node name="ColorRect" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="Label" type="Label" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -75.0
offset_top = -16.5
offset_right = 75.0
offset_bottom = 16.5
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 30
text = "Loading..."
horizontal_alignment = 1
vertical_alignment = 1

[node name="ShaderPrewarmViewport" type="SubViewportContainer" parent="."]
custom_minimum_size = Vector2(1, 1)
layout_mode = 0
offset_left = -10.0
offset_top = -10.0
offset_right = -9.0
offset_bottom = -9.0
stretch = true

[node name="SubViewport" type="SubViewport" parent="ShaderPrewarmViewport"]
handle_input_locally = false
size = Vector2i(1, 1)
render_target_update_mode = 4

=====================================
FILE: ./src/scenes/loading/loading_screen.gd
=====================================
# src/scenes/loading/loading_screen.gd
## Handles asynchronous level building and shader pre-warming.
##
## This scene acts as an intermediary to prevent stuttering. It first builds
## the level in batches, then pre-instantiates key entities in an off-screen
## viewport to force shader compilation before transitioning to the game scene.
extends Control

# --- Constants ---
const SHADER_PREWARM_SCENES = [
	AssetPaths.SCENE_PLAYER,
	AssetPaths.SCENE_BASE_BOSS,
	AssetPaths.SCENE_PLAYER_SHOT,
	AssetPaths.SCENE_BOSS_SHOT,
	AssetPaths.SCENE_TURRET_SHOT
]

# --- Node References ---
@onready var prewarm_viewport: SubViewport = $ShaderPrewarmViewport/SubViewport

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	if GameManager.state.current_encounter_path.is_empty():
		print("ERROR: No encounter script specified in GameManager. Returning to title.")
		SceneManager.go_to_scene(AssetPaths.SCENE_TITLE_SCREEN)
		return

	_load_level()

# --- Private Methods ---

## The main loading and pre-warming sequence.
func _load_level() -> void:
	await get_tree().process_frame # Wait one frame for UI to draw "Loading..."

	await _prewarm_shaders()

	# Build the level and store the resulting node in the GameManager state.
	GameManager.state.prebuilt_level = await ArenaBuilder.build_level_async()

	await get_tree().process_frame # Wait one more frame for safety.

	SceneManager.go_to_scene(AssetPaths.SCENE_ENCOUNTER) # UPDATED

## Instantiates scenes off-screen to compile their shaders.
func _prewarm_shaders() -> void:
	print("Starting shader pre-warming...")
	for scene_path in SHADER_PREWARM_SCENES:
		if not FileAccess.file_exists(scene_path): continue
		var instance = load(scene_path).instantiate()
		prewarm_viewport.add_child(instance)
		
		# --- Trigger Actions to Compile More Shaders ---
		if instance is Player:
			instance.velocity.x = 100
			instance.state_machine.change_state(instance.State.ATTACK)
		elif instance is BaseBoss:
			instance.velocity.x = 100

		await get_tree().process_frame
		instance.queue_free()
	print("Shader pre-warming complete.")


=====================================
FILE: ./src/scenes/game/encounter_scene.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://game_scene_unique_id"]

[ext_resource type="Script" path="res://src/scenes/game/encounter_scene.gd" id="1_game_script"]

[node name="EncounterScene" type="Node"]
script = ExtResource("1_game_script")

[node name="Camera2D" type="Camera2D" parent="."]

=====================================
FILE: ./src/scenes/game/encounter_scene.gd
=====================================
# src/scenes/game/encounter_scene.gd
## The main game scene controller.
##
## Responsible for asynchronously building the level, spawning the player and
## boss, managing the game camera, and handling the victory/defeat sequences.
## It also manages the developer debug overlay.
class_name EncounterScene
extends Node

# --- Node References ---
@onready var camera: Camera2D = $Camera2D

# --- Private Member Variables ---
var _player_node: Node = null
var _level_container: Node = null
var _debug_overlay: CanvasLayer = null
var _boss_died_token: int = 0
var _death_sequence_handle: SequenceHandle

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	_boss_died_token = EventBus.on(EventCatalog.BOSS_DIED, _on_boss_died)

	# Asynchronously build the level from the data stored in GameManager.
	if is_instance_valid(GameManager.state.prebuilt_level):
		_level_container = GameManager.state.prebuilt_level
		GameManager.state.prebuilt_level = null
	else:
		_level_container = await ArenaBuilder.build_level_async()

	if is_instance_valid(_level_container):
		add_child(_level_container)
		await get_tree().process_frame # Wait for nodes to be added to tree

		var build_data: LevelBuildData = _level_container.get_meta("build_data")
		if build_data:
			CameraManager.center_camera_on_arena(camera, build_data.dimensions_tiles)
			await get_tree().process_frame # Wait for camera to position

			var terrain_builder = TerrainBuilder.new()
			terrain_builder.fill_viewport(_level_container, build_data, camera)

	_player_node = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER)
	if is_instance_valid(_player_node):
		_player_node.died.connect(_on_player_died)

	# Instance and manage the debug overlay.
	_debug_overlay = load(AssetPaths.SCENE_DEBUG_OVERLAY).instantiate()
	add_child(_debug_overlay)
	_debug_overlay.visible = false

func _unhandled_input(_event: InputEvent) -> void:
	if Input.is_action_just_pressed("debug_toggle"):
		if is_instance_valid(_debug_overlay):
			_debug_overlay.visible = not _debug_overlay.visible

func _exit_tree() -> void:
	EventBus.off(_boss_died_token)
	if is_instance_valid(_death_sequence_handle):
		_death_sequence_handle.cancel()
	# Ensure the game is unpaused when leaving the scene.
	get_tree().paused = false

# --- Private Methods ---

## Deactivates all active minions in the scene.
func _deactivate_all_minions() -> void:
	var minions = get_tree().get_nodes_in_group(Identifiers.Groups.ENEMY)
	for minion in minions:
		# Check for the deactivate method to safely handle different enemy types.
		if minion.has_method("deactivate"):
			minion.deactivate()

# --- Signal Handlers ---

func _on_player_died() -> void:
	SceneManager.go_to_game_over()

func _on_boss_died(payload: Dictionary) -> void:
	if is_instance_valid(_player_node): _player_node.set_physics_process(false)
	var boss_node = payload.get("boss_node")

	_deactivate_all_minions()

	# Create and run a cinematic sequence before the victory screen.
	var wait_step_1 = WaitStep.new(); wait_step_1.duration = 1.0
	var wait_step_2 = WaitStep.new(); wait_step_2.duration = 1.5
	var death_sequence: Array[SequenceStep] = [wait_step_1, wait_step_2]

	_death_sequence_handle = Sequencer.run_sequence(death_sequence)
	await _death_sequence_handle.finished

	if is_instance_valid(boss_node): boss_node.queue_free()

	# Only transition if the sequence wasn't cancelled by leaving the scene.
	if is_instance_valid(_death_sequence_handle):
		SceneManager.go_to_victory()

=====================================
FILE: ./src/scenes/menus/options_screen.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://cuiywha4vccw"]

[ext_resource type="Script" uid="uid://c7ggk7djqvf53" path="res://src/scenes/menus/options_screen.gd" id="1_options_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/ui/components/mute_button/mute_button.tscn" id="4_mute_button"]

[node name="OptionsScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_options_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "OPTIONS"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 60)
layout_mode = 2

[node name="MenuItemsVBox" type="VBoxContainer" parent="MainVBox"]
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 40
alignment = 1

[node name="SoundButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ControlsButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="CreditsButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="MuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0


=====================================
FILE: ./src/scenes/menus/title_screen.tscn
=====================================
[gd_scene load_steps=9 format=3 uid="uid://beattfyix2423"]

[ext_resource type="Script" uid="uid://d0pxln7nldjne" path="res://src/scenes/menus/title_screen.gd" id="1_title_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="PackedScene" uid="uid://b1c2d3e4f5g6h" path="res://src/ui/components/logo_display/logo_display.tscn" id="3_logo_display"]
[ext_resource type="Texture2D" uid="uid://t2u26wkw02xm" path="res://assets/sprites/ui/logos/newgrounds_logo.png" id="4_logo_ng"]
[ext_resource type="Texture2D" uid="uid://2gqa4m05wd20" path="res://assets/sprites/ui/logos/godot_logo.png" id="5_logo_godot"]
[ext_resource type="Texture2D" uid="uid://d0fuu548hoouq" path="res://assets/sprites/ui/logos/itch_logo.png" id="6_logo_itch"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="7_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/ui/components/mute_button/mute_button.tscn" id="8_mute_button"]

[node name="TitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_title_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("7_font_black")
theme_override_font_sizes/font_size = 128
text = "BOX BATTLE"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 30)
layout_mode = 2

[node name="MenuItemsVBox" type="VBoxContainer" parent="MainVBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 40
alignment = 1

[node name="StartButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="OptionsButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ExitButton" parent="MainVBox/MenuItemsVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
focus_mode = 2
font_size = 64

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="FooterHBox" type="HBoxContainer" parent="MainVBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 50
alignment = 1

[node name="NewgroundsLogo" parent="MainVBox/FooterHBox" instance=ExtResource("3_logo_display")]
unique_name_in_owner = true
layout_mode = 2
texture = ExtResource("4_logo_ng")
logo_name = "Newgrounds"

[node name="GodotLogo" parent="MainVBox/FooterHBox" instance=ExtResource("3_logo_display")]
unique_name_in_owner = true
layout_mode = 2
texture = ExtResource("5_logo_godot")
logo_name = "Godot"

[node name="ItchLogo" parent="MainVBox/FooterHBox" instance=ExtResource("3_logo_display")]
unique_name_in_owner = true
layout_mode = 2
texture = ExtResource("6_logo_itch")
logo_name = "Itch"

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 50)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="MuteButton" parent="MuteButtonContainer" instance=ExtResource("8_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0


=====================================
FILE: ./src/scenes/menus/title_screen.gd
=====================================
# src/scenes/menus/title_screen.gd
## The controller for the main title screen scene.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

# --- Node References ---
@onready var background_color: ColorRect = $BackgroundColor
@onready var start_button: StyledMenuItem = %StartButton
@onready var options_button: StyledMenuItem = %OptionsButton
@onready var exit_button: StyledMenuItem = %ExitButton
@onready var newgrounds_logo: LogoDisplay = %NewgroundsLogo
@onready var godot_logo: LogoDisplay = %GodotLogo
@onready var itch_logo: LogoDisplay = %ItchLogo

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	background_color.color = Palette.COLOR_BACKGROUND

	start_button.text = "START GAME"
	options_button.text = "OPTIONS"
	exit_button.text = "EXIT"

	if not Engine.is_editor_hint():
		# --- Connect Signals ---
		start_button.pressed.connect(_on_start_button_pressed)
		options_button.pressed.connect(_on_options_button_pressed)
		exit_button.pressed.connect(get_tree().quit)
		newgrounds_logo.pressed.connect(_on_logo_pressed)
		godot_logo.pressed.connect(_on_logo_pressed)
		itch_logo.pressed.connect(_on_logo_pressed)

		# --- Initialize Menu Manager ---
		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		var menu_items: Array[Control] = [start_button, options_button, exit_button]
		menu_manager.setup_menu(menu_items)

		await get_tree().process_frame
		start_button.grab_focus()

# --- Signal Handlers ---

func _on_start_button_pressed() -> void:
	SceneManager.start_game(AssetPaths.ENCOUNTER_00)

func _on_options_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_SCREEN)

func _on_logo_pressed(logo_name: String) -> void:
	print("%s Pressed" % logo_name)

=====================================
FILE: ./src/scenes/menus/credits_screen.gd
=====================================
# src/scenes/menus/credits_screen.gd
## The controller for the credits screen.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)
const CREDITS_BBCODE = """
[center]A Game By Steven Casteel[/center]
[center][url=https://www.stevencasteel.com/]www.stevencasteel.com[/url][/center]

[center]Built with the [url=https://godotengine.org/]Godot Engine[/url][/center]
[center]AI-Assisted by [url=https://gemini.google.com/]Gemini[/url][/center]

[center]Find me on [url=https://www.youtube.com/@stevencasteel]YouTube[/url] and [url=http://github.com/stevencasteel]GitHub[/url][/center]
"""

# --- Node References ---
@onready var credits_label_container: Control = %CreditsLabelContainer
@onready var back_button: StyledMenuItem = %BackButton

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	for c in credits_label_container.get_children(): c.queue_free()

	var credits_label = RichTextLabel.new()
	credits_label.set_anchors_preset(Control.PRESET_FULL_RECT)
	credits_label.bbcode_enabled = true
	credits_label.mouse_filter = MOUSE_FILTER_PASS
	credits_label.add_theme_font_override("normal_font", load(AssetPaths.FONT_MAIN_REGULAR))
	credits_label.add_theme_font_size_override("normal_font_size", 38)
	credits_label.add_theme_color_override("default_color", Color.WHITE)
	credits_label.text = CREDITS_BBCODE
	credits_label_container.add_child(credits_label)

	back_button.text = "BACK"

	if not Engine.is_editor_hint():
		back_button.pressed.connect(_on_back_button_pressed)
		credits_label.meta_clicked.connect(_on_meta_clicked)
		credits_label.meta_hover_started.connect(func(_meta): CursorManager.set_pointer_state(true))
		credits_label.meta_hover_ended.connect(func(_meta): CursorManager.set_pointer_state(false))

		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])

		await get_tree().process_frame
		back_button.grab_focus()

# --- Signal Handlers ---

func _on_meta_clicked(meta) -> void:
	OS.shell_open(str(meta))

func _on_back_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_SCREEN)

=====================================
FILE: ./src/scenes/menus/sound_screen.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://dsvv7o1v1j8t1"]

[ext_resource type="Script" uid="uid://451xh65eo2eo" path="res://src/scenes/menus/sound_screen.gd" id="1_sound_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/ui/components/mute_button/mute_button.tscn" id="4_mute_button"]

[node name="SoundScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_sound_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "SOUND"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 90)
layout_mode = 2

[node name="MenuItemsVBox" type="VBoxContainer" parent="MainVBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 40
alignment = 1

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
text = "BACK"
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="MuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0


=====================================
FILE: ./src/scenes/menus/credits_screen.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://c5v6x7y81aa0b"]

[ext_resource type="Script" uid="uid://b5n30r8nhclsb" path="res://src/scenes/menus/credits_screen.gd" id="1_credits_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/ui/components/mute_button/mute_button.tscn" id="4_mute_button"]

[node name="CreditsScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_credits_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "CREDITS"
horizontal_alignment = 1

[node name="CreditsLabelContainer" type="Control" parent="MainVBox"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 450)
layout_mode = 2

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
text = "BACK"
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="MuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0


=====================================
FILE: ./src/scenes/menus/options_screen.gd
=====================================
# src/scenes/menus/options_screen.gd
## The controller for the main options menu scene.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

# --- Node References ---
@onready var sound_button: StyledMenuItem = %SoundButton
@onready var controls_button: StyledMenuItem = %ControlsButton
@onready var credits_button: StyledMenuItem = %CreditsButton
@onready var back_button: StyledMenuItem = %BackButton

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	sound_button.text = "SOUND"
	controls_button.text = "CONTROLS"
	credits_button.text = "CREDITS"
	back_button.text = "BACK"

	if not Engine.is_editor_hint():
		# --- Connect Signals ---
		sound_button.pressed.connect(_on_sound_button_pressed)
		controls_button.pressed.connect(_on_controls_button_pressed)
		credits_button.pressed.connect(_on_credits_button_pressed)
		back_button.pressed.connect(_on_back_button_pressed)

		# --- Initialize Menu Manager ---
		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		var menu_items: Array[Control] = [sound_button, controls_button, credits_button, back_button]
		menu_manager.setup_menu(menu_items)

		await get_tree().process_frame
		sound_button.grab_focus()

# --- Signal Handlers ---

func _on_sound_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_SOUND_SCREEN)

func _on_controls_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_CONTROLS_SCREEN)

func _on_credits_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_CREDITS_SCREEN)

func _on_back_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

=====================================
FILE: ./src/scenes/menus/sound_screen.gd
=====================================
# src/scenes/menus/sound_screen.gd
## The controller for the sound options menu.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)
const CustomSliderScript = preload(AssetPaths.SCRIPT_CUSTOM_SLIDER)

# --- Node References ---
@onready var menu_items_vbox: VBoxContainer = %MenuItemsVBox
@onready var back_button: StyledMenuItem = %BackButton

# --- Private Member Variables ---
var _master_volume_label: Label
var _music_volume_label: Label
var _sfx_volume_label: Label
var _master_mute_checkbox: TextureButton
var _music_mute_checkbox: TextureButton
var _sfx_mute_checkbox: TextureButton

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	# --- Procedurally build the UI rows ---
	for c in menu_items_vbox.get_children():
		c.queue_free()
	menu_items_vbox.add_child(_create_volume_row("MASTER", Settings.master_volume, "master"))
	menu_items_vbox.add_child(_create_volume_row("MUSIC", Settings.music_volume, "music"))
	menu_items_vbox.add_child(_create_volume_row("SFX", Settings.sfx_volume, "sfx"))
	_update_ui_from_settings()

	back_button.text = "BACK"

	if not Engine.is_editor_hint():
		back_button.pressed.connect(_on_back_button_pressed)
		Settings.audio_settings_changed.connect(_update_ui_from_settings)

		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])

		await get_tree().process_frame
		back_button.grab_focus()

func _exit_tree() -> void:
	if not Engine.is_editor_hint():
		if Settings.audio_settings_changed.is_connected(_update_ui_from_settings):
			Settings.audio_settings_changed.disconnect(_update_ui_from_settings)

# --- Private Methods ---

func _update_ui_from_settings() -> void:
	if _master_volume_label: _master_volume_label.text = str(int(Settings.master_volume * 100))
	if _music_volume_label: _music_volume_label.text = str(int(Settings.music_volume * 100))
	if _sfx_volume_label: _sfx_volume_label.text = str(int(Settings.sfx_volume * 100))
	if _master_mute_checkbox: _update_checkbox_texture(_master_mute_checkbox, Settings.master_muted)
	if _music_mute_checkbox: _update_checkbox_texture(_music_mute_checkbox, Settings.music_muted)
	if _sfx_mute_checkbox: _update_checkbox_texture(_sfx_mute_checkbox, Settings.sfx_muted)

func _create_volume_row(label_text: String, initial_volume: float, type: String) -> HBoxContainer:
	var hbox = HBoxContainer.new()
	hbox.alignment = HBoxContainer.ALIGNMENT_CENTER
	hbox.add_theme_constant_override("separation", 20)

	var row_label = Label.new()
	row_label.text = label_text
	row_label.custom_minimum_size.x = 220
	row_label.add_theme_font_override("font", load(AssetPaths.FONT_MAIN_BOLD))
	row_label.add_theme_font_size_override("font_size", 48)
	hbox.add_child(row_label)

	var slider = CustomSliderScript.new()
	slider.set_value(initial_volume)
	slider.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	slider.focus_mode = FOCUS_NONE
	hbox.add_child(slider)

	var volume_label = Label.new()
	volume_label.custom_minimum_size.x = 120
	volume_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
	volume_label.add_theme_font_override("font", load(AssetPaths.FONT_MAIN_REGULAR))
	volume_label.add_theme_font_size_override("font_size", 48)
	hbox.add_child(volume_label)

	var checkbox = TextureButton.new()
	checkbox.size_flags_vertical = Control.SIZE_SHRINK_CENTER
	checkbox.focus_mode = FOCUS_NONE
	hbox.add_child(checkbox)

	match type:
		"master":
			_master_volume_label = volume_label; _master_mute_checkbox = checkbox
			if not Engine.is_editor_hint():
				slider.value_changed.connect(func(val): Settings.master_volume = val)
				checkbox.pressed.connect(func(): Settings.master_muted = not Settings.master_muted)
		"music":
			_music_volume_label = volume_label; _music_mute_checkbox = checkbox
			if not Engine.is_editor_hint():
				slider.value_changed.connect(func(val): Settings.music_volume = val)
				checkbox.pressed.connect(func(): Settings.music_muted = not Settings.music_muted)
		"sfx":
			_sfx_volume_label = volume_label; _sfx_mute_checkbox = checkbox
			if not Engine.is_editor_hint():
				slider.value_changed.connect(func(val): Settings.sfx_volume = val)
				checkbox.pressed.connect(func(): Settings.sfx_muted = not Settings.sfx_muted)

	return hbox

func _update_checkbox_texture(button_ref: TextureButton, is_muted: bool) -> void:
	var new_texture = load(AssetPaths.SPRITE_CHECKBOX_UNCHECKED) if not is_muted else load(AssetPaths.SPRITE_CHECKBOX_CHECKED)
	if button_ref.texture_normal != new_texture:
		button_ref.texture_normal = new_texture

# --- Signal Handlers ---

func _on_back_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_SCREEN)

=====================================
FILE: ./src/scenes/menus/controls_screen.gd
=====================================
# src/scenes/menus/controls_screen.gd
## The controller for the controls display screen.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)
const CONTROLS_DATA = [
	{ "action": "Movement", "keys": "Arrow Keys / WASD / Mouse" },
	{ "action": "Primary Action", "keys": "X / . / Space / Left-Click" },
	{ "action": "Secondary Action", "keys": "C / , / Shift / Right-Click" },
	{ "action": "Tertiary Action", "keys": "Z / / / Ctrl / Middle-Click" },
	{ "action": "Pause / Menu", "keys": "Enter / P / Escape" },
	{ "action": "Back / Cancel", "keys": "Escape / Backspace" }
]

# --- Node References ---
@onready var controls_vbox: VBoxContainer = %ControlsVBox
@onready var back_button: StyledMenuItem = %BackButton

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	# --- Procedurally build the UI rows ---
	for c in controls_vbox.get_children(): c.queue_free()
	for data in CONTROLS_DATA:
		controls_vbox.add_child(_create_control_row(data))

	back_button.text = "BACK"

	if not Engine.is_editor_hint():
		back_button.pressed.connect(_on_back_button_pressed)

		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])

		await get_tree().process_frame
		back_button.grab_focus()

# --- Private Methods ---

func _create_control_row(data: Dictionary) -> HBoxContainer:
	var hbox = HBoxContainer.new()
	hbox.size_flags_horizontal = Control.SIZE_SHRINK_CENTER
	hbox.add_theme_constant_override("separation", 40)

	var action_label = Label.new()
	action_label.text = data.action
	action_label.custom_minimum_size.x = 400
	action_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_RIGHT
	action_label.add_theme_font_override("font", load(AssetPaths.FONT_MAIN_BOLD))
	action_label.add_theme_font_size_override("font_size", 36)
	hbox.add_child(action_label)

	var keys_label = Label.new()
	keys_label.text = data.keys
	keys_label.custom_minimum_size.x = 500
	keys_label.add_theme_font_override("font", load(AssetPaths.FONT_MAIN_REGULAR))
	keys_label.add_theme_font_size_override("font_size", 36)
	hbox.add_child(keys_label)

	return hbox

# --- Signal Handlers ---

func _on_back_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_OPTIONS_SCREEN)

=====================================
FILE: ./src/scenes/menus/controls_screen.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://df5wylg5n16f"]

[ext_resource type="Script" uid="uid://bm6noor4pxywc" path="res://src/scenes/menus/controls_screen.gd" id="1_controls_script"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="3_font_black"]
[ext_resource type="PackedScene" uid="uid://d1g2h3i4j5k6l" path="res://src/ui/components/mute_button/mute_button.tscn" id="4_mute_button"]

[node name="ControlsScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_controls_script")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0
alignment = 1

[node name="TopSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 100)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.972549, 0.972549, 0.972549, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "CONTROLS"
horizontal_alignment = 1

[node name="TitleMenuSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 50)
layout_mode = 2

[node name="ControlsRowHBox" type="HBoxContainer" parent="MainVBox"]
layout_mode = 2
size_flags_horizontal = 3

[node name="LeftSpacer" type="Control" parent="MainVBox/ControlsRowHBox"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_stretch_ratio = 0.8

[node name="ControlsVBox" type="VBoxContainer" parent="MainVBox/ControlsRowHBox"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 20
alignment = 1

[node name="RightSpacer" type="Control" parent="MainVBox/ControlsRowHBox"]
layout_mode = 2
size_flags_horizontal = 3

[node name="ExpandSpacer" type="Control" parent="MainVBox"]
layout_mode = 2
size_flags_vertical = 3

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
text = "BACK"
font_size = 64

[node name="BottomSpacer" type="Control" parent="MainVBox"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="MuteButtonContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_top = 40
theme_override_constants/margin_right = 350

[node name="MuteButton" parent="MuteButtonContainer" instance=ExtResource("4_mute_button")]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 0


=====================================
FILE: ./src/scenes/game_over/game_over_screen.tscn
=====================================
[gd_scene load_steps=4 format=3 uid="uid://dnlf14n0wfxm1"]

[ext_resource type="Script" uid="uid://dnkj277olbn3c" path="res://src/scenes/game_over/game_over_screen.gd" id="1_goscr"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="3_font_black"]

[node name="GameOverScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_goscr")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 100
alignment = 1

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.8, 0.2, 0.2, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "GAME OVER"
horizontal_alignment = 1

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
text = "BACK"
font_size = 64


=====================================
FILE: ./src/scenes/game_over/game_over_screen.gd
=====================================
# src/scenes/game_over/game_over_screen.gd
## The controller for the "Game Over" screen.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

# --- Node References ---
@onready var back_button: StyledMenuItem = %BackButton

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	back_button.text = "BACK TO TITLE"

	if not Engine.is_editor_hint():
		back_button.pressed.connect(_on_back_button_pressed)

		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])

		await get_tree().process_frame
		back_button.grab_focus()

# --- Signal Handlers ---

func _on_back_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

=====================================
FILE: ./src/scenes/main/main.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://bt1c5p8wphc4a"]

[ext_resource type="Script" uid="uid://cu5lshffdfr4h" path="res://src/scenes/main/main.gd" id="1_main_script"]

[node name="Main" type="Node"]
script = ExtResource("1_main_script")


=====================================
FILE: ./src/scenes/main/main.gd
=====================================
# src/scenes/main/main.gd
## The main entry point for the entire application.
extends Node

func _ready() -> void:
	if OS.is_debug_build():
		AssetPaths.validate_all_paths()

	AudioManager.play_music(AssetPaths.MUSIC_MENU_LOOP)

	SceneManager.go_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

=====================================
FILE: ./src/scenes/victory/victory_screen.tscn
=====================================
[gd_scene load_steps=4 format=3 uid="uid://cx6i2wt2j05y4"]

[ext_resource type="Script" uid="uid://d030qowpraecr" path="res://src/scenes/victory/victory_screen.gd" id="1_vsscr"]
[ext_resource type="PackedScene" uid="uid://cgt63w7k4w5gq" path="res://src/ui/components/styled_menu_item/styled_menu_item.tscn" id="2_styled_menu_item"]
[ext_resource type="FontFile" uid="uid://b41cqy3luy6se" path="res://assets/fonts/font_main_black.ttf" id="3_font_black"]

[node name="VictoryScreen" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_vsscr")

[node name="BackgroundColor" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 1)

[node name="MainVBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 100
alignment = 1

[node name="TitleLabel" type="Label" parent="MainVBox"]
layout_mode = 2
theme_override_colors/font_color = Color(0.2, 0.8, 0.2, 1)
theme_override_fonts/font = ExtResource("3_font_black")
theme_override_font_sizes/font_size = 128
text = "VICTORY"
horizontal_alignment = 1

[node name="BackButton" parent="MainVBox" instance=ExtResource("2_styled_menu_item")]
unique_name_in_owner = true
custom_minimum_size = Vector2(700, 100)
layout_mode = 2
size_flags_horizontal = 4
focus_mode = 2
text = "BACK"
font_size = 64


=====================================
FILE: ./src/scenes/victory/victory_screen.gd
=====================================
# src/scenes/victory/victory_screen.gd
## The controller for the "Victory" screen.
@tool
extends Control

# --- Constants ---
const MenuManagerScript = preload(AssetPaths.SCRIPT_MENU_MANAGER)

# --- Node References ---
@onready var back_button: StyledMenuItem = %BackButton

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	back_button.text = "BACK TO TITLE"

	if not Engine.is_editor_hint():
		back_button.pressed.connect(_on_back_button_pressed)

		var menu_manager = MenuManagerScript.new()
		add_child(menu_manager)
		menu_manager.setup_menu([back_button])

		await get_tree().process_frame
		back_button.grab_focus()

# --- Signal Handlers ---

func _on_back_button_pressed() -> void:
	SceneManager.go_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

=====================================
FILE: ./src/core/sequencing/sequence_step.gd
=====================================
# src/core/sequencing/sequence_step.gd
@tool
## The abstract base class for all steps in a sequence.
##
## It defines the contract that all steps must follow: an `execute` method.
class_name SequenceStep
extends Resource

# --- Virtual Methods ---

## This method is implemented by all concrete step classes. It contains the
## logic for what the step does. It can return a [Signal] or [Coroutine]
## to make the [Sequencer] pause execution.
func execute(_sequencer_node: Node) -> Variant:
	return null

=====================================
FILE: ./src/core/sequencing/sequence_handle.gd
=====================================
# src/core/sequencing/sequence_handle.gd
## A handle representing a running sequence.
##
## Allows for safe cancellation and emits a signal when the sequence is
## completed or cancelled.
class_name SequenceHandle
extends RefCounted

# --- Signals ---
## Emitted when the sequence finishes or is cancelled.
signal finished

# --- Member Variables ---
var is_running: bool = true

# --- Public Methods ---

## Cancels the execution of the associated sequence.
func cancel() -> void:
	if is_running:
		is_running = false
		finished.emit()

=====================================
FILE: ./src/core/sequencing/sequencer.gd
=====================================
# src/core/sequencing/sequencer.gd
## An autoloaded singleton that runs linear sequences of timed events.
##
## It is used for cinematic moments like boss intros. It tracks all active
## sequences and can safely cancel them, preventing errors during scene transitions.
extends Node

# --- Private Member Variables ---
var _active_handles: Array[SequenceHandle] = []

# --- Public Methods ---

## Executes a series of [SequenceStep] resources and returns a handle.
func run_sequence(steps: Array[SequenceStep]) -> SequenceHandle:
	var handle = SequenceHandle.new()
	_active_handles.append(handle)
	handle.finished.connect(_on_sequence_finished.bind(handle))

	_execute_sequence(steps, handle)
	return handle

## Immediately cancels all running sequences.
func cancel_all() -> void:
	# Iterate over a copy, as cancelling a handle modifies the original array.
	for handle in _active_handles.duplicate():
		handle.cancel()

# --- Private Methods ---

## The core async function that executes the sequence steps.
func _execute_sequence(steps: Array[SequenceStep], handle: SequenceHandle) -> void:
	if steps.is_empty():
		if handle.is_running:
			handle.is_running = false
			handle.finished.emit()
		return

	for step in steps:
		if not handle.is_running: return # Stop if cancelled

		if not step is SequenceStep:
			push_warning("Sequencer: Invalid step found. Skipping.")
			continue

		var awaitable = await step.execute(self)
		if awaitable:
			await awaitable

	if handle.is_running:
		handle.is_running = false
		handle.finished.emit()

# --- Signal Handlers ---

## Cleans up a finished or cancelled sequence from the tracking array.
func _on_sequence_finished(handle_to_remove: SequenceHandle) -> void:
	var index = _active_handles.find(handle_to_remove)
	if index != -1:
		_active_handles.remove_at(index)

=====================================
FILE: ./src/core/sequencing/steps/emit_step.gd
=====================================
# src/core/sequencing/steps/emit_step.gd
@tool
## A sequence step that emits an event on the global [EventBus].
class_name EmitStep
extends SequenceStep

# --- Editor Properties ---
@export var event_name: StringName = &""
@export var payload: Variant = null

# --- Virtual Methods ---

func execute(_sequencer_node: Node) -> Variant:
	if event_name == &"":
		push_warning("EmitStep: 'event_name' is not set.")
		return null
	EventBus.emit(event_name, payload)
	return null

=====================================
FILE: ./src/core/sequencing/steps/callable_step.gd
=====================================
# src/core/sequencing/steps/callable_step.gd
@tool
## A sequence step that executes a [Callable].
class_name CallableStep
extends SequenceStep

# --- Editor Properties ---
@export var callable: Callable

# --- Virtual Methods ---

func execute(_sequencer_node: Node) -> Variant:
	if callable.is_valid():
		# Await the result of the call. If the function is async, this will
		# pause the sequence until it completes.
		var result = await callable.call()
		# If the function itself returns ANOTHER awaitable (like a Signal),
		# return it to the sequencer to be awaited as well.
		if result is Signal or (typeof(result) == TYPE_OBJECT and result.has_method("is_valid")):
			return result
	else:
		push_warning("CallableStep: 'callable' is not set or is invalid.")

	return null

=====================================
FILE: ./src/core/sequencing/steps/wait_step.gd
=====================================
# src/core/sequencing/steps/wait_step.gd
@tool
## A sequence step that pauses execution for a set duration.
class_name WaitStep
extends SequenceStep

# --- Editor Properties ---
@export var duration: float = 1.0

# --- Virtual Methods ---

func execute(sequencer_node: Node) -> Variant:
	if duration > 0.0:
		# Return the timer's 'timeout' signal for the sequencer to await.
		return sequencer_node.get_tree().create_timer(duration).timeout
	return null

=====================================
FILE: ./src/core/util/combat_utils.gd
=====================================
# src/core/util/combat_utils.gd
## An autoloaded singleton containing static helper functions for combat logic.
extends Node

# --- Static Functions ---

## Traverses up the scene tree from a given node to find the first node that
## implements the IDamageable interface (i.e., has an `apply_damage` method).
## This is the canonical way to find a valid damage target from a collision.
static func find_damageable(from_node: Node) -> Node:
	if not is_instance_valid(from_node):
		return null

	var current_node = from_node
	while is_instance_valid(current_node):
		if current_node.has_method("apply_damage"):
			return current_node

		# HealthComponent is the primary implementer, check for it directly.
		var hc = current_node.get_node_or_null("HealthComponent")
		if is_instance_valid(hc) and hc.has_method("apply_damage"):
			return hc

		current_node = current_node.get_parent()

	return null

=====================================
FILE: ./src/core/util/grid_utils.gd
=====================================
# src/core/util/grid_utils.gd
## An autoloaded singleton providing a single source of truth for all conversions
## between the logical tile grid and world-space pixel coordinates.
extends Node

# --- Static Functions ---

## Converts a grid coordinate (e.g., [Vector2i(2, 3)]) to a world position.
static func grid_to_world(tile_pos: Vector2i, tile_size: int = Constants.TILE_SIZE) -> Vector2:
	var half_tile = tile_size / 2.0
	return Vector2(tile_pos.x * tile_size + half_tile, tile_pos.y * tile_size + half_tile)

## Converts a world position (in pixels) to its corresponding grid coordinate.
static func world_to_grid(world_pos: Vector2, tile_size: int = Constants.TILE_SIZE) -> Vector2i:
	return Vector2i(floor(world_pos.x / tile_size), floor(world_pos.y / tile_size))

=====================================
FILE: ./src/core/util/physics_layers.gd
=====================================
# src/core/util/physics_layers.gd
## An autoloaded singleton that provides named constants for the 2D physics
## layers defined in the project settings.
##
## This prevents the use of "magic numbers" for collision layers and masks.
extends Node

# --- Layer Constants ---
const PLAYER = 1           # Layer 1
const WORLD = 2            # Layer 2
const ENEMY = 4            # Layer 3
const HAZARD = 8           # Layer 4
const ENEMY_PROJECTILE = 16  # Layer 5
const PLAYER_HITBOX = 32   # Layer 6
const PLAYER_HURTBOX = 64  # Layer 7

=====================================
FILE: ./src/core/util/scene_validator.gd
=====================================
# src/core/util/scene_validator.gd
@tool
## A central utility for validating scene configurations in the editor.
##
## Its functions are static, allowing them to be called from any @tool script
## to provide configuration warnings in the Godot editor.
class_name SceneValidator
extends Object

# --- Static Validation Functions ---

## Validates a node to ensure it meets the BaseBoss contract.
static func validate_boss_scene(node: Node) -> PackedStringArray:
	var warnings = PackedStringArray()

	if not node.has_node("HealthComponent"):
		warnings.append("A HealthComponent node is required.")
	if not node.has_node("StateMachine"):
		warnings.append("A StateMachine node is required.")
	if not node.has_node("ArmorComponent"):
		warnings.append("An ArmorComponent node is required.")

	if node.get("phase_1_patterns") == null or node.get("phase_1_patterns").is_empty():
		warnings.append("Phase 1 has no attack patterns assigned. The boss will be unable to attack.")

	return warnings

=====================================
FILE: ./src/core/util/palette.gd
=====================================
# src/core/util/palette.gd
## An autoloaded singleton that holds the project's master color palette.
##
## It establishes a single source of truth for all visual elements, ensuring a
## cohesive aesthetic based on a 32-step grayscale value scale.
extends Node

# --- Private Member Variables ---
const _palette: Array[Color] = [
	Color("#000000"), Color("#080808"), Color("#101010"), Color("#191919"),
	Color("#212121"), Color("#292929"), Color("#313131"), Color("#3a3a3a"),
	Color("#424242"), Color("#4a4a4a"), Color("#525252"), Color("#5a5a5a"),
	Color("#636363"), Color("#6b6b6b"), Color("#737373"), Color("#7b7b7b"),
	Color("#848484"), Color("#8c8c8c"), Color("#949494"), Color("#9c9c9c"),
	Color("#a5a5a5"), Color("#adadad"), Color("#b5b5b5"), Color("#bdbdbd"),
	Color("#c5c5c5"), Color("#cecece"), Color("#d6d6d6"), Color("#dedede"),
	Color("#e6e6e6"), Color("#efefef"), Color("#f7f7f7"), Color("#ffffff")
]

# --- Semantic Constants ---
# Use these constants in code, not raw palette indices.
# This makes the code readable and easy to theme.

# Gameplay
const COLOR_PLAYER: Color = _palette[31]
const COLOR_BOSS_PRIMARY: Color = _palette[30]
const COLOR_PLAYER_PROJECTILE: Color = _palette[29]
const COLOR_HAZARD_PRIMARY: Color = _palette[28] # Also Enemy Projectiles

# Environment
const COLOR_BACKGROUND: Color = _palette[0]
const COLOR_GRID: Color = _palette[2]
const COLOR_TERRAIN_PRIMARY: Color = _palette[4]
const COLOR_TERRAIN_SECONDARY: Color = _palette[6]

# UI/UX
const COLOR_TEXT_HEADER: Color = _palette[30]
const COLOR_UI_ACCENT_PRIMARY: Color = _palette[28]
const COLOR_TEXT_PRIMARY: Color = _palette[26]
const COLOR_TEXT_DISABLED: Color = _palette[16]
const COLOR_UI_GLOW: Color = _palette[20]
const COLOR_UI_PANEL_BG: Color = _palette[8]

# --- Public Methods ---
## Provides a safe way to get a color by its raw index if needed.
func get_color(index: int) -> Color:
	if index >= 0 and index < _palette.size():
		return _palette[index]
	push_warning("Palette: Invalid color index requested: %d" % index)
	return Color.MAGENTA # Return a highly visible error color

=====================================
FILE: ./src/core/util/identifiers.gd
=====================================
# src/core/util/identifiers.gd
## An autoloaded singleton that provides a central authority for all string-based
## identifiers used in the project, such as group names and pool keys.
##
## Using these constants prevents bugs caused by typos in raw strings.
extends Node

## A container for all physics group names.
## Usage: Identifiers.Groups.PLAYER
class Groups:
	const PLAYER = "player"
	const ENEMY = "enemy"
	const WORLD = "world"
	const HAZARD = "hazard"
	const ONEWAY_PLATFORMS = "oneway_platforms"
	const PLAYER_PROJECTILE = "player_projectile"
	const ENEMY_PROJECTILE = "enemy_projectile"

## A container for all ObjectPool keys.
## Usage: Identifiers.Pools.PLAYER_SHOTS
class Pools:
	const PLAYER_SHOTS = &"player_shots"
	const BOSS_SHOTS = &"boss_shots"
	const TURRET_SHOTS = &"turret_shots"

=====================================
FILE: ./src/core/util/asset_paths.gd
=====================================
# src/core/util/asset_paths.gd
## An autoloaded singleton containing verified, static paths to all critical assets.
##
## Using these constants prevents runtime errors from typos in string paths and
## provides a central place to manage asset locations. Includes a validation
## system to check for missing files at startup in debug builds.
extends Node

# --- CORE SYSTEMS ---
const SCRIPT_COMBAT_UTILS = "res://src/core/util/combat_utils.gd"
const SCENE_MAIN = "res://src/scenes/main/main.tscn"
const SCENE_ENCOUNTER = "res://src/scenes/game/encounter_scene.tscn" # RENAMED
const SCENE_LOADING_SCREEN = "res://src/scenes/loading/loading_screen.tscn"
const SCRIPT_MENU_MANAGER = "res://src/ui/menu_manager/menu_manager.gd"
const SCRIPT_CUSTOM_SLIDER = "res://src/ui/components/custom_slider/custom_slider.gd"

# --- DATA ---
const ENCOUNTER_00 = "res://src/data/encounters/encounter_00.tres"

# --- PLAYER & RELATED ---
const SCENE_PLAYER = "res://src/entities/player/player.tscn"
const SCENE_PLAYER_SHOT = "res://src/projectiles/player_shot.tscn"

# --- BOSS, MINIONS & RELATED ---
const SCENE_BASE_BOSS = "res://src/entities/boss/base_boss.tscn"
const SCENE_BOSS_SHOT = "res://src/projectiles/boss_shot.tscn"
const SCENE_TELEGRAPH_COMPONENT = "res://src/entities/components/telegraph_component.tscn"
const SCENE_TURRET = "res://src/entities/minions/turret.tscn"
const SCENE_TURRET_SHOT = "res://src/projectiles/turret_shot.tscn"

# --- UI & SCENES ---
const SCENE_GAME_HUD = "res://src/ui/game_hud/game_hud.tscn"
const SCENE_GAME_OVER_SCREEN = "res://src/scenes/game_over/game_over_screen.tscn"
const SCENE_VICTORY_SCREEN = "res://src/scenes/victory/victory_screen.tscn"
const SCENE_TITLE_SCREEN = "res://src/scenes/menus/title_screen.tscn"
const SCENE_OPTIONS_SCREEN = "res://src/scenes/menus/options_screen.tscn"
const SCENE_SOUND_SCREEN = "res://src/scenes/menus/sound_screen.tscn"
const SCENE_CONTROLS_SCREEN = "res://src/scenes/menus/controls_screen.tscn"
const SCENE_CREDITS_SCREEN = "res://src/scenes/menus/credits_screen.tscn"

# --- UI COMPONENTS ---
const SCENE_STYLED_MENU_ITEM = "res://src/ui/components/styled_menu_item/styled_menu_item.tscn"
const SCENE_LOGO_DISPLAY = "res://src/ui/components/logo_display/logo_display.tscn"
const SCENE_MUTE_BUTTON = "res://src/ui/components/mute_button/mute_button.tscn"

# --- DEV TOOLS ---
const SCENE_DEBUG_OVERLAY = "res://src/ui/dev/debug_overlay.tscn"

# --- SPRITES & ICONS ---
const SPRITE_CURSOR_DEFAULT = "res://assets/sprites/ui/cursors/sprite_cursor_default.png"
const SPRITE_CURSOR_POINTER = "res://assets/sprites/ui/cursors/sprite_cursor_pointer.png"
const SPRITE_SLIDER_TRACK = "res://assets/sprites/ui/slider/slider-track.png"
const SPRITE_SLIDER_KNOB = "res://assets/sprites/ui/slider/slider-knob.png"
const SPRITE_CHECKBOX_CHECKED = "res://assets/sprites/ui/checkbox/checkbox-checked.png"
const SPRITE_CHECKBOX_UNCHECKED = "res://assets/sprites/ui/checkbox/checkbox-unchecked.png"
const ICON_UI_SOUND_ON = "res://assets/sprites/ui/icons/icon_ui_sound_on.png"
const ICON_UI_SOUND_OFF = "res://assets/sprites/ui/icons/icon_ui_sound_off.png"

# --- FONTS ---
const FONT_MAIN_BLACK = "res://assets/fonts/font_main_black.ttf"
const FONT_MAIN_BOLD = "res://assets/fonts/font_main_bold.ttf"
const FONT_MAIN_REGULAR = "res://assets/fonts/font_main_regular.ttf"

# --- AUDIO ---
const MUSIC_MENU_LOOP = "res://assets/audio/music/music_menu_loop.mp3"
const SFX_UI_BACK = "res://assets/audio/sfx/sfx_ui_back.mp3"
const SFX_UI_ERROR = "res://assets/audio/sfx/sfx_ui_error.mp3"
const SFX_UI_MOVE = "res://assets/audio/sfx/sfx_ui_move.mp3"
const SFX_UI_SELECT = "res://assets/audio/sfx/sfx_ui_select.mp3"
const SFX_GAME_START = "res://assets/audio/sfx/sfx_game_start.mp3"


# --- Validation System ---
## Checks all defined paths to ensure the files exist on disk.
func validate_all_paths() -> void:
	print("AssetPaths: Validating all asset paths...")
	var constants = get_script().get_script_constant_map()
	var missing_assets = false

	for key in constants:
		var value = constants[key]
		if value is String and value.begins_with("res://"):
			if not FileAccess.file_exists(value):
				push_error("Asset path validation failed! File not found for '%s': %s" % [key, value])
				missing_assets = true

	if not missing_assets:
		print("AssetPaths: All paths validated successfully.")

=====================================
FILE: ./src/core/util/constants.gd
=====================================
# src/core/util/constants.gd
## An autoloaded singleton for true global constants that define the
## project's foundational architecture or core system limits.
##
## GUIDELINE: Only add values here that are fundamental and unlikely to
## ever change. Gameplay tuning values belong in [CombatConfig].
extends Node

# --- Audio ---
## The number of simultaneous sound effects that can be played at once.
const NUM_SFX_PLAYERS = 8

# --- Arena Design ---
## The universal size (width and height) of a single grid tile in pixels.
const TILE_SIZE = 50

=====================================
FILE: ./src/core/README.md
=====================================
# Core Subsystem

This directory contains all of the project's global systems, singletons, and core logic that is not specific to a single entity or scene.

## Subdirectories

-   **/building**: Contains the classes responsible for procedural level generation (`ArenaBuilder`, `LevelParser`, etc.).
-   **/data**: Manages game data, including the new `Resource`-based configurations.
-   **/events**: Contains the global `EventBus` and all typed event definitions.
-   **/sequencing**: Manages the `Sequencer` for creating scripted, timed events.
-   **/systems**: Contains the primary global managers (`AudioManager`, `GameManager`, etc.).
-   **/util**: A collection of stateless utility singletons like `AssetPaths` and `Palette`.

## Autoloaded Singletons (Global Access)

The following scripts are registered as autoloads in `project.godot` and can be accessed globally:

-   `Settings`: Manages persistent game settings.
-   `AudioManager`: Controls all audio playback.
-   `CursorManager`: Manages the custom mouse cursor.
-   `Constants`: Holds engine-level constants.
-   `AssetPaths`: Provides safe, static paths to all project assets.
-   `GlobalHud`: The persistent UI layer for global elements.
-   `GameManager`: Manages game state and scene flow.
-   `ArenaBuilder`: The main entry point for level construction.
-   `EventBus`: The global event dispatcher.
-   `Sequencer`: Manages timed event sequences.
-   `Config`: Handles loading data from `Resource`-based configs.
-   `Palette`: Defines the global color scheme.
-   `ObjectPool`: Manages reusable nodes to improve performance.
-   `PhysicsLayers`: Provides named constants for physics collision layers.

## Public API

The primary public API for inter-system communication is the `EventBus`. Systems should emit events to signal state changes and listen for events to react to them, rather than calling each other directly.

=====================================
FILE: ./src/core/events/event_bus.gd
=====================================
# src/core/events/event_bus.gd
## An autoloaded singleton that provides a global event dispatch system.
##
## This allows for loosely-coupled communication between disparate parts of the
## codebase, such as between gameplay systems and the UI.
extends Node

# --- Private Member Variables ---
var _subscribers: Dictionary = {}
var _by_id: Dictionary = {}
var _next_id: int = 1

# --- Public Methods ---

## Subscribes a callback to a specific event. Returns a token ID for unsubscribing.
func on(event_name: StringName, callback: Callable) -> int:
	assert(callback.is_valid(), "EventBus.on: callback must be a valid Callable")

	var subs: Array = _subscribers.get(event_name, [])
	var owner_node = callback.get_object()
	var weak_ref = weakref(owner_node) if owner_node is Node else null

	var entry := {
		"id": _next_id, "callback": callback, "owner_weak": weak_ref,
	}
	subs.append(entry)
	_subscribers[event_name] = subs

	_by_id[_next_id] = event_name # Map the token ID back to the event name
	_next_id += 1
	return entry.id

## Unsubscribes from an event using the token returned by on().
func off(token: int) -> void:
	if not _by_id.has(token): return

	var event_name: StringName = _by_id[token]
	if _subscribers.has(event_name):
		var subs = _subscribers[event_name]
		for i in range(subs.size() - 1, -1, -1):
			if subs[i].id == token:
				subs.remove_at(i)
				break
		if subs.is_empty():
			_subscribers.erase(event_name)

	_by_id.erase(token)

## Emits an event to all subscribers.
func emit(event_name: StringName, payload = null) -> void:
	if not _subscribers.has(event_name): return

	var subs: Array = _subscribers[event_name]
	# Iterate backwards to safely remove dead references during the loop.
	for i in range(subs.size() - 1, -1, -1):
		var sub = subs[i]

		# Auto-prune subscriptions whose owner nodes have been freed.
		if sub.owner_weak and not sub.owner_weak.get_ref():
			_by_id.erase(sub.id)
			subs.remove_at(i)
			continue

		sub.callback.call(payload)

	if subs.is_empty():
		_subscribers.erase(event_name)

=====================================
FILE: ./src/core/events/typed_events/boss_health_changed_event.gd
=====================================
# src/core/events/typed_events/boss_health_changed_event.gd
## A typed payload for the [constant EventCatalog.BOSS_HEALTH_CHANGED] event.
class_name BossHealthChangedEvent
extends Resource

@export var current_health: int = 0
@export var max_health: int = 0

=====================================
FILE: ./src/core/events/typed_events/player_health_changed_event.gd
=====================================
# src/core/events/typed_events/player_health_changed_event.gd
## A typed payload for the [constant EventCatalog.PLAYER_HEALTH_CHANGED] event.
class_name PlayerHealthChangedEvent
extends Resource

@export var current_health: int = 0
@export var max_health: int = 0

=====================================
FILE: ./src/core/events/typed_events/player_healing_charges_changed_event.gd
=====================================
# src/core/events/typed_events/player_healing_charges_changed_event.gd
## A typed payload for the [constant EventCatalog.PLAYER_HEALING_CHARGES_CHANGED] event.
class_name PlayerHealingChargesChangedEvent
extends Resource

@export var current_charges: int = 0

=====================================
FILE: ./src/core/events/event_catalog.gd
=====================================
# src/core/events/event_catalog.gd
## A central, canonical list of all event names in the project.
##
## By using these constants instead of raw strings (e.g., [code]EventBus.emit(EventCatalog.PLAYER_DIED)[/code]),
## we gain IDE autocompletion and prevent typos that lead to silent runtime failures.
class_name EventCatalog
extends Object

# --- Player Events ---
const PLAYER_HEALTH_CHANGED = "player.health_changed"
const PLAYER_HEALING_CHARGES_CHANGED = "player.healing_charges_changed"

# --- Boss / Entity Events ---
const BOSS_HEALTH_CHANGED = "boss.health_changed"
const BOSS_DIED = "boss.died"
const BOSS_PHASE_CHANGED = "boss.phase_changed"

# --- UI State Events ---
const MENU_OPENED = "ui.menu_opened"
const MENU_CLOSED = "ui.menu_closed"

=====================================
FILE: ./src/core/systems/camera_manager.gd
=====================================
# src/core/systems/camera_manager.gd
## An autoloaded singleton responsible for all camera logic.
extends Node

# --- Public Methods ---

## Centers the camera on the arena for a pixel-perfect setup.
func center_camera_on_arena(camera: Camera2D, arena_size_tiles: Vector2i) -> void:
	if not is_instance_valid(camera):
		push_error("CameraManager: Invalid Camera2D provided.")
		return

	var arena_pixel_size = Vector2(arena_size_tiles) * Constants.TILE_SIZE
	camera.position = arena_pixel_size / 2.0

=====================================
FILE: ./src/core/systems/dialogue_manager.gd
=====================================
# src/core/systems/dialogue_manager.gd
## An autoloaded singleton for managing and displaying dialogue.
##
## It will be responsible for loading [DialogueData] resources and commanding
## a UI scene to display the conversation line by line.
extends Node

# --- Private Member Variables ---
var _dialogue_box_instance: Control = null
var _is_dialogue_active: bool = false

# --- Public Methods ---

## Starts a conversation using the data from a [DialogueData] resource.
func start_conversation(_p_data: DialogueData) -> void:
	assert(false, "DialogueManager.start_conversation() is not yet implemented.")
	pass

# TODO: Add a method to advance the dialogue (e.g., on player input).
# func advance_dialogue() -> void:

# TODO: Add a method to properly instance and display the dialogue box UI.
# func _show_dialogue_box() -> void:

# TODO: Add a method to clean up and hide the dialogue box UI.
# func _hide_dialogue_box() -> void:

=====================================
FILE: ./src/core/systems/vfx_manager.gd
=====================================
# src/core/systems/vfx_manager.gd
## An autoloaded singleton for spawning and managing visual effects (VFX).
##
## This system will interact with the [ObjectPool] to efficiently create and
## destroy short-lived visual effects like particle systems.
extends Node

# TODO: Add methods to spawn specific, named particle effects from a pool.
# Example: func play_hit_spark(p_position: Vector2) -> void:

# TODO: Add methods for controlling screen-wide shader effects.
# Example: func start_vignette_pulse() -> void:

func _ready() -> void:
	pass

=====================================
FILE: ./src/core/systems/game_manager.gd
=====================================
# src/core/systems/game_manager.gd
## An autoloaded singleton that manages the state of the game session.
##
## It holds a reference to a [GameStateData] resource, which acts as the
## single source of truth for all runtime session data.
extends Node

# --- Constants ---
const GameStateDataScript = preload("res://src/core/data/game_state_data.gd")

# --- Public Member Variables ---
## The active [GameStateData] resource for the current session.
var state: GameStateData = null

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	# Create a new, clean instance of the game state every time the
	# GameManager is initialized at game startup.
	state = GameStateDataScript.new()

func _exit_tree() -> void:
	# Manually release our reference to the state resource. This allows
	# Godot's garbage collector to free it, preventing memory leaks on exit.
	if is_instance_valid(state):
		state = null

=====================================
FILE: ./src/core/systems/scene_manager.gd
=====================================
# src/core/systems/scene_manager.gd
## A centralized singleton for handling all scene transitions.
##
## This provides a robust, single API for navigation and ensures that
## necessary cleanup (like resetting the ObjectPool) happens automatically.
extends Node

# --- Public API ---

## Generic method to transition to any scene by its path.
func go_to_scene(path: String) -> void:
	_switch_to_scene(path)

## Transitions to the main title screen.
func go_to_title_screen() -> void:
	go_to_scene(AssetPaths.SCENE_TITLE_SCREEN)

## Starts a new game with a specific encounter.
func start_game(encounter_path: String) -> void:
	GameManager.state.current_encounter_path = encounter_path
	go_to_scene(AssetPaths.SCENE_LOADING_SCREEN)

## Transitions to the game over screen.
func go_to_game_over() -> void:
	go_to_scene(AssetPaths.SCENE_GAME_OVER_SCREEN)

## Transitions to the victory screen.
func go_to_victory() -> void:
	go_to_scene(AssetPaths.SCENE_VICTORY_SCREEN)

# --- Private Methods ---

## The core scene-switching logic.
func _switch_to_scene(path: String) -> void:
	# Perform necessary cleanup before changing scenes.
	ObjectPool.reset()
	Sequencer.cancel_all()
	get_tree().call_deferred("change_scene_to_file", path)

=====================================
FILE: ./src/core/systems/object_pool.gd
=====================================
# src/core/systems/object_pool.gd
## An autoloaded singleton that manages pools of reusable nodes.
##
## This system prevents performance degradation (stutter) from frequent
## instantiation and deletion of nodes like projectiles and visual effects.
extends Node

# --- Constants ---
const PlayerShotScene = preload(AssetPaths.SCENE_PLAYER_SHOT)
const BossShotScene = preload(AssetPaths.SCENE_BOSS_SHOT)
const TurretShotScene = preload(AssetPaths.SCENE_TURRET_SHOT)

# --- Private Member Variables ---
var _pools: Dictionary = {}

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	_create_pool_for_scene(Identifiers.Pools.PLAYER_SHOTS, PlayerShotScene, 15)
	_create_pool_for_scene(Identifiers.Pools.BOSS_SHOTS, BossShotScene, 30)
	_create_pool_for_scene(Identifiers.Pools.TURRET_SHOTS, TurretShotScene, 20)

# --- Public Methods ---

## Returns a dictionary containing the active/total counts for each pool.
func get_pool_stats() -> Dictionary:
	var stats: Dictionary = {}
	for pool_name in _pools:
		var pool = _pools[pool_name]
		var total_count = pool.container.get_child_count()
		var inactive_count = pool.inactive.size()
		stats[pool_name] = {
			"active": total_count - inactive_count,
			"total": total_count
		}
	return stats

## Returns all active instances in all pools to their inactive state.
func reset() -> void:
	for pool_name in _pools:
		var pool = _pools[pool_name]
		for child in pool.container.get_children():
			if not pool.inactive.has(child):
				return_instance(child)

## Retrieves an inactive instance from the specified pool.
func get_instance(p_pool_name: StringName) -> Node:
	if not _pools.has(p_pool_name):
		push_error("ObjectPool: Pool '%s' does not exist." % p_pool_name)
		return null

	var pool = _pools[p_pool_name]
	var instance: Node

	if not pool.inactive.is_empty():
		instance = pool.inactive.pop_front()
	else: # Pool is empty, create a new instance
		instance = pool.scene.instantiate()
		pool.container.add_child(instance)

	return instance

## Returns an active instance to its pool.
func return_instance(p_instance: Node) -> void:
	# Guard against returning an already-returned or invalid instance
	if not is_instance_valid(p_instance) or p_instance.process_mode == PROCESS_MODE_DISABLED:
		return

	var pool_name = p_instance.get_meta("pool_name", "")
	if pool_name == "" or not _pools.has(pool_name):
		p_instance.queue_free() # Not a pooled object, so just delete it.
		return

	# Defer deactivation to avoid race conditions on the same frame.
	p_instance.call_deferred("deactivate")

	if not _pools[pool_name].inactive.has(p_instance):
		_pools[pool_name].inactive.append(p_instance)

# --- Private Methods ---

func _create_pool_for_scene(p_pool_name: StringName, p_scene: PackedScene, p_initial_size: int) -> void:
	if _pools.has(p_pool_name): return

	var pool_container = Node.new()
	pool_container.name = p_pool_name
	add_child(pool_container)

	_pools[p_pool_name] = {
		"scene": p_scene,
		"inactive": [],
		"container": pool_container
	}

	for i in range(p_initial_size):
		var instance = p_scene.instantiate()
		pool_container.add_child(instance)
		instance.deactivate()
		_pools[p_pool_name].inactive.append(instance)

=====================================
FILE: ./src/core/systems/audio_manager.gd
=====================================
# src/core/systems/audio_manager.gd
## An autoloaded singleton responsible for all audio playback.
##
## Manages separate channels for music and sound effects, and responds
## dynamically to changes in the global [Settings] resource. It includes
## robust cleanup handlers to prevent memory leaks on game exit.
extends Node

# --- Private Member Variables ---
var _sfx_players: Array[AudioStreamPlayer] = []
var _sfx_player_index: int = 0
var _music_player: AudioStreamPlayer

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	# --- Create SFX Players ---
	for i in range(Constants.NUM_SFX_PLAYERS):
		var player = AudioStreamPlayer.new()
		player.name = "SFXPlayer_%d" % i
		player.bus = "SFX"
		add_child(player)
		_sfx_players.append(player)

	# --- Create Music Player ---
	_music_player = AudioStreamPlayer.new()
	_music_player.name = "MusicPlayer"
	_music_player.bus = "Music"
	add_child(_music_player)

	# --- Connect to Settings ---
	Settings.audio_settings_changed.connect(_on_audio_settings_changed)
	_on_audio_settings_changed() # Apply initial settings

func _notification(what: int) -> void:
	# A robust, system-level notification for cleaning up before the app quits.
	if what == NOTIFICATION_WM_CLOSE_REQUEST:
		if is_instance_valid(_music_player):
			_music_player.stop()
			_music_player.stream = null

func _exit_tree() -> void:
	# Secondary cleanup method for when the node is removed from the tree.
	if is_instance_valid(_music_player):
		_music_player.stop()
		_music_player.stream = null

# --- Public Methods ---

## Plays a one-shot sound effect.
func play_sfx(sound_path: String) -> void:
	var player = _sfx_players[_sfx_player_index]
	player.stream = load(sound_path)
	player.play()
	_sfx_player_index = (_sfx_player_index + 1) % Constants.NUM_SFX_PLAYERS

## Plays a looping music track.
func play_music(music_path: String) -> void:
	if _music_player.stream and _music_player.stream.resource_path == music_path and _music_player.playing:
		return

	_music_player.stream = load(music_path)
	_music_player.play()

## Stops the current music track.
func stop_music() -> void:
	_music_player.stop()

# --- Signal Handlers ---

func _on_audio_settings_changed() -> void:
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear_to_db(Settings.master_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("Master"), Settings.master_muted)

	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Music"), linear_to_db(Settings.music_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("Music"), Settings.music_muted)

	AudioServer.set_bus_volume_db(AudioServer.get_bus_index("SFX"), linear_to_db(Settings.sfx_volume))
	AudioServer.set_bus_mute(AudioServer.get_bus_index("SFX"), Settings.sfx_muted)


=====================================
FILE: ./src/core/systems/cursor_manager.gd
=====================================
# src/core/systems/cursor_manager.gd
## An autoloaded singleton that manages the game's custom "fake" cursor.
##
## This provides full control over the cursor's appearance and ensures it
## renders above all other UI and game elements.
extends CanvasLayer

# --- Constants ---
const CURSOR_DEFAULT = preload(AssetPaths.SPRITE_CURSOR_DEFAULT)
const CURSOR_POINTER = preload(AssetPaths.SPRITE_CURSOR_POINTER)

# --- Private Member Variables ---
var _cursor_sprite: TextureRect

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	# A high layer number ensures the cursor renders above everything else.
	layer = 10
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)

	_cursor_sprite = TextureRect.new()
	_cursor_sprite.texture = CURSOR_DEFAULT
	# CRITICAL: This makes the cursor "click-through," so it never blocks
	# mouse events intended for UI elements underneath it.
	_cursor_sprite.mouse_filter = Control.MOUSE_FILTER_IGNORE
	add_child(_cursor_sprite)

func _process(_delta: float) -> void:
	# Sync the custom cursor's position to the real mouse position every frame.
	_cursor_sprite.position = get_viewport().get_mouse_position()

# --- Public Methods ---

## Sets the cursor's appearance (e.g., when hovering a button).
func set_pointer_state(is_pointing: bool) -> void:
	if is_pointing:
		_cursor_sprite.texture = CURSOR_POINTER
	else:
		_cursor_sprite.texture = CURSOR_DEFAULT

=====================================
FILE: ./src/core/systems/fx_manager.gd
=====================================
# src/core/systems/fx_manager.gd
## An autoloaded singleton to handle purely aesthetic "game feel" effects.
##
## This separates feedback like hit-stop and screen shake from core gameplay
## logic, improving modularity and adhering to SRP.
extends Node

# --- Private Member Variables ---
var _is_hit_stop_active: bool = false

# --- Public Methods ---

## Pauses the entire game tree for a short duration to add impact to an event.
func request_hit_stop(duration: float) -> void:
	# Prevent multiple hit-stops from overlapping, which can feel jarring.
	if _is_hit_stop_active:
		return

	_is_hit_stop_active = true
	get_tree().paused = true

	await get_tree().create_timer(duration, true, false, true).timeout

	# Check if the tree is still paused by the actual game menu before unpausing.
	if get_tree().paused:
		get_tree().paused = false

	_is_hit_stop_active = false

=====================================
FILE: ./src/core/data/combat_db.gd
=====================================
# src/core/data/combat_db.gd
## An autoloaded singleton that provides global, read-only access to the
## main combat configuration resource file.
extends Node

# --- Constants ---
const CONFIG_PATH: String = "res://data/combat_config.tres"

# --- Public Member Variables ---
## A reference to the loaded [CombatConfig] resource.
var config: CombatConfig = null

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	config = load(CONFIG_PATH) as CombatConfig
	if not config:
		push_error("CombatDB: Failed to load CombatConfig at %s" % CONFIG_PATH)

=====================================
FILE: ./src/core/data/config/settings.gd
=====================================
# src/core/data/config/settings.gd
## An autoloaded singleton that manages persistent game settings.
##
## This script uses property setters to automatically emit the
## [signal audio_settings_changed] signal whenever a value is modified,
## allowing other systems to react dynamically.
extends Node

# --- Signals ---
## Emitted whenever any audio-related setting is changed.
signal audio_settings_changed

# --- Audio Settings ---
@export var master_volume: float = 1.0:
	set(value):
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(master_volume, clamped_value):
			master_volume = clamped_value
			audio_settings_changed.emit()

@export var music_volume: float = 1.0:
	set(value):
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(music_volume, clamped_value):
			music_volume = clamped_value
			audio_settings_changed.emit()

@export var sfx_volume: float = 1.0:
	set(value):
		var clamped_value = clampf(value, 0.0, 1.0)
		if not is_equal_approx(sfx_volume, clamped_value):
			sfx_volume = clamped_value
			audio_settings_changed.emit()

@export var master_muted: bool = false:
	set(value):
		if master_muted != value:
			master_muted = value
			audio_settings_changed.emit()

@export var music_muted: bool = true:
	set(value):
		if music_muted != value:
			music_muted = value
			audio_settings_changed.emit()

@export var sfx_muted: bool = false:
	set(value):
		if sfx_muted != value:
			sfx_muted = value
			audio_settings_changed.emit()

=====================================
FILE: ./src/core/data/config/combat_config.gd
=====================================
# src/core/data/config/combat_config.gd
@tool
## A single, flat Resource that exposes all gameplay tuning values.
##
## This allows designers to balance the game directly in the Godot Inspector
## using organized, range-limited sliders.
class_name CombatConfig
extends Resource

@export_group("General Physics")
@export_range(500, 3000, 10) var gravity: float = 1200.0

@export_group("Player Physics")
@export_range(100, 1000, 5) var player_speed: float = 450.0
@export_range(200, 1500, 10) var player_jump_force: float = 680.0
@export_range(200, 1000, 10) var player_pogo_force: float = 450.0
@export_range(0.0, 0.5, 0.01) var player_coyote_time: float = 0.1
@export_range(0.0, 0.5, 0.01) var player_jump_buffer: float = 0.1
@export_range(0.1, 1.0, 0.05) var player_jump_release_dampener: float = 0.4
@export_range(0.0, 0.5, 0.01) var player_wall_coyote_time: float = 0.05
@export_range(1.0, 3.0, 0.1) var player_fast_fall_gravity_multiplier: float = 1.4
@export var player_max_air_jumps: int = 0
@export_range(500, 2500, 50) var player_dash_speed: float = 1400.0
@export_range(0.05, 0.5, 0.01) var player_dash_duration: float = 0.15
@export_range(0.1, 2.0, 0.05) var player_dash_cooldown: float = 0.5
@export_range(50, 500, 5) var player_wall_slide_speed: float = 120.0
@export_range(500, 2500, 50) var player_wall_jump_force_x: float = 1650.0
@export_range(200, 1500, 10) var player_wall_jump_force_y: float = 680.0

@export_group("Player Combat")
@export_range(0.05, 1.0, 0.01) var player_attack_cooldown: float = 0.12
@export_range(0.1, 1.0, 0.01) var player_charge_time: float = 0.35
@export_range(0.05, 0.5, 0.01) var player_attack_duration: float = 0.1
@export_range(100, 5000, 100) var player_attack_friction: float = 2000.0
@export_range(100, 1500, 25) var player_knockback_speed: float = 700.0
@export_range(0.05, 0.5, 0.01) var player_knockback_duration: float = 0.1
@export_range(100, 1500, 25) var player_hazard_knockback_speed: float = 400.0
@export_range(1, 100, 1) var player_determination_per_charge: int = 10

@export_group("Player Health / Healing")
@export_range(1, 20, 1) var player_max_health: int = 5
@export_range(0.1, 5.0, 0.1) var player_heal_duration: float = 2.0
@export_range(1, 10, 1) var player_max_healing_charges: int = 1
@export_range(0.1, 5.0, 0.1) var player_invincibility_duration: float = 1.5

@export_group("Boss")
@export_range(10, 500, 5) var boss_health: int = 30
@export_range(50, 500, 5) var boss_patrol_speed: float = 100.0
@export_range(0.0, 2.0, 0.01) var boss_invincibility_duration: float = 0.1

=====================================
FILE: ./src/core/data/game_state_data.gd
=====================================
# src/core/data/game_state_data.gd
## A Resource that holds all shared runtime state for the game session.
class_name GameStateData
extends Resource

# --- Member Variables ---
## The full 'res://' path to the [EncounterData] resource for the current level.
var current_encounter_path: String = ""
## A reference to the fully constructed, but currently hidden, level node.
var prebuilt_level: Node = null

=====================================
FILE: ./src/core/DEPRECATION.md
=====================================
# Core Subsystem Deprecation Map

This document tracks file renames and moves specifically within `src/core`.

| Old Path | New Path | Reason | Date | Migration Note |
|---|---|---|---|---|
| `res://src/core/data/Config.gd` | `res://src/core/data/config/config.gd` | Naming convention and grouping. | 2025-08-10 | Autoload path was updated in `project.godot`. |
| `res://src/core/data/settings.gd` | `res://src/core/data/config/settings.gd` | Grouped with other data configs. | 2025-08-10 | Autoload path was updated in `project.godot`. |

=====================================
FILE: ./src/core/building/level_parser.gd
=====================================
# src/core/building/level_parser.gd
@tool
## Parses an [EncounterData] resource into a [LevelBuildData] object.
##
## This class is responsible for translating the character-based layout
## into structured data that the builders can use.
class_name LevelParser
extends RefCounted

# --- Constants ---
const GridUtilsScript = preload("res://src/core/util/grid_utils.gd")

# --- Public Methods ---

## Parses the provided [EncounterData] and returns a populated [LevelBuildData].
func parse_level_data(encounter_data: EncounterData) -> LevelBuildData:
	var data = LevelBuildData.new()
	if not is_instance_valid(encounter_data):
		push_error("LevelParser: Invalid EncounterData provided.")
		return data

	var layout: LevelLayout = encounter_data.level_layout
	if not is_instance_valid(layout):
		push_error("LevelParser: EncounterData is missing a valid LevelLayout.")
		return data

	var terrain_data_array: PackedStringArray = layout.terrain_data
	var grid_height: int = terrain_data_array.size()
	var grid_width: int = 0
	if grid_height > 0: grid_width = terrain_data_array[0].length()
	data.dimensions_tiles = Vector2i(grid_width, grid_height)

	var player_marker: String = encounter_data.player_spawn_marker
	var boss_marker: String = encounter_data.boss_spawn_marker
	var minion_spawn_dict: Dictionary = encounter_data.minion_spawns

	for y in range(grid_height):
		var row_string: String = terrain_data_array[y]
		for x in range(row_string.length()):
			var tile_char: String = row_string[x]
			var tile_grid_pos = Vector2i(x, y)
			var tile_world_pos = GridUtilsScript.grid_to_world(tile_grid_pos)

			match tile_char:
				"#": data.terrain_tiles.append(tile_world_pos)
				"-": data.oneway_platforms.append(tile_world_pos)
				"^": data.hazard_tiles.append(tile_world_pos)
				".": data.background_tiles.append(tile_grid_pos)
				_:
					data.background_tiles.append(tile_grid_pos)
					if tile_char == player_marker:
						data.player_spawn_pos = tile_world_pos
					elif tile_char == boss_marker:
						data.boss_spawn_pos = tile_world_pos
					elif minion_spawn_dict.has(tile_char):
						var scene_to_spawn: PackedScene = minion_spawn_dict[tile_char]
						var spawn_data = LevelBuildData.MinionSpawnData.new(scene_to_spawn, tile_world_pos)
						data.minion_spawns.append(spawn_data)
	return data


=====================================
FILE: ./src/core/building/terrain_builder.gd
=====================================
# src/core/building/terrain_builder.gd
@tool
## Responsible for creating all static level geometry nodes.
##
## This includes solid walls, one-way platforms, hazards, and background tiles.
## It uses [Polygon2D] for in-game visuals to prevent conflicts with debug drawing.
class_name TerrainBuilder
extends Node

# --- Constants ---
const GridUtilsScript = preload("res://src/core/util/grid_utils.gd")

# --- Public Methods ---

## Asynchronously creates all terrain nodes defined in the [LevelBuildData].
func build_terrain_async(parent_node: Node, build_data: LevelBuildData, tree: SceneTree) -> void:
	const BATCH_SIZE = 20

	for i in range(build_data.terrain_tiles.size()):
		_create_solid_tile(parent_node, build_data.terrain_tiles[i])
		if i % BATCH_SIZE == 0: await tree.process_frame

	for i in range(build_data.oneway_platforms.size()):
		_create_oneway_platform(parent_node, build_data.oneway_platforms[i])
		if i % BATCH_SIZE == 0: await tree.process_frame

	for i in range(build_data.hazard_tiles.size()):
		_create_hazard_tile(parent_node, build_data.hazard_tiles[i])
		if i % BATCH_SIZE == 0: await tree.process_frame

	await tree.process_frame

## Procedurally fills the camera's viewport with background grid tiles.
func fill_viewport(parent_node: Node, build_data: LevelBuildData, camera: Camera2D) -> void:
	var view_transform = camera.get_viewport().get_canvas_transform().affine_inverse()
	var world_top_left = view_transform.origin
	var world_bottom_right = world_top_left + camera.get_viewport_rect().size * view_transform.get_scale()

	var grid_top_left: Vector2i = GridUtilsScript.world_to_grid(world_top_left)
	var grid_bottom_right: Vector2i = GridUtilsScript.world_to_grid(world_bottom_right)

	var existing_bg_tiles = {}
	for pos in build_data.background_tiles:
		existing_bg_tiles[pos] = true

	for y in range(grid_top_left.y, grid_bottom_right.y + 1):
		for x in range(grid_top_left.x, grid_bottom_right.x + 1):
			var grid_pos = Vector2i(x, y)
			if not existing_bg_tiles.has(grid_pos):
				_create_background_tile(parent_node, grid_pos)

# --- Private Methods ---

func _create_background_tile(parent_node: Node, grid_pos: Vector2i) -> void:
	var visual_rect = ColorRect.new()
	visual_rect.color = Palette.COLOR_GRID
	visual_rect.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	visual_rect.position = Vector2(grid_pos) * Constants.TILE_SIZE
	parent_node.add_child(visual_rect)
	parent_node.move_child(visual_rect, 0)

func _create_solid_tile(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = PhysicsLayers.WORLD
	static_body.add_to_group(Identifiers.Groups.WORLD)

	var collision_shape := CollisionShape2D.new()
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	collision_shape.shape = rectangle_shape
	static_body.add_child(collision_shape)

	var visual_poly := Polygon2D.new()
	var half_size = Constants.TILE_SIZE / 2.0
	visual_poly.polygon = PackedVector2Array([
		Vector2(-half_size, -half_size), Vector2(half_size, -half_size),
		Vector2(half_size, half_size), Vector2(-half_size, half_size)
	])
	visual_poly.color = Palette.COLOR_TERRAIN_PRIMARY
	static_body.add_child(visual_poly)

	parent_node.add_child(static_body)

func _create_oneway_platform(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = PhysicsLayers.WORLD
	static_body.add_to_group(Identifiers.Groups.WORLD)
	static_body.add_to_group(Identifiers.Groups.ONEWAY_PLATFORMS)

	var collision_shape := CollisionShape2D.new()
	collision_shape.one_way_collision = true
	var rectangle_shape := RectangleShape2D.new()
	var platform_height = 10.0
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, platform_height)
	collision_shape.shape = rectangle_shape
	collision_shape.position.y = -(Constants.TILE_SIZE / 2.0) + (rectangle_shape.size.y / 2.0)
	static_body.add_child(collision_shape)

	var visual_poly := Polygon2D.new()
	var half_width = Constants.TILE_SIZE / 2.0
	var half_height = platform_height / 2.0
	visual_poly.position = collision_shape.position
	visual_poly.polygon = PackedVector2Array([
		Vector2(-half_width, -half_height), Vector2(half_width, -half_height),
		Vector2(half_width, half_height), Vector2(-half_width, half_height)
	])
	visual_poly.color = Palette.COLOR_TERRAIN_SECONDARY
	static_body.add_child(visual_poly)

	parent_node.add_child(static_body)

func _create_hazard_tile(parent_node: Node, pos: Vector2) -> void:
	var static_body := StaticBody2D.new()
	static_body.position = pos
	static_body.collision_layer = PhysicsLayers.WORLD | PhysicsLayers.HAZARD
	static_body.add_to_group(Identifiers.Groups.WORLD)
	static_body.add_to_group(Identifiers.Groups.HAZARD)

	var collision_shape := CollisionShape2D.new()
	var rectangle_shape := RectangleShape2D.new()
	rectangle_shape.size = Vector2(Constants.TILE_SIZE, Constants.TILE_SIZE)
	collision_shape.shape = rectangle_shape
	static_body.add_child(collision_shape)

	var visual_poly := Polygon2D.new()
	var half_size = Constants.TILE_SIZE / 2.0
	visual_poly.polygon = PackedVector2Array([
		Vector2(-half_size, -half_size), Vector2(half_size, -half_size),
		Vector2(half_size, half_size), Vector2(-half_size, half_size)
	])
	visual_poly.color = Palette.COLOR_HAZARD_PRIMARY
	static_body.add_child(visual_poly)

	parent_node.add_child(static_body)

=====================================
FILE: ./src/core/building/level_build_data.gd
=====================================
# src/core/building/level_build_data.gd
@tool
## A custom Resource that acts as a data container for a parsed level.
##
## It holds all the necessary information for the [ArenaBuilder] to construct
## the level, including tile positions and entity spawn points.
class_name LevelBuildData
extends Resource

# --- Inner Classes ---
## A simple data container for a single minion spawn.
class MinionSpawnData extends RefCounted:
	var scene: PackedScene
	var position: Vector2
	func _init(p_scene: PackedScene, p_pos: Vector2) -> void:
		scene = p_scene
		position = p_pos

# --- Member Variables ---
var terrain_tiles: Array[Vector2] = []
var oneway_platforms: Array[Vector2] = []
var hazard_tiles: Array[Vector2] = []
var background_tiles: Array[Vector2i] = []
var player_spawn_pos: Vector2 = Vector2.ZERO
var boss_spawn_pos: Vector2 = Vector2.ZERO
var encounter_data_resource: EncounterData = null
var dimensions_tiles: Vector2i = Vector2i.ZERO
var minion_spawns: Array[MinionSpawnData] = []

=====================================
FILE: ./src/core/building/arena_builder.gd
=====================================
# src/core/building/arena_builder.gd
## An autoload that procedurally constructs the entire level scene.
##
## It parses data from [EncounterData] and [LevelLayout] resources, then uses
## builder sub-systems to spawn the terrain, entities, and UI.
extends Node

# --- Private Member Variables ---
var _current_build_data: LevelBuildData
var _current_level_container: Node
var _intro_sequence_handle: SequenceHandle

# --- Public Methods ---

## Asynchronously builds the entire level and returns the root node.
func build_level_async() -> Node:
	if is_instance_valid(_intro_sequence_handle): _intro_sequence_handle.cancel()
	_intro_sequence_handle = null

	_current_level_container = Node.new(); _current_level_container.name = "LevelContainer"

	var encounter_path: String = GameManager.state.current_encounter_path
	if encounter_path.is_empty(): return _current_level_container

	var encounter_data: EncounterData = load(encounter_path)
	if not is_instance_valid(encounter_data):
		push_error("ArenaBuilder: Failed to load EncounterData at path: %s" % encounter_path)
		return _current_level_container

	var parser = LevelParser.new()
	_current_build_data = parser.parse_level_data(encounter_data)
	_current_build_data.encounter_data_resource = encounter_data
	_current_level_container.set_meta("build_data", _current_build_data)

	await get_tree().process_frame

	var terrain_builder = TerrainBuilder.new()
	await terrain_builder.build_terrain_async(_current_level_container, _current_build_data, get_tree())

	await _spawn_player_async()
	await _spawn_hud_async()
	await _spawn_minions_async()

	_intro_sequence_handle = _run_intro_sequence()
	if is_instance_valid(_intro_sequence_handle):
		await _intro_sequence_handle.finished

	await get_tree().process_frame

	return _current_level_container

# --- Private Methods ---

func _spawn_player_async() -> void:
	var instance = load(AssetPaths.SCENE_PLAYER).instantiate()
	instance.global_position = _current_build_data.player_spawn_pos
	_current_level_container.add_child(instance)
	await get_tree().process_frame

func _spawn_boss_async() -> Node:
	var boss_scene: PackedScene = _current_build_data.encounter_data_resource.boss_scene
	if not boss_scene: return null
	var instance = boss_scene.instantiate()
	instance.global_position = _current_build_data.boss_spawn_pos
	_current_level_container.add_child(instance)
	await get_tree().process_frame
	return instance

func _spawn_hud_async() -> void:
	var instance = load(AssetPaths.SCENE_GAME_HUD).instantiate()
	_current_level_container.add_child(instance)
	await get_tree().process_frame

func _spawn_minions_async() -> void:
	for spawn_data in _current_build_data.minion_spawns:
		var instance = spawn_data.scene.instantiate()
		instance.global_position = spawn_data.position
		_current_level_container.add_child(instance)
		await get_tree().process_frame

func _run_intro_sequence() -> SequenceHandle:
	var wait_step = WaitStep.new(); wait_step.duration = 0.5
	var spawn_boss_step = CallableStep.new()
	spawn_boss_step.callable = Callable(self, "_spawn_boss_async")
	var intro_steps: Array[SequenceStep] = [wait_step, spawn_boss_step]
	return Sequencer.run_sequence(intro_steps)


=====================================
FILE: ./src/api/combat/damage_info.gd
=====================================
# src/api/combat/damage_info.gd
## A typed Resource that defines a complete damage event.
class_name DamageInfo
extends Resource

# --- Editor Properties ---
@export var amount: int = 1
@export var bypass_invincibility: bool = false

# --- Member Variables ---
## A reference to the node that was the source of the damage.
## This is a runtime-only property and should not be set in the editor.
var source_node: Node = null

=====================================
FILE: ./src/api/combat/damage_result.gd
=====================================
# src/api/combat/damage_result.gd
## A typed Resource for the return value of an `apply_damage` call.
class_name DamageResult
extends Resource

# --- Member Variables ---
## True if damage was successfully applied.
var was_damaged: bool = false
## The calculated knockback velocity that should be applied to the target.
var knockback_velocity: Vector2 = Vector2.ZERO

=====================================
FILE: ./src/api/interfaces/IPoolable.gd
=====================================
# src/api/interfaces/IPoolable.gd
## The conceptual "interface" for any scene that can be managed by the [ObjectPool].
##
## This script is not meant to be extended directly. It serves as project
## documentation. A scene is considered "poolable" if it implements the methods
## defined in this contract.
class_name IPoolable

# --- The Contract ---

## Prepares the node for use after being retrieved from the pool.
##
## This method should handle logic like enabling processing, making collision
## shapes active, and resetting any state from its previous use.
# func activate() -> void:
#     pass

## Prepares the node to be returned to the pool's inactive list.
##
## This method should handle logic like disabling processing, hiding the node,
## disabling collision shapes, and moving it to an off-screen "graveyard" position.
# func deactivate() -> void:
#     pass

=====================================
FILE: ./src/api/interfaces/IDamageable.gd
=====================================
# src/api/interfaces/IDamageable.gd
## The conceptual "interface" for any object that can take damage.
##
## This script is not meant to be extended directly. It serves as project
## documentation for the damage system's API. A node is considered "damageable"
## if it implements the methods defined in this contract. We check for compliance
## using [code]target.has_method("apply_damage")[/code].
class_name IDamageable

# --- The Contract ---

## Applies damage to the object.
##
## [param damage_info]: A [DamageInfo] resource detailing the damage event.
## [return]: A [DamageResult] resource indicating the outcome.
# func apply_damage(damage_info: DamageInfo) -> DamageResult:
#     pass

=====================================
FILE: ./src/api/interfaces/IComponent.gd
=====================================
# src/api/interfaces/IComponent.gd
## The conceptual "interface" for all entity components.
##
## This script defines the formal contract that components like [HealthComponent]
## and [CombatComponent] adhere to. It is not meant to be instanced directly.
class_name IComponent
extends Node

# --- Virtual Methods ---

## Initializes the component and injects its dependencies.
##
## [param p_owner]: A reference to the node that owns this component.
## [param p_dependencies]: A dictionary of any other required nodes or resources.
func setup(_p_owner: Node, _p_dependencies: Dictionary = {}) -> void:
	pass

## Called when the owner is being destroyed to clean up connections and references.
func teardown() -> void:
	pass

=====================================
FILE: ./src/projectiles/player_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cmdkxwvysirh1"]

[ext_resource type="Script" path="res://src/projectiles/player_shot.gd" id="1_4wg7x"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playershot"]
size = Vector2(40, 40)

[node name="PlayerShot" type="Area2D" groups=["player_projectile"]]
collision_layer = 0
collision_mask = 22
script = ExtResource("1_4wg7x")
metadata/pool_name = &"player_shots"

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
color = Color(0.92549, 0.92549, 0.92549, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_playershot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-20, -20, 40, 40)

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/turret_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://d1e2f3g4h5i6j"]

[ext_resource type="Script" path="res://src/projectiles/turret_shot.gd" id="1_turret_shot_script"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_turretshot"]
size = Vector2(20, 20)

[node name="TurretShot" type="Area2D"]
collision_layer = 16
collision_mask = 65
script = ExtResource("1_turret_shot_script")
metadata/pool_name = &"turret_shots"

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -10.0
offset_top = -10.0
offset_right = 10.0
offset_bottom = 10.0
color = Color(0.898039, 0.898039, 0.898039, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_turretshot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-10, -10, 20, 20)

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/boss_shot.tscn
=====================================
[gd_scene load_steps=3 format=3 uid="uid://cxnmr7yrvchve"]

[ext_resource type="Script" path="res://src/projectiles/boss_shot.gd" id="1_4qgog"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bossshot"]
size = Vector2(60, 60)

[node name="BossShot" type="Area2D"]
collision_layer = 16
collision_mask = 0
script = ExtResource("1_4qgog")
metadata/pool_name = &"boss_shots"

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0.8, 0.4, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_bossshot")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
rect = Rect2(-30, -30, 60, 60)

[connection signal="screen_exited" from="VisibleOnScreenNotifier2D" to="." method="_on_screen_exited"]

=====================================
FILE: ./src/projectiles/turret_shot.gd
=====================================
# src/projectiles/turret_shot.gd
## A projectile fired by the Turret minion. Implements the [IPoolable] interface.
class_name TurretShot
extends Area2D

# --- Constants ---
const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

# --- Node References ---
@onready var collision_shape: CollisionShape2D = $CollisionShape2D

# --- Member Variables ---
var direction: Vector2 = Vector2.LEFT
var speed: float = 500.0
var damage: int = 1

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	add_to_group(Identifiers.Groups.ENEMY_PROJECTILE)
	$ColorRect.color = Palette.COLOR_UI_ACCENT_PRIMARY

func _physics_process(delta: float) -> void:
	global_position += direction * speed * delta

# --- Public Methods (IPoolable Contract) ---

## Activates the projectile, making it visible and interactive.
func activate() -> void:
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

## Deactivates the projectile, preparing it to be returned to the ObjectPool.
func deactivate() -> void:
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000) # Move to the graveyard

# --- Signal Handlers ---

func _on_body_entered(body: Node) -> void:
	var damageable = CombatUtilsScript.find_damageable(body)
	if is_instance_valid(damageable):
		var damage_info = DamageInfo.new()
		damage_info.amount = damage
		damage_info.source_node = self
		damageable.apply_damage(damage_info)

	ObjectPool.return_instance(self)

func _on_screen_exited() -> void:
	ObjectPool.return_instance(self)

=====================================
FILE: ./src/projectiles/player_shot.gd
=====================================
# src/projectiles/player_shot.gd
## A projectile fired by the player. Implements the [IPoolable] interface.
class_name PlayerShot
extends Area2D

# --- Constants ---
const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

# --- Node References ---
@onready var collision_shape: CollisionShape2D = $CollisionShape2D

# --- Member Variables ---
var direction: Vector2 = Vector2.RIGHT
var speed: float = 1000.0
var damage: int = 2

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	$ColorRect.color = Palette.COLOR_PLAYER_PROJECTILE

func _physics_process(delta: float) -> void:
	global_position += direction * speed * delta

# --- Public Methods (IPoolable Contract) ---

## Activates the projectile, making it visible and interactive.
func activate() -> void:
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

## Deactivates the projectile, preparing it to be returned to the ObjectPool.
func deactivate() -> void:
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000) # Move to the graveyard

# --- Signal Handlers ---

func _on_body_entered(body: Node) -> void:
	var damageable = CombatUtilsScript.find_damageable(body)
	if is_instance_valid(damageable):
		var damage_info = DamageInfo.new()
		damage_info.amount = damage
		damage_info.source_node = self
		damageable.apply_damage(damage_info)

	ObjectPool.return_instance(self)

func _on_area_entered(area: Area2D) -> void:
	if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		ObjectPool.return_instance(area)
	ObjectPool.return_instance(self)

func _on_screen_exited() -> void:
	ObjectPool.return_instance(self)

=====================================
FILE: ./src/projectiles/boss_shot.gd
=====================================
# src/projectiles/boss_shot.gd
## A projectile fired by the boss. Implements the [IPoolable] interface.
class_name BossShot
extends Area2D

# --- Node References ---
@onready var collision_shape: CollisionShape2D = $CollisionShape2D

# --- Member Variables ---
var direction: Vector2 = Vector2.LEFT
var speed: float = 400.0

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	$ColorRect.color = Palette.COLOR_HAZARD_PRIMARY
	add_to_group(Identifiers.Groups.ENEMY_PROJECTILE)

func _physics_process(delta: float) -> void:
	global_position += direction * speed * delta

# --- Public Methods (IPoolable Contract) ---

## Activates the projectile, making it visible and interactive.
func activate() -> void:
	process_mode = PROCESS_MODE_INHERIT
	collision_shape.disabled = false

## Deactivates the projectile, preparing it to be returned to the ObjectPool.
func deactivate() -> void:
	process_mode = PROCESS_MODE_DISABLED
	collision_shape.disabled = true
	global_position = Vector2(-1000, -1000) # Move to the graveyard

# --- Signal Handlers ---

func _on_screen_exited() -> void:
	ObjectPool.return_instance(self)

=====================================
FILE: ./src/data/dialogue/test_conversation.tres
=====================================
[gd_resource type="Resource" script_class="DialogueData" load_steps=3 format=3 uid="uid://dialogue_test_tres"]

[ext_resource type="Script" path="res://src/data/dialogue/dialogue_data.gd" id="1_dialogue_data"]

[sub_resource type="Resource" id="DialogueLine_1" script_class="DialogueLine"]
script = ExtResource("1_dialogue_data")
character_name = "Narrator"
text = "This is the first line of a test conversation."

[resource]
script = ExtResource("1_dialogue_data")
conversation = Array[ExtResource("1_dialogue_data")]([SubResource("DialogueLine_1")])

=====================================
FILE: ./src/data/dialogue/dialogue_data.gd
=====================================
# src/data/dialogue/dialogue_data.gd
@tool
## A custom Resource that holds the data for a single line of dialogue or a full conversation.
class_name DialogueData
extends Resource

## A container for a single line of dialogue text.
class DialogueLine extends Resource:
	@export var character_name: String = ""
	@export_multiline var text: String = ""
	# TODO: Add exports for character portraits, voice clips, etc.

# --- Editor Properties ---
@export var conversation: Array[DialogueLine] = []

=====================================
FILE: ./src/data/layouts/level_layout.gd
=====================================
# src/data/layouts/level_layout.gd
@tool
## A custom Resource that holds the terrain data for a level.
##
## Includes a custom configuration warning to ensure that all rows in the
## terrain data array have the same length for valid parsing.
class_name LevelLayout
extends Resource

# --- Editor Properties ---
@export var terrain_data: PackedStringArray = []:
	set(value):
		terrain_data = value
		# Tell the editor to refresh its property list, which re-runs the warning check.
		notify_property_list_changed()

# --- Godot Lifecycle Methods ---

func _get_configuration_warnings() -> PackedStringArray:
	var warnings = PackedStringArray()
	if terrain_data.is_empty():
		warnings.append("Terrain Data is empty. The level will be blank.")
		return warnings

	var first_row_length = -1
	if not terrain_data[0].is_empty():
		first_row_length = terrain_data[0].length()
	else: # Handle case where the first row is empty
		warnings.append("The first row of terrain data cannot be empty.")
		return warnings

	for i in range(1, terrain_data.size()):
		if terrain_data[i].length() != first_row_length:
			var msg = "Row %d (length %d) has a different length than the first row (length %d)."
			warnings.append(msg % [i + 1, terrain_data[i].length(), first_row_length])
			break # Only show the first error found

	return warnings


=====================================
FILE: ./src/data/layouts/layout_00.tres
=====================================
[gd_resource type="Resource" script_class="LevelLayout" load_steps=2 format=3 uid="uid://bst2lw60wetic"]

[ext_resource type="Script" uid="uid://c01s26irlgw56" path="res://src/data/layouts/level_layout.gd" id="1_layout"]

[resource]
script = ExtResource("1_layout")
terrain_data = PackedStringArray("####################", "#..................#", "#....@.............#", "#............&.....#", "#.........#--#.....#", "#.........#..#.....#", "#.........#--#.....#", "#.........#..#.....#", "#..T......#..#.....#", "#.........#..#.....#", "#..................#", "#..................#", "#.........####.....#", "#.........####.....#", "#.........####.....#", "####......####.....#", "####......####..T..#", "####...............#", "#..................#", "###############^^^##")


=====================================
FILE: ./src/data/encounters/encounter_00.tres
=====================================
[gd_resource type="Resource" script_class="EncounterData" load_steps=5 format=3 uid="uid://4lptu40or7m1"]

[ext_resource type="Script" uid="uid://co2urq51qk44e" path="res://src/data/encounters/encounter_data.gd" id="1_encounter"]
[ext_resource type="PackedScene" uid="uid://dmej4a7ykn2q0" path="res://src/entities/boss/base_boss.tscn" id="2_boss_scene"]
[ext_resource type="Resource" uid="uid://bst2lw60wetic" path="res://src/data/layouts/layout_00.tres" id="2_x64bm"]
[ext_resource type="PackedScene" uid="uid://c7d8faf0g1h2i" path="res://src/entities/minions/turret.tscn" id="3_turret_scene"]

[resource]
script = ExtResource("1_encounter")
level_layout = ExtResource("2_x64bm")
player_spawn_marker = "@"
boss_scene = ExtResource("2_boss_scene")
boss_spawn_marker = "&"
minion_spawns = {
"T": ExtResource("3_turret_scene")
}


=====================================
FILE: ./src/data/encounters/encounter_data.gd
=====================================
# src/data/encounters/encounter_data.gd
@tool
## A custom Resource that defines a complete encounter or stage.
##
## This allows designers to create new levels by combining a [LevelLayout],
## a boss scene, and minion definitions without writing any code.
class_name EncounterData
extends Resource

# --- Editor Properties ---
@export_group("Layout")
@export var level_layout: LevelLayout
@export var player_spawn_marker: String = "@"

@export_group("Boss")
@export var boss_scene: PackedScene
@export var boss_spawn_marker: String = "&"

@export_group("Minions")
## The key is the character marker in the layout file (e.g., "T").
## The value is the PackedScene for that minion.
@export var minion_spawns: Dictionary = {}

=====================================
FILE: ./src/entities/boss/attack_patterns/lunge_attack.tres
=====================================
[gd_resource type="Resource" script_class="AttackPattern" load_steps=2 format=3]

[ext_resource type="Script" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="1_attack_pattern"]

[resource]
script = ExtResource("1_attack_pattern")
attack_id = &"lunge"
telegraph_duration = 0.8
attack_duration = 0.5
cooldown = 2.0


=====================================
FILE: ./src/entities/boss/attack_patterns/attack_pattern.gd
=====================================
# src/entities/boss/attack_patterns/attack_pattern.gd
@tool
## A data resource that defines the properties of a single boss attack.
##
## This allows for designing and tuning attacks directly in the editor instead
## of hard-coding values in scripts.
class_name AttackPattern
extends Resource

# --- Editor Properties ---
## A unique identifier used by the StateMachine to select attack logic.
@export var attack_id: StringName = &""
## The duration in seconds that the attack's warning visual is displayed.
@export var telegraph_duration: float = 0.5
## The duration in seconds that the attack itself is active.
@export var attack_duration: float = 0.1
## The time in seconds after this attack before the boss can start another.
@export var cooldown: float = 1.5

=====================================
FILE: ./src/entities/boss/attack_patterns/volley_shot.tres
=====================================
[gd_resource type="Resource" script_class="AttackPattern" load_steps=2 format=3]

[ext_resource type="Script" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="1_attack_pattern"]

[resource]
script = ExtResource("1_attack_pattern")
attack_id = &"volley_shot"
telegraph_duration = 0.7
attack_duration = 0.6
cooldown = 2.5


=====================================
FILE: ./src/entities/boss/attack_patterns/single_shot.tres
=====================================
[gd_resource type="Resource" script_class="AttackPattern" load_steps=2 format=3]

[ext_resource type="Script" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="1_attack_pattern"]

[resource]
script = ExtResource("1_attack_pattern")
attack_id = &"single_shot"
telegraph_duration = 0.5
attack_duration = 0.1
cooldown = 1.5


=====================================
FILE: ./src/entities/boss/boss_state_data.gd
=====================================
# src/entities/boss/boss_state_data.gd
## A Resource that holds all shared runtime state data for the Boss.
class_name BossStateData
extends Resource

# --- Configuration Reference ---
var config: CombatConfig

# --- Health & Combat ---
var max_health: int = 30
var health: int = 30:
	set(value):
		health = clamp(value, 0, max_health)

var is_invincible: bool = false

# --- Physics & Movement ---
var facing_direction: float = -1.0

=====================================
FILE: ./src/entities/boss/base_boss.tscn
=====================================
[gd_scene load_steps=10 format=3 uid="uid://dmej4a7ykn2q0"]

[ext_resource type="Script" uid="uid://5bkyx4fguxor" path="res://src/entities/boss/base_boss.gd" id="1_26qjf"]
[ext_resource type="Script" uid="uid://dy4xl0q65hagu" path="res://src/entities/boss/attack_patterns/attack_pattern.gd" id="2_30ufx"]
[ext_resource type="Script" uid="uid://ctgxiw44ctnwu" path="res://src/entities/components/health_component.gd" id="2_b0so8"]
[ext_resource type="Script" uid="uid://bbtepurljrp6c" path="res://src/entities/components/base_state_machine.gd" id="3_fsm"]
[ext_resource type="Script" uid="uid://uood4w1gjnxv" path="res://src/entities/components/armor_component.gd" id="4_armor"]
[ext_resource type="Resource" path="res://src/entities/boss/attack_patterns/single_shot.tres" id="5_pattern_single"]
[ext_resource type="Resource" path="res://src/entities/boss/attack_patterns/volley_shot.tres" id="6_pattern_volley"]
[ext_resource type="Resource" path="res://src/entities/boss/attack_patterns/lunge_attack.tres" id="7_pattern_lunge"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_bossbody"]
size = Vector2(60, 60)

[node name="BaseBoss" type="CharacterBody2D" groups=["enemy"]]
collision_layer = 12
collision_mask = 3
script = ExtResource("1_26qjf")
phase_1_patterns = Array[ExtResource("2_30ufx")]([ExtResource("5_pattern_single"), ExtResource("6_pattern_volley")])
phase_2_patterns = Array[ExtResource("2_30ufx")]([ExtResource("5_pattern_single"), ExtResource("6_pattern_volley"), ExtResource("7_pattern_lunge")])
phase_3_patterns = Array[ExtResource("2_30ufx")]([ExtResource("6_pattern_volley"), ExtResource("7_pattern_lunge")])

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0.6, 0.6, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_bossbody")

[node name="CooldownTimer" type="Timer" parent="."]
wait_time = 1.5
one_shot = true

[node name="PatrolTimer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_b0so8")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("3_fsm")

[node name="ArmorComponent" type="Node" parent="."]
script = ExtResource("4_armor")

[connection signal="timeout" from="CooldownTimer" to="." method="_on_cooldown_timer_timeout"]
[connection signal="timeout" from="PatrolTimer" to="." method="_on_patrol_timer_timeout"]


=====================================
FILE: ./src/entities/boss/states/state_boss_idle.gd
=====================================
# src/entities/boss/states/state_boss_idle.gd
## A transient state that immediately selects the next attack pattern.
class_name BossStateIdle
extends BaseState

func enter(_msg := {}) -> void:
	owner.velocity.x = 0

	if owner.current_attack_patterns.is_empty():
		push_warning("BossStateIdle: No attack patterns defined for current phase. Defaulting to Cooldown.")
		state_machine.change_state(owner.State.COOLDOWN)
		return

	var chosen_pattern: AttackPattern = owner.current_attack_patterns.pick_random()
	state_machine.change_state(owner.State.ATTACK, {"pattern": chosen_pattern})


=====================================
FILE: ./src/entities/boss/states/state_boss_lunge.gd
=====================================
# src/entities/boss/states/state_boss_lunge.gd
## Executes a high-speed, invulnerable dash attack across the arena.
extends BaseState
class_name BossStateLunge

# --- Constants ---
const LUNGE_SPEED = 1200.0

# --- Private Member Variables ---
var _boss: BaseBoss
var _lunge_duration: float

# --- State Lifecycle ---

func enter(msg := {}) -> void:
	self._boss = owner as BaseBoss
	if not _boss: return

	var pattern: AttackPattern = msg.get("pattern")
	if pattern:
		_lunge_duration = pattern.attack_duration
	else:
		_lunge_duration = 0.5 # Default fallback

	_boss.armor_component.activate()
	_boss.velocity = Vector2(state_data.facing_direction * LUNGE_SPEED, 0)

func process_physics(delta: float) -> void:
	_lunge_duration -= delta
	if _lunge_duration <= 0:
		_boss.armor_component.deactivate()
		state_machine.change_state(_boss.State.COOLDOWN)


=====================================
FILE: ./src/entities/boss/states/state_boss_cooldown.gd
=====================================
# src/entities/boss/states/state_boss_cooldown.gd
## The state for when the boss is waiting after completing an attack.
extends BaseState
class_name BossStateCooldown

func enter(_msg := {}) -> void:
	owner.velocity.x = 0
	owner.cooldown_timer.start()


=====================================
FILE: ./src/entities/boss/states/state_boss_attack.gd
=====================================
# src/entities/boss/states/state_boss_attack.gd
## Handles the telegraph and execution of the boss's attacks.
class_name BossStateAttack
extends BaseState

# --- Constants ---
const TelegraphScene = preload(AssetPaths.SCENE_TELEGRAPH_COMPONENT)

# --- Private Member Variables ---
var _current_pattern: AttackPattern
var _boss: BaseBoss

# --- State Lifecycle ---

func enter(msg := {}) -> void:
	self._boss = owner as BaseBoss
	if not _boss:
		push_error("BossStateAttack: Owner is not a BaseBoss. Aborting.")
		state_machine.change_state(_boss.State.COOLDOWN)
		return

	if not msg.has("pattern"):
		push_error("BossStateAttack: No 'pattern' provided. Aborting.")
		state_machine.change_state(_boss.State.COOLDOWN)
		return

	_current_pattern = msg.get("pattern")
	_start_telegraph()

# --- Private Methods ---

func _start_telegraph() -> void:
	var telegraph = TelegraphScene.instantiate()
	_boss.add_child(telegraph)

	var telegraph_duration: float = _current_pattern.telegraph_duration
	var telegraph_position: Vector2
	var telegraph_size: Vector2
	var telegraph_color: Color = Palette.COLOR_HAZARD_PRIMARY

	match _current_pattern.attack_id:
		&"lunge":
			var lunge_width = 800
			telegraph_size = Vector2(lunge_width, 60) # A thin rectangle
			var x_offset = (lunge_width / 2.0) + (_boss.get_node("CollisionShape2D").shape.size.x / 2.0)
			telegraph_position = _boss.global_position + Vector2(state_data.facing_direction * x_offset, 0)
		_: # Default case for projectile attacks
			telegraph_size = Vector2(150, 150)
			telegraph_position = _boss.global_position + Vector2(state_data.facing_direction * 100, 0)

	telegraph.start_telegraph(telegraph_duration, telegraph_size, telegraph_position, telegraph_color)
	await telegraph.telegraph_finished

	_execute_attack()

func _execute_attack() -> void:
	if _current_pattern.attack_id == &"lunge":
		state_machine.change_state(_boss.State.LUNGE, {"pattern": _current_pattern})
		return

	match _current_pattern.attack_id:
		&"single_shot":
			_boss.fire_shot_at_player()
		&"volley_shot":
			match _boss.phases_remaining:
				3: _boss.fire_volley(1)
				2: _boss.fire_volley(3)
				1: _boss.fire_volley(5)

	_boss.cooldown_timer.wait_time = _current_pattern.cooldown
	state_machine.change_state(_boss.State.COOLDOWN)


=====================================
FILE: ./src/entities/boss/states/state_boss_patrol.gd
=====================================
# src/entities/boss/states/state_boss_patrol.gd
## A simple state for moving the boss back and forth between attacks.
extends BaseState
class_name BossStatePatrol

func enter(_msg := {}) -> void:
	owner.patrol_timer.start()

func process_physics(_delta: float) -> void:
	owner.velocity.x = state_data.facing_direction * state_data.config.boss_patrol_speed


=====================================
FILE: ./src/entities/boss/base_boss.gd
=====================================
# src/entities/boss/base_boss.gd
@tool
## The base class for all boss enemies.
##
## Orchestrates the boss's components (Health, StateMachine, Armor) and manages
## phase transitions and attack pattern selection. It is designed to be data-driven,
## with attack patterns configured directly in the Inspector.
class_name BaseBoss
extends CharacterBody2D

# --- Constants ---
const Validator = preload("res://src/core/util/scene_validator.gd")

# --- Enums ---
enum State { IDLE, ATTACK, COOLDOWN, PATROL, LUNGE }

# --- Editor Configuration ---
@export_group("Phase Configuration")
@export_range(0.0, 1.0, 0.01) var phase_2_threshold: float = 0.7
@export_range(0.0, 1.0, 0.01) var phase_3_threshold: float = 0.4

@export_group("Attack Patterns")
@export var phase_1_patterns: Array[AttackPattern] = []
@export var phase_2_patterns: Array[AttackPattern] = []
@export var phase_3_patterns: Array[AttackPattern] = []

# --- Node References ---
@onready var visual_sprite: ColorRect = $ColorRect
@onready var cooldown_timer: Timer = $CooldownTimer
@onready var patrol_timer: Timer = $PatrolTimer
@onready var health_component: HealthComponent = $HealthComponent
@onready var state_machine: BaseStateMachine = $StateMachine
@onready var armor_component: ArmorComponent = $ArmorComponent

# --- Public Member Variables ---
## The array of [AttackPattern] resources for the current combat phase.
var current_attack_patterns: Array[AttackPattern] = []
## The number of health phases remaining (e.g., 3, 2, or 1).
var phases_remaining: int = 3

# --- Private Member Variables ---
var _b_data: BossStateData
var _player: CharacterBody2D = null
var _active_attack_tween: Tween
var _is_dead: bool = false

# --- Godot Lifecycle Methods ---

func _get_configuration_warnings() -> PackedStringArray:
	return Validator.validate_boss_scene(self)

func _ready() -> void:
	if Engine.is_editor_hint(): return

	_initialize_data()
	_initialize_components()
	_initialize_state_machine()
	_connect_signals()

	_player = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER)

func _notification(what: int) -> void:
	if what == NOTIFICATION_PREDELETE:
		if is_instance_valid(state_machine): state_machine.teardown()
		if is_instance_valid(health_component): health_component.teardown()
		_b_data = null

func _physics_process(delta: float) -> void:
	if Engine.is_editor_hint(): return

	if not is_on_floor():
		velocity.y += _b_data.config.gravity * delta

	move_and_slide()
	if state_machine.current_state == state_machine.states[State.PATROL] and is_on_wall():
		_b_data.facing_direction *= -1.0

# --- Public Methods ---

## Returns the health percentage thresholds for phase transitions.
func get_health_thresholds() -> Array[float]:
	return [phase_2_threshold, phase_3_threshold]

## Initiates the boss death sequence.
func die() -> void:
	if _is_dead: return
	_is_dead = true
	if is_instance_valid(_active_attack_tween): _active_attack_tween.kill()
	set_physics_process(false)
	hide()
	EventBus.emit(EventCatalog.BOSS_DIED, {"boss_node": self})

## Fires a volley of multiple shots at the player with a delay.
func fire_volley(shot_count: int) -> void:
	if is_instance_valid(_active_attack_tween): _active_attack_tween.kill()
	_active_attack_tween = get_tree().create_tween()
	for i in range(shot_count):
		_active_attack_tween.tween_callback(fire_shot_at_player)
		if i < shot_count - 1: _active_attack_tween.tween_interval(0.2)

## Fires a single projectile towards the player's current position.
func fire_shot_at_player() -> void:
	if _is_dead or not is_instance_valid(_player): return
	var shot = ObjectPool.get_instance(Identifiers.Pools.BOSS_SHOTS)
	if not shot: return

	_update_player_tracking()
	shot.direction = (_player.global_position - global_position).normalized()
	shot.global_position = global_position
	shot.activate()

# --- Private Methods ---

func _initialize_data() -> void:
	add_to_group(Identifiers.Groups.ENEMY)
	visual_sprite.color = Palette.COLOR_BOSS_PRIMARY
	current_attack_patterns = phase_1_patterns
	_b_data = BossStateData.new()
	_b_data.config = CombatDB.config

func _initialize_components() -> void:
	health_component.setup(self, { "data_resource": _b_data, "config": _b_data.config })
	armor_component.setup(self)

func _initialize_state_machine() -> void:
	var states = {
		State.IDLE: BossStateIdle.new(self, state_machine, _b_data),
		State.ATTACK: BossStateAttack.new(self, state_machine, _b_data),
		State.COOLDOWN: BossStateCooldown.new(self, state_machine, _b_data),
		State.PATROL: BossStatePatrol.new(self, state_machine, _b_data),
		State.LUNGE: BossStateLunge.new(self, state_machine, _b_data),
	}
	state_machine.setup(self, { "states": states, "initial_state_key": State.COOLDOWN })

func _connect_signals() -> void:
	health_component.health_changed.connect(_on_health_component_health_changed)
	health_component.died.connect(_on_health_component_died)
	health_component.health_threshold_reached.connect(_on_health_threshold_reached)

## Updates the boss's facing direction based on the player's position.
func _update_player_tracking() -> void:
	if is_instance_valid(_player):
		var dir_to_player = _player.global_position.x - global_position.x
		if not is_zero_approx(dir_to_player):
			_b_data.facing_direction = sign(dir_to_player)
	self.scale.x = _b_data.facing_direction

# --- Signal Handlers ---

func _on_health_threshold_reached(health_percentage: float) -> void:
	var new_phases_remaining = phases_remaining
	if health_percentage <= phase_3_threshold and phases_remaining > 1:
		new_phases_remaining = 1
	elif health_percentage <= phase_2_threshold and phases_remaining > 2:
		new_phases_remaining = 2

	if new_phases_remaining != phases_remaining:
		phases_remaining = new_phases_remaining
		match phases_remaining:
			2: current_attack_patterns = phase_2_patterns
			1: current_attack_patterns = phase_3_patterns
		EventBus.emit(EventCatalog.BOSS_PHASE_CHANGED, {"phases_remaining": phases_remaining})

func _on_cooldown_timer_timeout() -> void:
	if state_machine.current_state == state_machine.states[State.COOLDOWN]:
		state_machine.change_state(State.PATROL)

func _on_patrol_timer_timeout() -> void:
	if state_machine.current_state == state_machine.states[State.PATROL]:
		state_machine.change_state(State.IDLE)

func _on_health_component_health_changed(current: int, max_val: int) -> void:
	var ev = BossHealthChangedEvent.new()
	ev.current_health = current
	ev.max_health = max_val
	EventBus.emit(EventCatalog.BOSS_HEALTH_CHANGED, ev)

func _on_health_component_died() -> void:
	die()


=====================================
FILE: ./src/entities/README.md
=====================================
Entities: how to add components & states
=======================================

Purpose
-------
Explain the minimal conventions for adding new components and states to the entity system.

Component contract (example)
----------------------------
Create components by extending the ComponentInterface base. Keep them small and single-purpose.

Example components (GDScript):

# res://src/entities/ComponentInterface.gd
extends Node2D
class_name ComponentInterface

# Called once when the entity or builder attaches the component.
func setup(config: Dictionary) -> void:
    pass

# Called when the component or entity is being destroyed / swapped.
func teardown() -> void:
    pass

# Example concrete component: HealthComponent
# res://src/entities/components/HealthComponent.gd
extends ComponentInterface
class_name HealthComponent

@export var max_hp: int = 100
var hp: int = 100

func setup(config: Dictionary) -> void:
    if config.has("max_hp"):
        max_hp = int(config["max_hp"])
    hp = max_hp

func receive_damage(amount: int) -> void:
    hp -= amount
    if hp <= 0:
        _on_dead()

func _on_dead() -> void:
    # notify EventBus / play death FX via ObjectPool
    EventBus.emit("entity_dead", { "entity": get_parent() })
    queue_free()

State machine (example)
-----------------------
BaseState provides enter/exit and processing hooks. States are swapped by the entity's BaseStateMachine.

# res://src/core/BaseState.gd
extends Node
class_name BaseState

func enter(data = null) -> void: pass
func exit() -> void: pass
func physics_process(delta: float) -> void: pass

# res://src/core/BaseStateMachine.gd
extends Node
class_name BaseStateMachine

var current_state: BaseState = null

func change_state(new_state: BaseState, data = null) -> void:
    if current_state:
        current_state.exit()
        current_state.queue_free() # if state is a node instance
    current_state = new_state
    add_child(current_state)
    current_state.enter(data)

Best practices
--------------
- Keep state logic deterministic; side-effects should be limited and explicit.
- Components must clean themselves up in `teardown()` (disconnect signals, stop timers).
- Use the `EventBus` for cross-system signals rather than global references.
- Store tunable numbers in `.tres` resources and refer to them in `setup()`.

Example workflow to add a component
----------------------------------
1. Create `res://src/entities/components/MyComponent.gd` extending `ComponentInterface`.
2. Expose tuning via `@export` variables or read from a provided config dictionary in `setup()`.
3. Add the component as a child to the entity scene or let entity builder attach it at spawn time.
4. Ensure `teardown()` reverses all runtime connections.



=====================================
FILE: ./src/entities/components/base_state_machine.gd
=====================================
# src/entities/components/base_state_machine.gd
@tool
## A reusable, node-based state machine that conforms to the IComponent interface.
##
## Manages a dictionary of [BaseState] objects, handles transitions between
## them, and forwards engine callbacks to the active state. Now includes state history tracking.
class_name BaseStateMachine
extends IComponent

# --- Constants ---
const MAX_HISTORY_SIZE = 5

# --- Member Variables ---
## A dictionary of all states available to this machine, keyed by an enum.
var states: Dictionary = {}
## A reference to the currently active state object.
var current_state: BaseState
## A reference to the node that owns this state machine.
var owner_node: Node
## A list of the most recent state keys entered.
var state_history: Array[String] = []

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	owner_node = get_parent()

func _unhandled_input(event: InputEvent) -> void:
	if current_state:
		current_state.process_input(event)

func _physics_process(delta: float) -> void:
	if current_state:
		current_state.process_physics(delta)

func _exit_tree() -> void:
	teardown()

# --- Public Methods ---

## Initializes the state machine with states and an initial state.
func setup(_p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	assert(p_dependencies.has("states"), "StateMachine setup requires a 'states' dictionary.")
	assert(p_dependencies.has("initial_state_key"), "StateMachine setup requires an 'initial_state_key'.")

	self.states = p_dependencies["states"]
	var initial_state_key = p_dependencies["initial_state_key"]

	change_state(initial_state_key)

## Safely cleans up all states to prevent memory leaks.
func teardown() -> void:
	if current_state:
		current_state.exit()
	for state in states.values():
		if state.has_method("teardown"):
			state.teardown()
	states.clear()
	state_history.clear()
	current_state = null

## Transitions the machine from the current state to a new one.
func change_state(new_state_key, msg := {}) -> void:
	if not states.has(new_state_key):
		push_warning("StateMachine: Attempted to change to unknown state '%s'." % new_state_key)
		return

	if current_state == states.get(new_state_key):
		return

	if current_state:
		current_state.exit()

	current_state = states[new_state_key]
	current_state.enter(msg)

	# --- Add to History ---
	var state_name = ""
	# Find the string name of the enum value (e.g., "MOVE" from State.MOVE)
	for key_name in owner_node.State:
		if owner_node.State[key_name] == new_state_key:
			state_name = key_name
			break
	state_history.push_front(state_name)
	if state_history.size() > MAX_HISTORY_SIZE:
		state_history.pop_back()

=====================================
FILE: ./src/entities/components/telegraph_component.gd
=====================================
# src/entities/components/telegraph_component.gd
@tool
## A self-contained, reusable component for displaying attack telegraphs.
##
## It shows a visual warning for a set duration, then emits a signal
## and automatically frees itself from the scene tree.
class_name TelegraphComponent
extends Node2D

# --- Signals ---
## Emitted when the telegraph's duration has finished.
signal telegraph_finished

# --- Node References ---
@onready var visual: ColorRect = $Visual

# --- Public Methods ---

## Configures and starts the telegraph visual and timer.
func start_telegraph(duration: float, p_size: Vector2, p_position: Vector2, p_color: Color) -> void:
	self.global_position = p_position
	visual.size = p_size
	visual.color = p_color
	# Center the ColorRect on the component's position.
	visual.position = -p_size / 2.0

	var tween = create_tween()
	await tween.tween_interval(duration).finished

	if is_instance_valid(self):
		telegraph_finished.emit()
		queue_free()

=====================================
FILE: ./src/entities/components/combat_component.gd
=====================================
# src/entities/components/combat_component.gd
@tool
## Centralizes all player combat logic, such as firing projectiles and pogo attacks.
class_name CombatComponent
extends IComponent

# --- Signals ---
## Emitted when this component successfully deals damage.
signal damage_dealt
## Emitted to request a pogo bounce from the owner.
signal pogo_bounce_requested

# --- Constants ---
const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

# --- Member Variables ---
var owner_node: CharacterBody2D
var p_data: PlayerStateData

# --- Public Methods ---

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	self.p_data = p_dependencies.get("data_resource")

func teardown() -> void:
	owner_node = null
	p_data = null

## Fires a player projectile from the object pool.
func fire_shot() -> void:
	p_data.attack_cooldown_timer = p_data.config.player_attack_cooldown

	var shot = ObjectPool.get_instance(Identifiers.Pools.PLAYER_SHOTS)
	if not shot: return

	var shot_dir = Vector2(p_data.facing_direction, 0)
	if Input.is_action_pressed("ui_up"): shot_dir = Vector2.UP
	elif Input.is_action_pressed("ui_down"): shot_dir = Vector2.DOWN

	shot.direction = shot_dir
	shot.global_position = owner_node.global_position + (shot_dir * 60)
	shot.activate()

## Attempts to perform a pogo action on a target.
func trigger_pogo(pogo_target: Node) -> bool:
	if not is_instance_valid(pogo_target): return false

	var should_bounce = false

	if p_data.is_pogo_attack and pogo_target.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		should_bounce = true
		ObjectPool.return_instance(pogo_target)

	var damageable = CombatUtilsScript.find_damageable(pogo_target)
	if is_instance_valid(damageable):
		should_bounce = true
		var damage_info = DamageInfo.new()
		damage_info.amount = 1
		damage_info.source_node = owner_node
		damage_info.bypass_invincibility = true
		var damage_result = damageable.apply_damage(damage_info)
		if damage_result.was_damaged:
			damage_dealt.emit()

	if pogo_target is StaticBody2D and pogo_target.is_in_group(Identifiers.Groups.WORLD):
		should_bounce = true

	if should_bounce:
		pogo_bounce_requested.emit()
		return true

	return false

=====================================
FILE: ./src/entities/components/armor_component.gd
=====================================
# src/entities/components/armor_component.gd
@tool
## A simple component that manages an "armored" or invulnerable state.
##
## When active, other components can query its [member is_armored] property to
## determine if damage should be ignored.
class_name ArmorComponent
extends IComponent

## If true, the entity is invulnerable to damage.
var is_armored: bool = false

# --- Public Methods ---

## Activates the armored state.
func activate() -> void:
	is_armored = true

## Deactivates the armored state.
func deactivate() -> void:
	is_armored = false

=====================================
FILE: ./src/entities/components/telegraph_component.tscn
=====================================
[gd_scene load_steps=2 format=3 uid="uid://b1i2c3d4e5f6g"]

[ext_resource type="Script" path="res://src/entities/components/telegraph_component.gd" id="1_telegraph_script"]

[node name="TelegraphComponent" type="Node2D"]
script = ExtResource("1_telegraph_script")

[node name="Visual" type="ColorRect" parent="."]
offset_right = 40.0
offset_bottom = 40.0
color = Color(1, 1, 1, 0.392157)


=====================================
FILE: ./src/entities/components/health_component.gd
=====================================
# src/entities/components/health_component.gd
@tool
## Manages all health, damage, and invincibility logic for an entity.
##
## This component is the single point of contact for applying damage. It handles
## hit flashes, knockback calculation, invincibility frames, and communicates
## health changes and death events via signals.
class_name HealthComponent
extends IComponent

# --- Signals ---
## Emitted whenever health changes.
signal health_changed(current_health: int, max_health: int)
## Emitted when health drops to or below zero.
signal died
## Emitted when health crosses a pre-defined percentage threshold.
signal health_threshold_reached(health_percentage: float)

# --- Node References ---
@onready var invincibility_timer: Timer = Timer.new()
@onready var hit_flash_timer: Timer = Timer.new()

# --- Member Variables ---
var entity_data: Resource
var owner_node: CharacterBody2D
var armor_component: ArmorComponent

var _max_health: int
var _invincibility_duration: float
var _knockback_speed: float
var _hazard_knockback_speed: float

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	add_child(invincibility_timer)
	add_child(hit_flash_timer)
	invincibility_timer.one_shot = true
	hit_flash_timer.wait_time = 0.4

	invincibility_timer.timeout.connect(func(): entity_data.is_invincible = false)
	hit_flash_timer.timeout.connect(_on_hit_flash_timer_timeout)

# --- Public Methods ---

## Initializes the component with entity-specific data and configuration.
func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D
	self.entity_data = p_dependencies.get("data_resource")
	var cfg: CombatConfig = p_dependencies.get("config")

	self.armor_component = owner_node.get_node_or_null("ArmorComponent")

	if not entity_data or not cfg:
		push_error("HealthComponent.setup: Missing required dependencies ('data_resource', 'config').")
		return

	# --- Configure based on owner type ---
	_max_health = entity_data.max_health
	if owner_node.is_in_group(Identifiers.Groups.PLAYER):
		_invincibility_duration = cfg.player_invincibility_duration
		_knockback_speed = cfg.player_knockback_speed
		_hazard_knockback_speed = cfg.player_hazard_knockback_speed
	else: # Assumes Enemy/Boss
		_invincibility_duration = cfg.boss_invincibility_duration
		_knockback_speed = 0
		_hazard_knockback_speed = 0

	entity_data.health = _max_health

	# --- Store original color for hit-flash ---
	var sprite = _get_visual_sprite()
	if is_instance_valid(sprite) and not sprite.has_meta("original_color"):
		sprite.set_meta("original_color", sprite.color)

	health_changed.emit(entity_data.health, _max_health)

## Safely cleans up references.
func teardown() -> void:
	entity_data = null
	owner_node = null
	armor_component = null

## The primary public method for dealing damage to this entity.
func apply_damage(damage_info: DamageInfo) -> DamageResult:
	var result = DamageResult.new()
	var is_dash_invincible = entity_data.is_dash_invincible if "is_dash_invincible" in entity_data else false

	if (is_instance_valid(armor_component) and armor_component.is_armored) or \
		((entity_data.is_invincible or is_dash_invincible) and not damage_info.bypass_invincibility):
		return result

	var health_before_damage = entity_data.health
	entity_data.health -= damage_info.amount
	health_changed.emit(entity_data.health, _max_health)

	_trigger_hit_flash()

	entity_data.is_invincible = true
	invincibility_timer.start(_invincibility_duration)

	result.knockback_velocity = _calculate_knockback(damage_info.source_node)
	_check_for_threshold_crossing(health_before_damage, entity_data.health)

	if entity_data.health <= 0:
		died.emit()

	result.was_damaged = true
	return result

# --- Private Methods ---

## Compares old and new health against thresholds to emit a signal.
func _check_for_threshold_crossing(health_before: int, health_after: int) -> void:
	if not owner_node.has_method("get_health_thresholds"): return

	var thresholds: Array[float] = owner_node.get_health_thresholds()
	var old_percent = float(health_before) / _max_health
	var new_percent = float(health_after) / _max_health

	for threshold in thresholds:
		if old_percent > threshold and new_percent <= threshold:
			health_threshold_reached.emit(threshold)

## Calculates the knockback vector based on the damage source.
func _calculate_knockback(source: Node) -> Vector2:
	if _knockback_speed == 0 or not is_instance_valid(source): return Vector2.ZERO

	var knockback_dir = (owner_node.global_position - source.global_position).normalized()
	var speed = _knockback_speed
	if source.is_in_group(Identifiers.Groups.HAZARD):
		speed = _hazard_knockback_speed

	return (knockback_dir + Vector2.UP * 0.5).normalized() * speed

## Initiates the visual hit-flash effect.
func _trigger_hit_flash() -> void:
	var sprite = _get_visual_sprite()
	if is_instance_valid(sprite):
		if not sprite.has_meta("original_color"):
			sprite.set_meta("original_color", sprite.color)

		sprite.color = Palette.COLOR_UI_ACCENT_PRIMARY
		hit_flash_timer.start()

## Safely gets the primary visual node of the owner.
func _get_visual_sprite() -> ColorRect:
	if is_instance_valid(owner_node):
		return owner_node.get_node_or_null("ColorRect")
	return null

# --- Signal Handlers ---

func _on_hit_flash_timer_timeout() -> void:
	var sprite = _get_visual_sprite()
	if is_instance_valid(sprite) and sprite.has_meta("original_color"):
		sprite.color = sprite.get_meta("original_color")

=====================================
FILE: ./src/entities/components/input_component.gd
=====================================
# src/entities/components/input_component.gd
@tool
## A component that centralizes all raw input polling.
##
## It reads from Godot's Input singleton each frame and populates a buffer
## dictionary. Other components and states read from this buffer, decoupling
## them from the global Input singleton.
class_name InputComponent
extends IComponent

# --- Member Variables ---
var owner_node: CharacterBody2D
var p_data: PlayerStateData
var state_machine: BaseStateMachine
var _config: CombatConfig # Internal reference to the injected config

## A buffer dictionary populated each frame with the current input state.
var buffer: Dictionary = {}

# --- Godot Lifecycle Methods ---

func _physics_process(_delta: float) -> void:
	# 1. Clear the buffer at the start of the frame.
	buffer.clear()

	# 2. Populate the buffer with the current input state.
	buffer["move_axis"] = Input.get_axis("ui_left", "ui_right")

	buffer["up"] = Input.is_action_pressed("ui_up")
	buffer["down"] = Input.is_action_pressed("ui_down")

	buffer["jump_pressed"] = Input.is_action_just_pressed("ui_jump")
	buffer["jump_released"] = Input.is_action_just_released("ui_jump")

	buffer["attack_pressed"] = Input.is_action_pressed("ui_attack")
	buffer["attack_just_pressed"] = Input.is_action_just_pressed("ui_attack")
	buffer["attack_released"] = Input.is_action_just_released("ui_attack")

	buffer["dash_pressed"] = Input.is_action_just_pressed("ui_dash")

# --- Public Methods ---

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as CharacterBody2D

	self.p_data = p_dependencies.get("data_resource")
	self.state_machine = p_dependencies.get("state_machine")
	self._config = p_dependencies.get("config")

	if not p_data or not state_machine or not _config:
		push_error("InputComponent.setup: Missing one or more required dependencies.")
		return

func teardown() -> void:
	owner_node = null
	p_data = null
	state_machine = null
	_config = null
	buffer.clear()

=====================================
FILE: ./src/entities/components/base_state.gd
=====================================
# src/entities/components/base_state.gd
## The abstract base class for all entity states.
##
## Defines the lifecycle methods that every state must implement. States are
## responsible for handling logic for a specific entity behavior (e.g., moving,
## attacking, dashing).
class_name BaseState
extends Object

# --- Member Variables ---
var owner: Node
var state_machine: Node
var state_data: Resource

# --- Constructor ---

func _init(p_owner: Node, p_state_machine: Node, p_state_data: Resource) -> void:
	self.owner = p_owner
	self.state_machine = p_state_machine
	self.state_data = p_state_data

# --- Public Methods ---

## Called by the state machine upon exiting to break cyclic references.
func teardown() -> void:
	owner = null
	state_machine = null
	state_data = null

# --- Virtual Lifecycle Methods ---

## Called once when the state machine enters this state.
func enter(_msg := {}) -> void:
	pass

## Called once when the state machine exits this state.
func exit() -> void:
	pass

## Called every physics frame. Used for movement and physics-based logic.
func process_physics(_delta: float) -> void:
	pass

## Called during the `_unhandled_input` cycle. Used for immediate input reactions.
func process_input(_event: InputEvent) -> void:
	pass

=====================================
FILE: ./src/entities/minions/turret.gd
=====================================
# src/entities/minions/turret.gd
@tool
## A stationary enemy that detects and fires projectiles at the player.
##
## This minion uses the standard entity architecture, including a HealthComponent
## and a simple two-state StateMachine (Idle, Attack).
class_name Turret
extends CharacterBody2D

# --- Enums ---
enum State { IDLE, ATTACK }

# --- Editor Configuration ---
@export var fire_rate: float = 2.0
@export var detection_radius: float = 400.0

# --- Node References ---
@onready var visual: Polygon2D = $Visual
@onready var health_component: HealthComponent = $HealthComponent
@onready var state_machine: BaseStateMachine = $StateMachine
@onready var attack_timer: Timer = $AttackTimer
@onready var range_detector_shape: CollisionShape2D = $RangeDetector/CollisionShape2D

# --- Private Member Variables ---
var _t_data: TurretStateData
var _player: CharacterBody2D

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	if Engine.is_editor_hint(): return

	_initialize_data()
	_initialize_components()
	_initialize_state_machine()
	_connect_signals()

	_player = get_tree().get_first_node_in_group(Identifiers.Groups.PLAYER)

func _notification(what: int) -> void:
	if what == NOTIFICATION_PREDELETE:
		if is_instance_valid(state_machine): state_machine.teardown()
		if is_instance_valid(health_component): health_component.teardown()
		_t_data = null

# --- Public Methods ---

## Fires a single projectile towards the player.
func fire_at_player() -> void:
	if not is_instance_valid(_player): return

	var shot = ObjectPool.get_instance(Identifiers.Pools.TURRET_SHOTS)
	if not is_instance_valid(shot): return

	shot.direction = (self._player.global_position - self.global_position).normalized()
	shot.global_position = self.global_position
	shot.activate()

## Deactivates the turret, stopping its AI and attacks. Called by GameManager.
func deactivate() -> void:
	if is_instance_valid(state_machine):
		state_machine.teardown()
	if is_instance_valid(attack_timer):
		attack_timer.stop()

	set_physics_process(false)
	$RangeDetector.monitoring = false

## Handles the turret's death.
func die() -> void:
	queue_free()

# --- Private Methods ---

func _initialize_data() -> void:
	add_to_group(Identifiers.Groups.ENEMY)
	visual.color = Palette.COLOR_TERRAIN_SECONDARY
	_t_data = TurretStateData.new()
	_t_data.config = CombatDB.config

func _initialize_components() -> void:
	var circle_shape = CircleShape2D.new()
	circle_shape.radius = detection_radius
	range_detector_shape.shape = circle_shape

	health_component.setup(self, {
		"data_resource": _t_data,
		"config": _t_data.config
	})

func _initialize_state_machine() -> void:
	var states = {
		State.IDLE: load("res://src/entities/minions/states/state_turret_idle.gd").new(self, state_machine, _t_data),
		State.ATTACK: load("res://src/entities/minions/states/state_turret_attack.gd").new(self, state_machine, _t_data)
	}
	state_machine.setup(self, { "states": states, "initial_state_key": State.IDLE })

func _connect_signals() -> void:
	health_component.died.connect(die)

# --- Signal Handlers ---

func _on_range_detector_body_entered(body: Node) -> void:
	if not _t_data: return
	if body.is_in_group(Identifiers.Groups.PLAYER):
		_t_data.is_player_in_range = true

func _on_range_detector_body_exited(body: Node) -> void:
	if not _t_data: return
	if body.is_in_group(Identifiers.Groups.PLAYER):
		_t_data.is_player_in_range = false

=====================================
FILE: ./src/entities/minions/turret_state_data.gd
=====================================
# src/entities/minions/turret_state_data.gd
## A Resource that holds all shared runtime state data for the Turret minion.
class_name TurretStateData
extends Resource

# --- Configuration Reference ---
var config: CombatConfig

# --- Health & Combat ---
var max_health: int = 3
var health: int = 3:
	set(value):
		health = clamp(value, 0, max_health)

var is_invincible: bool = false

# --- Targeting ---
var is_player_in_range: bool = false

=====================================
FILE: ./src/entities/minions/states/state_turret_attack.gd
=====================================
# src/entities/minions/states/state_turret_attack.gd
## The state for when the turret is actively firing at the player.
extends BaseState
class_name TurretStateAttack

# --- Private Member Variables ---
var _turret: Turret

# --- State Lifecycle ---

func enter(_msg := {}) -> void:
	self._turret = owner as Turret
	if not is_instance_valid(_turret): return

	_turret.fire_at_player()
	_turret.attack_timer.start(_turret.fire_rate)

func process_physics(_delta: float) -> void:
	if not is_instance_valid(_turret): return

	if not state_data.is_player_in_range:
		state_machine.change_state(_turret.State.IDLE)
		return

	if _turret.attack_timer.is_stopped():
		_turret.fire_at_player()
		_turret.attack_timer.start(_turret.fire_rate)


=====================================
FILE: ./src/entities/minions/states/state_turret_idle.gd
=====================================
# src/entities/minions/states/state_turret_idle.gd
## The state for when the turret is inactive and waiting for the player.
extends BaseState
class_name TurretStateIdle

# --- Private Member Variables ---
var _turret: Turret

# --- State Lifecycle ---

func enter(_msg := {}) -> void:
	self._turret = owner as Turret

func exit() -> void:
	if is_instance_valid(_turret):
		_turret.attack_timer.stop()

func process_physics(_delta: float) -> void:
	if not is_instance_valid(_turret): return

	if state_data.is_player_in_range:
		state_machine.change_state(_turret.State.ATTACK)


=====================================
FILE: ./src/entities/minions/turret.tscn
=====================================
[gd_scene load_steps=5 format=3 uid="uid://c7d8e9f0g1h2i"]

[ext_resource type="Script" path="res://src/entities/minions/turret.gd" id="1_turret_script"]
[ext_resource type="Script" path="res://src/entities/components/health_component.gd" id="2_health_comp"]
[ext_resource type="Script" path="res://src/entities/components/base_state_machine.gd" id="3_fsm"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_turretbody"]
size = Vector2(50, 50)

[node name="Turret" type="CharacterBody2D" groups=["enemy"]]
collision_layer = 4
collision_mask = 3
script = ExtResource("1_turret_script")

[node name="Visual" type="Polygon2D" parent="."]
color = Color(0.490196, 0.490196, 0.490196, 1)
polygon = PackedVector2Array(-25, -25, 25, -25, 25, 25, -25, 25)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_turretbody")

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_health_comp")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("3_fsm")

[node name="AttackTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="RangeDetector" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 1

[node name="CollisionShape2D" type="CollisionShape2D" parent="RangeDetector"]

[connection signal="body_entered" from="RangeDetector" to="." method="_on_range_detector_body_entered"]
[connection signal="body_exited" from="RangeDetector" to="." method="_on_range_detector_body_exited"]


=====================================
FILE: ./src/entities/player/player.tscn
=====================================
[gd_scene load_steps=12 format=3 uid="uid://c6vknl71ea1bo"]

[ext_resource type="Script" path="res://src/entities/player/player.gd" id="1_4d1td"]
[ext_resource type="Script" path="res://src/entities/components/health_component.gd" id="2_hcomp"]
[ext_resource type="Script" path="res://src/entities/components/combat_component.gd" id="3_combat_comp"]
[ext_resource type="Script" path="res://src/entities/components/input_component.gd" id="4_input_comp"]
[ext_resource type="Script" path="res://src/entities/components/base_state_machine.gd" id="5_fsm"]
[ext_resource type="Script" path="res://src/entities/player/components/player_physics_component.gd" id="6_p_phys"]
[ext_resource type="Script" path="res://src/entities/player/components/player_ability_component.gd" id="7_p_abil"]
[ext_resource type="Script" path="res://src/entities/player/components/player_resource_component.gd" id="8_p_res"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_playerbody"]
size = Vector2(40, 40)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_meleebox"]
size = Vector2(80, 40)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_pogobox"]
size = Vector2(40, 40)

[node name="Player" type="CharacterBody2D"]
collision_layer = 1
collision_mask = 14
script = ExtResource("1_4d1td")

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
color = Color(0.941176, 0.941176, 0.941176, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_playerbody")

[node name="MeleeHitbox" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 20

[node name="CollisionShape2D" type="CollisionShape2D" parent="MeleeHitbox"]
position = Vector2(60, 0)
shape = SubResource("RectangleShape2D_meleebox")
disabled = true

[node name="PogoHitbox" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 22

[node name="CollisionShape2D" type="CollisionShape2D" parent="PogoHitbox"]
shape = SubResource("RectangleShape2D_pogobox")
disabled = true

[node name="Hurtbox" type="Area2D" parent="."]
collision_layer = 64
collision_mask = 28

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hurtbox"]
shape = SubResource("RectangleShape2D_playerbody")

[node name="HealingTimer" type="Timer" parent="."]
one_shot = true

[node name="HealthComponent" type="Node" parent="."]
script = ExtResource("2_hcomp")

[node name="CombatComponent" type="Node" parent="."]
script = ExtResource("3_combat_comp")

[node name="InputComponent" type="Node" parent="."]
script = ExtResource("4_input_comp")

[node name="StateMachine" type="Node" parent="."]
script = ExtResource("5_fsm")

[node name="PlayerPhysicsComponent" type="Node" parent="."]
script = ExtResource("6_p_phys")

[node name="PlayerAbilityComponent" type="Node" parent="."]
script = ExtResource("7_p_abil")

[node name="PlayerResourceComponent" type="Node" parent="."]
script = ExtResource("8_p_res")

[connection signal="timeout" from="HealingTimer" to="." method="_on_healing_timer_timeout"]

=====================================
FILE: ./src/entities/player/player.gd
=====================================
# src/entities/player/player.gd
@tool
## The main player character node.
##
## Orchestrates all player-related components, connecting their signals and
## managing the overall lifecycle of the player entity.
class_name Player
extends CharacterBody2D

# --- Signals ---
## Emitted when the player's health changes.
signal health_changed(current_health, max_health)
## Emitted when the player's health reaches zero.
signal died

# --- Enums ---
enum State {MOVE, JUMP, FALL, DASH, WALL_SLIDE, ATTACK, HURT, HEAL}

# --- Constants ---
const ACTION_ALLOWED_STATES = [State.MOVE, State.FALL, State.JUMP, State.WALL_SLIDE]
const CLOSE_RANGE_THRESHOLD = 75.0
const CombatUtilsScript = preload(AssetPaths.SCRIPT_COMBAT_UTILS)

# --- Node References ---
@onready var visual_sprite: ColorRect = $ColorRect
@onready var hurtbox: Area2D = $Hurtbox
@onready var healing_timer: Timer = $HealingTimer
@onready var melee_hitbox: Area2D = $MeleeHitbox
@onready var pogo_hitbox: Area2D = $PogoHitbox
@onready var melee_hitbox_shape: CollisionShape2D = $MeleeHitbox/CollisionShape2D
@onready var pogo_hitbox_shape: CollisionShape2D = $PogoHitbox/CollisionShape2D

# --- Component References ---
@onready var health_component: HealthComponent = $HealthComponent
@onready var combat_component: CombatComponent = $CombatComponent
@onready var input_component: InputComponent = $InputComponent
@onready var state_machine: BaseStateMachine = $StateMachine
@onready var physics_component: PlayerPhysicsComponent = $PlayerPhysicsComponent
@onready var ability_component: PlayerAbilityComponent = $PlayerAbilityComponent
@onready var resource_component: PlayerResourceComponent = $PlayerResourceComponent

# --- Data ---
## The resource containing all mutable state for the player.
var p_data: PlayerStateData

# --- Godot Lifecycle Methods ---

func _ready() -> void:
	add_to_group(Identifiers.Groups.PLAYER)

	_initialize_data()
	_initialize_components()
	_initialize_state_machine()
	_connect_signals()

	visual_sprite.color = Palette.COLOR_PLAYER
	# Emit initial charge state for the HUD
	resource_component.on_damage_dealt()
	p_data.determination_counter = 0

func _notification(what: int) -> void:
	if what == NOTIFICATION_PREDELETE:
		# Teardown components to prevent memory leaks from cyclic references.
		if is_instance_valid(state_machine): state_machine.teardown()
		if is_instance_valid(health_component): health_component.teardown()
		if is_instance_valid(combat_component): combat_component.teardown()
		if is_instance_valid(input_component): input_component.teardown()
		# Clear our reference to the data resource.
		p_data = null

func _physics_process(delta: float) -> void:
	_update_timers(delta)

# --- Private Methods ---

## Instantiates and configures the player's state data resource.
func _initialize_data() -> void:
	p_data = PlayerStateData.new()
	p_data.config = CombatDB.config

## Wires up all child components by injecting their dependencies.
func _initialize_components() -> void:
	health_component.setup(self, { "data_resource": p_data, "config": p_data.config })
	combat_component.setup(self, { "data_resource": p_data })
	input_component.setup(self, { "data_resource": p_data, "state_machine": state_machine, "config": p_data.config })
	physics_component.setup(self, { "data_resource": p_data })
	ability_component.setup(self, { "data_resource": p_data, "state_machine": state_machine, "input_component": input_component })
	resource_component.setup(self, { "data_resource": p_data })

## Creates and initializes all player states for the state machine.
func _initialize_state_machine() -> void:
	var states = {
		State.MOVE: load("res://src/entities/player/states/state_move.gd").new(self, state_machine, p_data),
		State.FALL: load("res://src/entities/player/states/state_fall.gd").new(self, state_machine, p_data),
		State.JUMP: load("res://src/entities/player/states/state_jump.gd").new(self, state_machine, p_data),
		State.DASH: load("res://src/entities/player/states/state_dash.gd").new(self, state_machine, p_data),
		State.WALL_SLIDE: load("res://src/entities/player/states/state_wall_slide.gd").new(self, state_machine, p_data),
		State.ATTACK: load("res://src/entities/player/states/state_attack.gd").new(self, state_machine, p_data),
		State.HURT: load("res://src/entities/player/states/state_hurt.gd").new(self, state_machine, p_data),
		State.HEAL: load("res://src/entities/player/states/state_heal.gd").new(self, state_machine, p_data),
	}
	state_machine.setup(self, { "states": states, "initial_state_key": State.FALL })

## Connects all internal and component signals to their handlers.
func _connect_signals() -> void:
	melee_hitbox.body_entered.connect(_on_melee_hitbox_body_entered)
	pogo_hitbox.body_entered.connect(_on_pogo_hitbox_body_entered)
	melee_hitbox.area_entered.connect(_on_hitbox_area_entered)
	pogo_hitbox.area_entered.connect(_on_hitbox_area_entered)
	hurtbox.area_entered.connect(_on_hurtbox_area_entered)

	health_component.health_changed.connect(_on_health_component_health_changed)
	health_component.died.connect(_on_health_component_died)

	combat_component.damage_dealt.connect(resource_component.on_damage_dealt)
	combat_component.pogo_bounce_requested.connect(_on_pogo_bounce_requested)

## Updates all frame-dependent timers stored in the PlayerStateData resource.
func _update_timers(delta: float) -> void:
	p_data.coyote_timer = max(0.0, p_data.coyote_timer - delta)
	p_data.wall_coyote_timer = max(0.0, p_data.wall_coyote_timer - delta)
	p_data.dash_cooldown_timer = max(0.0, p_data.dash_cooldown_timer - delta)
	p_data.dash_duration_timer = max(0.0, p_data.dash_duration_timer - delta)
	p_data.attack_duration_timer = max(0.0, p_data.attack_duration_timer - delta)
	p_data.attack_cooldown_timer = max(0.0, p_data.attack_cooldown_timer - delta)
	p_data.knockback_timer = max(0.0, p_data.knockback_timer - delta)
	p_data.pogo_fall_prevention_timer = max(0.0, p_data.pogo_fall_prevention_timer - delta)

	if p_data.is_charging and input_component.buffer.get("attack_pressed"):
		p_data.charge_timer += delta

# --- Signal Handlers ---

func _on_melee_hitbox_body_entered(body: Node) -> void:
	var target_id = body.get_instance_id()
	if p_data.hit_targets_this_swing.has(target_id): return
	p_data.hit_targets_this_swing[target_id] = true

	var damageable = CombatUtilsScript.find_damageable(body)
	if is_instance_valid(damageable):
		var damage_info = DamageInfo.new()
		damage_info.source_node = self
		var distance = self.global_position.distance_to(body.global_position)
		var is_close_range = distance <= CLOSE_RANGE_THRESHOLD
		damage_info.amount = 5 if is_close_range else 1

		var damage_result = damageable.apply_damage(damage_info)
		if damage_result.was_damaged:
			resource_component.on_damage_dealt()

func _on_pogo_hitbox_body_entered(body: Node) -> void:
	combat_component.trigger_pogo(body)

func _on_hitbox_area_entered(area: Area2D) -> void:
	if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		if p_data.is_pogo_attack:
			combat_component.trigger_pogo(area)
		else:
			ObjectPool.return_instance(area)

func _on_hurtbox_area_entered(area: Area2D) -> void:
	if p_data.is_invincible or p_data.is_dash_invincible:
		if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE): ObjectPool.return_instance(area)
		return

	if area.is_in_group(Identifiers.Groups.ENEMY_PROJECTILE):
		var damage_info = DamageInfo.new()
		damage_info.amount = 1
		damage_info.source_node = area
		var damage_result = health_component.apply_damage(damage_info)

		if damage_result.was_damaged:
			self.velocity = damage_result.knockback_velocity
			state_machine.change_state(State.HURT)

		ObjectPool.return_instance(area)

func _on_healing_timer_timeout() -> void:
	if state_machine.current_state == state_machine.states[State.HEAL]:
		p_data.health += 1; p_data.healing_charges -= 1
		_on_health_component_health_changed(p_data.health, p_data.max_health)
		resource_component.on_damage_dealt() # This also handles the event emission
		state_machine.change_state(State.MOVE)

func _on_health_component_health_changed(current: int, max_val: int) -> void:
	var ev = PlayerHealthChangedEvent.new()
	ev.current_health = current
	ev.max_health = max_val
	EventBus.emit(EventCatalog.PLAYER_HEALTH_CHANGED, ev)
	health_changed.emit(current, max_val)

func _on_health_component_died() -> void:
	died.emit()

func _on_pogo_bounce_requested() -> void:
	velocity.y = -p_data.config.player_pogo_force
	position.y -= 1
	p_data.can_dash = true
	p_data.air_jumps_left = p_data.config.player_max_air_jumps
	state_machine.change_state(State.FALL)

func _cancel_heal() -> void:
	if healing_timer.is_stopped(): return
	healing_timer.stop()


=====================================
FILE: ./src/entities/player/components/player_ability_component.gd
=====================================
# src/entities/player/components/player_ability_component.gd
@tool
## Governs the activation logic for player abilities.
##
## Reads the input buffer and game state to determine if an action (like
## dashing or healing) can be performed, then instructs the StateMachine.
class_name PlayerAbilityComponent
extends IComponent

# --- Member Variables ---
var owner_node: Player
var p_data: PlayerStateData
var state_machine: BaseStateMachine
var input_component: InputComponent

# --- Godot Lifecycle Methods ---

func _physics_process(_delta: float) -> void:
	var current_state_key = state_machine.states.find_key(state_machine.current_state)
	if not current_state_key in owner_node.ACTION_ALLOWED_STATES:
		return

	# --- Attack / Charge Shot Logic ---
	if input_component.buffer.get("attack_just_pressed") and p_data.attack_cooldown_timer <= 0:
		p_data.is_charging = true
		p_data.charge_timer = 0.0

	if input_component.buffer.get("attack_released"):
		if p_data.is_charging:
			if p_data.charge_timer >= p_data.config.player_charge_time:
				owner_node.combat_component.fire_shot()
			else:
				state_machine.change_state(owner_node.State.ATTACK)
			p_data.is_charging = false

	# --- Dash Logic ---
	if input_component.buffer.get("dash_pressed") and p_data.can_dash and p_data.dash_cooldown_timer <= 0:
		state_machine.change_state(owner_node.State.DASH)

	# --- Heal Logic ---
	var can_try_heal = owner_node.is_on_floor() and \
		input_component.buffer.get("down") and \
		input_component.buffer.get("jump_pressed") and \
		p_data.healing_charges > 0 and \
		is_zero_approx(owner_node.velocity.x)
	
	if can_try_heal:
		state_machine.change_state(owner_node.State.HEAL)

# --- Public Methods ---

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as Player
	self.p_data = p_dependencies.get("data_resource")
	self.state_machine = p_dependencies.get("state_machine")
	self.input_component = p_dependencies.get("input_component")

=====================================
FILE: ./src/entities/player/components/player_physics_component.gd
=====================================
# src/entities/player/components/player_physics_component.gd
@tool
## Manages all direct physics interactions for the player character.
##
## Handles gravity, movement, collision detection, and applying velocity via
## move_and_slide(). It serves as the single point of contact with the
## Godot physics engine for the player.
class_name PlayerPhysicsComponent
extends IComponent

# --- Member Variables ---
var owner_node: Player
var p_data: PlayerStateData

# --- Godot Lifecycle Methods ---

func _physics_process(_delta: float) -> void:
	owner_node.move_and_slide()
	_check_for_contact_damage()

	if owner_node.is_on_wall() and not owner_node.is_on_floor():
		p_data.wall_coyote_timer = p_data.config.player_wall_coyote_time
		p_data.last_wall_normal = owner_node.get_wall_normal()

# --- Public Methods ---

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as Player
	self.p_data = p_dependencies.get("data_resource")

func apply_horizontal_movement() -> void:
	var move_axis = owner_node.input_component.buffer.get("move_axis", 0.0)
	owner_node.velocity.x = move_axis * p_data.config.player_speed
	if not is_zero_approx(move_axis):
		p_data.facing_direction = sign(move_axis)

func apply_gravity(delta: float, multiplier: float = 1.0) -> void:
	owner_node.velocity.y += p_data.config.gravity * multiplier * delta

# --- Private Methods ---

func _check_for_contact_damage() -> void:
	if p_data.is_invincible: return
	for i in range(owner_node.get_slide_collision_count()):
		var col = owner_node.get_slide_collision(i)
		if not col: continue

		var collider = col.get_collider()
		var is_damage_source = is_instance_valid(collider) and \
			(collider.is_in_group(Identifiers.Groups.ENEMY) or collider.is_in_group(Identifiers.Groups.HAZARD))
		
		if not is_damage_source: continue

		var damage_info = DamageInfo.new()
		damage_info.amount = 1
		damage_info.source_node = collider
		var damage_result = owner_node.health_component.apply_damage(damage_info)

		if damage_result.was_damaged:
			owner_node.velocity = damage_result.knockback_velocity
			owner_node.state_machine.change_state(owner_node.State.HURT)
		break


=====================================
FILE: ./src/entities/player/components/player_resource_component.gd
=====================================
# src/entities/player/components/player_resource_component.gd
@tool
## Manages the player's resource economy (Determination and Healing).
class_name PlayerResourceComponent
extends IComponent

# --- Member Variables ---
var owner_node: Player
var p_data: PlayerStateData

# --- Public Methods ---

func setup(p_owner: Node, p_dependencies: Dictionary = {}) -> void:
	self.owner_node = p_owner as Player
	self.p_data = p_dependencies.get("data_resource")

func on_damage_dealt() -> void:
	if p_data.healing_charges >= p_data.config.player_max_healing_charges: return

	p_data.determination_counter += 1
	if p_data.determination_counter >= p_data.config.player_determination_per_charge:
		p_data.determination_counter = 0
		p_data.healing_charges += 1
		_emit_healing_charges_changed_event()

# --- Private Methods ---

func _emit_healing_charges_changed_event() -> void:
	var ev = PlayerHealingChargesChangedEvent.new()
	ev.current_charges = p_data.healing_charges
	EventBus.emit(EventCatalog.PLAYER_HEALING_CHARGES_CHANGED, ev)

=====================================
FILE: ./src/entities/player/states/state_jump.gd
=====================================
# src/entities/player/states/state_jump.gd
## Handles the player's upward movement (jump).
extends BaseState

func enter(_msg := {}) -> void:
	owner.velocity.y = -state_data.config.player_jump_force
	state_data.coyote_timer = 0

func process_physics(delta: float) -> void:
	owner.physics_component.apply_horizontal_movement()

	if owner.input_component.buffer.get("jump_released") and owner.velocity.y < 0:
		owner.velocity.y *= state_data.config.player_jump_release_dampener

	_apply_gravity(delta)

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

	_check_for_wall_slide()

func _apply_gravity(delta: float) -> void:
	owner.physics_component.apply_gravity(delta)
	if owner.velocity.y > 0.0:
		state_machine.change_state(owner.State.FALL)

func _check_for_wall_slide() -> void:
	var move_axis = owner.input_component.buffer.get("move_axis", 0.0)
	var can_wall_slide = state_data.wall_coyote_timer > 0 and \
		not owner.is_on_floor() and move_axis != 0 and \
		sign(move_axis) == -state_data.last_wall_normal.x
		
	if can_wall_slide:
		state_machine.change_state(owner.State.WALL_SLIDE)


=====================================
FILE: ./src/entities/player/states/state_dash.gd
=====================================
# src/entities/player/states/state_dash.gd
# EXPERIMENTAL: All momentum is now cancelled at the end of a dash
# to test the "hard stop" game feel.
extends BaseState

var _dash_direction: Vector2

func enter(_msg := {}):
	state_data.is_dash_invincible = true
	state_data.can_dash = false
	state_data.dash_duration_timer = state_data.config.player_dash_duration
	state_data.dash_cooldown_timer = state_data.config.player_dash_cooldown
	
	_dash_direction = _get_dash_direction()
	owner.velocity = _dash_direction * state_data.config.player_dash_speed

func exit():
	state_data.is_dash_invincible = false
	
	if _dash_direction.y != 0:
		owner.velocity.y = 0.0
	if _dash_direction.x != 0:
		owner.velocity.x = 0.0

func process_physics(_delta: float):
	if state_data.dash_duration_timer <= 0:
		state_machine.change_state(owner.State.FALL)

func _get_dash_direction():
	if Input.is_action_pressed("ui_up"): return Vector2.UP
	if Input.is_action_pressed("ui_down"): return Vector2.DOWN
	return Vector2(state_data.facing_direction, 0)


=====================================
FILE: ./src/entities/player/states/state_heal.gd
=====================================
# src/entities/player/states/state_heal.gd
# Handles the player's healing state.
extends BaseState

func enter(_msg := {}):
	owner.velocity = Vector2.ZERO
	owner.healing_timer.start(state_data.config.player_heal_duration)

func exit():
	owner._cancel_heal()

func process_physics(_delta: float):
	if not Input.is_action_pressed("ui_down") or not Input.is_action_pressed("ui_jump") or not is_zero_approx(owner.velocity.x) or not owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)


=====================================
FILE: ./src/entities/player/states/state_wall_slide.gd
=====================================
# src/entities/player/states/state_wall_slide.gd
# Handles the player's wall sliding state.
extends BaseState

func enter(_msg := {}):
	state_data.can_dash = true
	state_data.air_jumps_left = state_data.config.player_max_air_jumps

func exit():
	if state_data.last_wall_normal != Vector2.ZERO:
		state_data.facing_direction = sign(state_data.last_wall_normal.x)

func process_physics(delta: float):
	var gravity = state_data.config.gravity
	var wall_slide_speed = state_data.config.player_wall_slide_speed
	owner.velocity.y = min(owner.velocity.y + gravity * delta, wall_slide_speed)
	
	state_data.facing_direction = sign(-state_data.last_wall_normal.x)
	
	if owner.input_component.buffer.get("jump_pressed"):
		_perform_wall_jump()
		return
	
	var move_axis = owner.input_component.buffer.get("move_axis", 0.0)
	if move_axis * -state_data.last_wall_normal.x < 0.8:
		state_machine.change_state(owner.State.FALL)
		return
		
	if state_data.wall_coyote_timer <= 0:
		state_machine.change_state(owner.State.FALL)
		return

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

func _perform_wall_jump():
	owner.velocity.y = -state_data.config.player_wall_jump_force_y
	owner.velocity.x = state_data.last_wall_normal.x * state_data.config.player_wall_jump_force_x
	state_data.coyote_timer = 0
	state_data.wall_coyote_timer = 0
	state_machine.change_state(owner.State.JUMP)


=====================================
FILE: ./src/entities/player/states/state_attack.gd
=====================================
# src/entities/player/states/state_attack.gd
## This state handles the player's melee and pogo attacks.
class_name PlayerStateAttack
extends BaseState

# --- Constants ---
const FORWARD_ATTACK_SHAPE = preload("res://src/entities/player/data/forward_attack_shape.tres")
const UPWARD_ATTACK_SHAPE = preload("res://src/entities/player/data/upward_attack_shape.tres")

# --- State Lifecycle ---

func enter(_msg := {}) -> void:
	# THE FIX: Provide a default value of 'false' to the get() call.
	# This prevents a crash if the buffer hasn't been populated yet this frame.
	state_data.is_pogo_attack = owner.input_component.buffer.get("down", false)
	state_data.hit_targets_this_swing.clear()

	if state_data.is_pogo_attack:
		owner.pogo_hitbox.position = Vector2(0, 40)
		owner.pogo_hitbox_shape.disabled = false

		if not _check_for_immediate_pogo():
			state_machine.change_state(owner.State.FALL)
			return
	else:
		state_data.attack_duration_timer = state_data.config.player_attack_duration
		state_data.attack_cooldown_timer = state_data.config.player_attack_cooldown

		if owner.input_component.buffer.get("up", false):
			owner.melee_hitbox_shape.shape = UPWARD_ATTACK_SHAPE
			owner.melee_hitbox_shape.position = Vector2(0, -40)
		else:
			owner.melee_hitbox_shape.shape = FORWARD_ATTACK_SHAPE
			owner.melee_hitbox_shape.position = Vector2(state_data.facing_direction * 60, 0)

		owner.melee_hitbox_shape.disabled = false

func exit() -> void:
	owner.melee_hitbox_shape.call_deferred("set", "disabled", true)
	owner.pogo_hitbox_shape.call_deferred("set", "disabled", true)
	state_data.is_pogo_attack = false
	state_data.hit_targets_this_swing.clear()

func process_physics(delta: float) -> void:
	if not state_data.is_pogo_attack:
		var friction = state_data.config.player_attack_friction
		owner.velocity = owner.velocity.move_toward(Vector2.ZERO, friction * delta)

	if state_data.attack_duration_timer <= 0:
		state_machine.change_state(owner.State.FALL)

# --- Private Methods ---

func _check_for_immediate_pogo() -> bool:
	var query = PhysicsShapeQueryParameters2D.new()
	query.shape = owner.pogo_hitbox_shape.shape
	query.transform = owner.global_transform * owner.pogo_hitbox.transform
	query.collision_mask = PhysicsLayers.WORLD | PhysicsLayers.ENEMY | PhysicsLayers.HAZARD | PhysicsLayers.ENEMY_PROJECTILE
	query.exclude = [owner]
	query.collide_with_areas = true

	var results = owner.get_world_2d().direct_space_state.intersect_shape(query)
	if results.is_empty(): return false

	for result in results:
		var pogo_target = result.collider
		if owner.combat_component.trigger_pogo(pogo_target):
			return true

	return false


=====================================
FILE: ./src/entities/player/states/state_hurt.gd
=====================================
# src/entities/player/states/state_hurt.gd
## Handles the player's knockback and stun state after taking damage.
extends BaseState

func enter(_msg := {}) -> void:
	state_data.knockback_timer = state_data.config.player_knockback_duration
	state_data.is_charging = false
	owner._cancel_heal()

func process_physics(delta: float) -> void:
	owner.physics_component.apply_gravity(delta)
	owner.velocity.x = move_toward(owner.velocity.x, 0, 800 * delta)

	if state_data.knockback_timer <= 0:
		state_machine.change_state(owner.State.FALL)


=====================================
FILE: ./src/entities/player/states/state_fall.gd
=====================================
# src/entities/player/states/state_fall.gd
## Handles the player's falling state (downward vertical movement).
extends BaseState

func process_physics(delta: float) -> void:
	owner.physics_component.apply_horizontal_movement()
	_apply_gravity(delta)

	if owner.is_on_floor():
		state_machine.change_state(owner.State.MOVE)
		return

	_check_for_wall_slide()

	if owner.input_component.buffer.get("jump_pressed"):
		if state_data.wall_coyote_timer > 0:
			_perform_wall_jump()
		elif state_data.coyote_timer > 0:
			state_machine.change_state(owner.State.JUMP)
		elif state_data.air_jumps_left > 0:
			_perform_air_jump()

func _apply_gravity(delta: float) -> void:
	var gravity_multiplier = 1.0
	if owner.input_component.buffer.get("down"):
		gravity_multiplier = state_data.config.player_fast_fall_gravity_multiplier
	owner.physics_component.apply_gravity(delta, gravity_multiplier)

func _check_for_wall_slide() -> void:
	var move_axis = owner.input_component.buffer.get("move_axis", 0.0)
	var can_wall_slide = state_data.wall_coyote_timer > 0 and \
		not owner.is_on_floor() and move_axis != 0 and \
		sign(move_axis) == -state_data.last_wall_normal.x
		
	if can_wall_slide:
		state_machine.change_state(owner.State.WALL_SLIDE)

func _perform_air_jump() -> void:
	state_data.air_jumps_left -= 1
	state_machine.change_state(owner.State.JUMP)

func _perform_wall_jump() -> void:
	owner.velocity.x = state_data.last_wall_normal.x * state_data.config.player_wall_jump_force_x
	state_data.coyote_timer = 0
	state_data.wall_coyote_timer = 0
	state_machine.change_state(owner.State.JUMP)


=====================================
FILE: ./src/entities/player/states/state_move.gd
=====================================
# src/entities/player/states/state_move.gd
## Handles the player's grounded movement state.
extends BaseState

func enter(_msg := {}) -> void:
	state_data.air_jumps_left = state_data.config.player_max_air_jumps
	state_data.can_dash = true

func process_physics(delta: float) -> void:
	state_data.coyote_timer = state_data.config.player_coyote_time

	owner.physics_component.apply_gravity(delta)
	owner.physics_component.apply_horizontal_movement()

	if not owner.is_on_floor():
		state_machine.change_state(owner.State.FALL)
		return

	var is_trying_drop = owner.input_component.buffer.get("down") and owner.input_component.buffer.get("jump_pressed")
	if is_trying_drop:
		var floor_col = owner.get_last_slide_collision()
		if floor_col:
			var floor_collider = floor_col.get_collider()
			if is_instance_valid(floor_collider) and floor_collider.is_in_group(Identifiers.Groups.ONEWAY_PLATFORMS):
				owner.position.y += 2
				state_machine.change_state(owner.State.FALL)
				return

	if owner.input_component.buffer.get("jump_pressed"):
		state_machine.change_state(owner.State.JUMP)
		return


=====================================
FILE: ./src/entities/player/data/player_state_data.gd
=====================================
# src/entities/player/data/player_state_data.gd
@tool
## A Resource that holds all shared runtime state data for the Player.
##
## This object acts as a central "brain" passed between states, allowing them
## to read and write to a single source of truth without direct coupling.
class_name PlayerStateData
extends Resource

# --- Configuration Reference ---
var config: CombatConfig

# --- Health & Combat ---
var max_health: int = 5
var max_healing_charges: int = 1
var health: int = 5:
	set(value):
		health = clamp(value, 0, max_health)
var healing_charges: int = 0:
	set(value):
		healing_charges = clamp(value, 0, max_healing_charges)
var determination_counter: int = 0
var is_invincible: bool = false
var is_dash_invincible: bool = false
var hit_targets_this_swing: Dictionary = {}

# --- Physics & Movement ---
var air_jumps_left: int = 0
var facing_direction: int = 1
var last_wall_normal: Vector2 = Vector2.ZERO
var can_dash: bool = true
var pogo_fall_prevention_timer: float = 0.0

# --- Timers ---
var coyote_timer: float = 0.0
var wall_coyote_timer: float = 0.0
var dash_duration_timer: float = 0.0
var dash_cooldown_timer: float = 0.0
var attack_duration_timer: float = 0.0
var attack_cooldown_timer: float = 0.0
var knockback_timer: float = 0.0

# --- State Flags ---
var is_charging: bool = false
var charge_timer: float = 0.0
var is_pogo_attack: bool = false

=====================================
FILE: ./src/entities/player/data/upward_attack_shape.tres
=====================================
[gd_resource type="RectangleShape2D" load_steps=0 format=3 uid="uid://c0dt7jqwtnbr"]

[resource]
size = Vector2(40, 40)


=====================================
FILE: ./src/entities/player/data/forward_attack_shape.tres
=====================================
[gd_resource type="RectangleShape2D" load_steps=0 format=3 uid="uid://c1b2d3e4f5g6h"]

[resource]
size = Vector2(80, 40)


