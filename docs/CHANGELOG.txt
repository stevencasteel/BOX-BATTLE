╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║



║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                  [0.7.0] - NEEDS TITLE - 2025-08-XX                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 






   █  Architectural Changes                                                   
      ░ ■ Hardened the `ObjectPool` against race conditions by deferring the   
      ░   deactivation of returned instances, preventing same-frame access errors.

   █  Fixed
      ░ ■ Correctly configured all projectile scenes (`PlayerShot`, `BossShot`)
      ░   with the necessary metadata to ensure they are properly returned to
      ░   the `ObjectPool` instead of being deleted, preventing performance
      ░   degradation.



   █  Documentation                                                           
      ░ ■ Formalized the project's official Dependency Injection pattern in    
      ░   `ARCHITECTURE.txt`. The standard is "Owner-Driven Injection" within 
      ░   an entity's `_ready()` function, leveraging Godot's lifecycle guarantees.




   █  Architectural Changes                                                   
      ░ ■ Unified the project's configuration system to be exclusively driven
      ░   by the `CombatDB` singleton and its associated `CombatConfig.tres`
      ░   Resource. All legacy `Config.gd` calls have been removed.
      ░ ■ Enhanced `CombatConfig.gd` with `@export_group` and `@export_range`
      ░   to provide a clean, designer-friendly UI in the Godot Inspector.

   █  Fixed                                                                   
      ░ ■ Resolved a visual regression where the boss phase indicators on the 
      ░   Game HUD were not initialized correctly. The styling logic is now more
      ░   performant and visually stable.




fix(architecture): Unify state machine lifecycle and resolve UID conflicts
Implements a robust teardown pattern for the state machine system to prevent memory leaks and resolves asset database corruption.

State Machine Unification:
- Adds a `teardown()` method to the `BaseState` class to define the contract for breaking cyclic references.
- The `BaseStateMachine.teardown()` function now iterates through all state instances and calls their respective `teardown()` methods, ensuring `Owner -> State` references are nullified.
- This completes the task of unifying the state machine to be a pure, memory-safe object-based model.

Resource UID Fix:
- Resolves a "invalid UID" warning on startup by manually removing the corrupted UID references from `combat_config.tres` and `main.tscn`.
- This allows Godot's importer to re-establish correct links to the script resources, restoring asset database integrity.





   █  Changed                                                                 
      ░ ■ Reverted experimental implementation of attack and dash input buffering.
      ░   After playtesting, the feature was found to negatively impact the   
      ░   precise and deliberate feel of the combat. The project will retain  
      ░   the existing responsive (non-buffered) input model.                 






   █  Architectural Changes                                                   
      ░ ■ Hardened the `ObjectPool` against race conditions by deferring the   
      ░   deactivation of returned instances, preventing same-frame access errors.
      ░ ■ Hardened the `Sequencer` by adding a `cancel_all()` method that is   
      ░   now called by the `SceneManager` during scene transitions, preventing
      ░   sequences from running across scenes.                               
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a critical race condition where the `ArenaBuilder` would finish
      ░   before the boss intro sequence could spawn the boss.                 
      ░ ■ Hardened the player's pogo attack physics query. It now correctly    
      ░   iterates through all potential targets to find a valid `IDamageable`,
      ░   making the mechanic more reliable against complex colliders.        





   █  Architectural Changes                                                   
      ░ ■ Unified the state machine architecture to be purely object-based.    
      ░   This removes inconsistent lifecycle logic and makes the system more  
      ░   robust against memory leaks.                                        
      ░ ■ Implemented a formal `teardown` pattern in all state machines and    
      ░   entity components to ensure proper cleanup and prevent cyclic references.
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a critical race condition that caused the game to crash when
      ░   a Turret minion was destroyed.                                      




   █  Architectural Changes                                                   
      ░ ■ Converted all gameplay tuning data into editor-friendly Resources.   
      ░   The `CombatConfig` now uses `@export` hints to generate sliders and  
      ░   organized groups in the Godot Inspector for easy tuning.            
      ░ ■ Refactored the `BaseBoss` to be fully data-driven. Attack patterns   
      ░   for each phase are now assigned via exported arrays in the Inspector,
      ░   decoupling boss design from hard-coded script paths.                
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a "modulo by zero" crash in the boss's idle state by adding
      ░   a guard clause to handle cases where no attack patterns are assigned.
      ░ ■ Corrected a resource loading error caused by duplicated UIDs in the  
      ░   `base_boss.tscn` file, ensuring exported resources load correctly.  ```




   █  Documentation                                                           
      ░ ■ Formalized the project's official Dependency Injection pattern in    
      ░   `ARCHITECTURE.txt`. The standard is "Owner-Driven Injection" within 
      ░   an entity's `_ready()` function, leveraging Godot's lifecycle guarantees.









║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                  [0.6.0] - NEEDS TITLE - 2025-08-11                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 



   █  Architectural Changes                                                   
      ░ ■ Hardened the `Sequencer` to return a `SequenceHandle`, allowing      
      ░   cinematic sequences to be safely cancelled to prevent state bugs.   
      ░ ■ Hardened the `ObjectPool` by replacing fragile, name-based node      
      ░   lookups with direct references, making the system more robust.      
      ░ ■ Decoupled game logic from screen resolution by creating a `GridUtils`
      ░   singleton to handle conversions between tile and world coordinates.
      ░ ■ Implemented a `CameraManager` to dynamically fit the camera to the
      ░   arena's logical size, enabling support for non-square aspect ratios.
      ░ ■ Enhanced the `TerrainBuilder` to procedurally fill the entire camera
      ░   viewport with background tiles, creating a seamless play area.
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a potential memory leak in the `EventBus` by implementing   
      ░   a self-cleaning mechanism that automatically prunes dead            
      ░   subscriptions during the `emit` cycle.                              
      ░ ■ Corrected several `async`/`await` errors in the `Sequencer` and its  
      ░   new `CallableStep` to ensure it can reliably execute async functions.


   █  Changed
      ░ ■ Project display settings updated to a 16:9 aspect ratio (1920x1080).
      ░ ■ Refactored procedural UI menus to use container nodes for better
      ░   resizing, though minor alignment issues remain (see BUGS.txt).

   █  Architectural Changes                                                   
      ░ ■ Created a data-driven `AttackPattern` resource, allowing boss      
      ░   attack properties (timing, cooldowns) to be designed and tuned     
      ░   directly in the editor instead of being hard-coded.                 
      ░ ■ Implemented a new, reusable `TelegraphComponent` scene to provide    
      ░   consistent and clear visual warnings for all enemy attacks.         
                                                                              
   █  Changed                                                                 
      ░ ■ Refactored the `BaseBoss` and its state machine to be fully data-driven.
      ░   The `AttackState` now reads an `AttackPattern` resource to execute   
      ░   attacks, and the `IdleState` is responsible for selecting which      
      ░   pattern to use.                                                     


   █  Architectural Changes                                                   
      ░ ■ Decoupled game logic from screen resolution by creating a `GridUtils`
      ░   singleton to handle conversions between tile and world coordinates. 
      ░ ■ Implemented a `CameraManager` to support non-square aspect ratios.  
      ░ ■ Enhanced the `TerrainBuilder` to procedurally fill the entire camera
      ░   viewport with background tiles, creating a seamless play area.      
                                                                              
   █  Changed                                                                 
      ░ ■ Project's default display resolution updated from 1000x1000 to a     
      ░   pixel-perfect 1800x1000 widescreen aspect ratio.                    
      ░ ■ The Player's dash mechanic has been refined. All momentum is now     
      ░   cancelled at the end of a dash, providing a more precise "hard stop" 
      ░   feel and allowing for more controlled aerial maneuvers.             
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a long-standing visual bug where debug collision shapes would
      ░   be incorrectly culled at the viewport edges by correcting the engine's
      ░   update order in the `game.gd` scene.                                
      ░ ■ Replaced all `ColorRect` nodes used for in-world visuals with        
      ░   `Polygon2D` nodes to prevent potential rendering conflicts.         
      ░ ■ Fixed a critical race condition where killing the boss would not trigger
      ░   the victory screen by moving the logic to the global `EventBus`.    
      ░ ■ Addressed several minor UI layout bugs for better consistency.      



         █  Added                                                                   
      ░ ■ Implemented a dynamic, three-phase boss fight. The boss now becomes
      ░   more aggressive as its health decreases, using faster cooldowns and
      ░   more complex attack patterns in later phases.                       
      ░ ■ Added phase indicator icons to the Game HUD that update in real-time
      ░   to visually represent the boss's current phase.                      
      ░ ■ Created a templated boss death sequence using the `Sequencer`. This 
      ░   creates a cinematic pause after defeating the boss before the       
      ░   victory screen appears.                                             
                                                                              
   █  Changed                                                                 
      ░ ■ The boss's `HealthComponent` can now detect when health crosses      
      ░   pre-defined thresholds and emit a signal, enabling phase transitions.
      ░ ■ The `GameHUD`'s player health bar now correctly uses a color from the
      ░   global `Palette` for visual consistency.                            
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a "zombie attack" bug where the boss could still fire       
      ░   projectiles after dying by adding an `_is_dead` state flag.         
      ░ ■ Fixed a bug where active projectiles would persist across scene      
      ░   transitions by adding a global reset function to the `ObjectPool`.  
      ░ ■ Corrected the phase indicator UI to deplete from right-to-left.      


   █  Added                                                                   
      ░ ■ Implemented a new `ArmorComponent` to allow for phases of boss       
      ░   invulnerability, a key feature of the "Kitchen Sink" boss design.   
      ░ ■ Created a new data-driven "Armored Lunge" attack pattern. In later   
      ░   phases, the boss can now become invulnerable and perform a high-speed
      ░   dash across the arena.                                              
                                                                              
   █  Changed                                                                 
      ░ ■ The `HealthComponent` is now "armor-aware" and will check for an     
      ░   active `ArmorComponent` before applying damage.                     
      ░ ■ The boss's attack telegraph system is now context-aware, displaying a
      ░   long rectangle for the lunge path and a square for projectile attacks,
      ░   improving visual clarity for the player.                            



   █  Added                                                                   
      ░ ■ Implemented a new "Turret" minion enemy. This stationary enemy      
      ░   detects the player within a set range and fires projectiles, proving
      ░   the reusability of the unified state machine and component architecture.

   █  Changed                                                                 
      ░ ■ The encounter system has been upgraded to support spawning a list of 
      ░   minions from the level layout file, in addition to the main boss.   
                                                                              
   █  Fixed                                                                   
      ░ ■ Resolved a bug where turrets would stop firing after a few shots by  
      ░   refactoring their state machine logic to be continuous rather than  
      ░   reliant on a one-shot `await` call in the `enter` function.         
      ░ ■ Fixed a critical bug where projectiles were being permanently deleted
      ░   instead of returned to the `ObjectPool`, by creating a dedicated    
      ░   `TurretShot` scene with the correct pooling metadata.               