╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██     [0.13.0] - UNTITLED AND UNDETERMINED TITLE STILL - 08/XX/2025    ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║


   DATA-DRIVEN SHADER SYSTEM INTEGRATION
   Completed the full integration of the "FX Cookbook" system, migrating the
   game's core hit-flash effect to the new data-driven, component-based
   architecture. This makes all entity visual feedback modular and extensible.
   ────────────────────────────────────────────────────────────────────────
   █  Architectural Changes
      ░ ■ Refactored `FXComponent` into a generic "effect player." It no longer
      ░   contains hardcoded effect logic and can now play any `ShaderEffect`
      ░   resource it is given.
      ░ ■ The `FXComponent` now correctly subscribes to its sibling
      ░   `HealthComponent`'s `took_damage` signal, fully decoupling the trigger
      ░   (taking damage) from the visual response (playing a shader effect).
   █  Changed
      ░ ■ The Player, BaseBoss, and Turret entities now inject a preloaded
      ░   `ShaderEffect` resource into their `FXComponent` upon initialization,
      ░   adhering to the Owner-Driven Dependency Injection pattern.
   █  Fixed
      ░ ■ Resolved a critical bug where the hit-flash effect was not playing
      ░   during gameplay. The issue was traced to a missing signal connection
      ░   between the `HealthComponent` and the `FXComponent`, which has now
      ░   been correctly established in the `FXComponent`'s `setup` method.


   DATA-DRIVEN SHADER SYSTEM (FX COOKBOOK)
   Established the foundational architecture for the "FX Cookbook," a data-
   driven system for defining and triggering shader-based visual effects.
   This completes the first phase of the "Juice & Feedback" initiative.
   ────────────────────────────────────────────────────────────────────────
   █  Architectural Changes
      ░ ■ Created a new `ShaderEffect` custom resource. This allows visual
      ░   effects to be defined as data files (`.tres`), fully decoupling
      ░   effect configuration from game logic.
      ░ ■ Established a robust, code-first pattern for loading custom resources
      ░   that depend on sub-resources, resolving a series of critical engine-
      ░   level resource caching and loading errors.
   █  Added
      ░ ■ Created a new `fx_playground.tscn` scene to serve as a minimal
      ░   testbed for rapidly prototyping and verifying new shader effects in
      ░   complete isolation from the main game loop.
   █  Changed
      ░ ■ The existing red hit-flash shader has been migrated to the new
      ░   `ShaderEffect` system, serving as the pilot and proof-of-concept for
      ░   the new architecture.



   UI ARCHITECTURE REFINEMENT (DECOUPLING)
   Completed a full refactor of all reusable UI components to eliminate
   hidden dependencies on global singletons, aligning the UI with the
   project's core architectural patterns.
   ────────────────────────────────────────────────────────────────────────
   █  Architectural Changes
      ░ ■ Refactored `StyledMenuItem`, `MuteButton`, and `LogoDisplay` to be
      ░   purely presentational. They no longer call `AudioManager` directly.
      ░ ■ UI components now only emit signals (e.g., `pressed`) to announce
      ░   user interaction.
      ░ ■ The owner menu scenes (e.g., `TitleScreen`) are now solely
      ░   responsible for listening to these signals and triggering audio
      ░   feedback, enforcing the Owner-Driven Dependency Injection pattern.



   ARCHITECTURAL HARDENING (DEPENDENCY INJECTION)
   Completed a full-scale refactor to enforce the Owner-Driven Dependency
   Injection pattern across all entities and components, eliminating hidden
   dependencies on global singletons and improving architectural clarity.
   ────────────────────────────────────────────────────────────────────────
   █  Architectural Changes
      ░ ■ Refactored all entity components (`CombatComponent`,
      ░   `PlayerResourceComponent`, `FXComponent`) to receive their singleton
      ░   dependencies (`ObjectPool`, `EventBus`) via their `setup()` methods.
      ░ ■ Updated all projectile scripts to receive their `ObjectPool` dependency
      ░   on activation, making them fully self-contained.
      ░ ■ Centralized all visual effect logic into the `FXComponent`, which now
      ░   listens for local signals from `HealthComponent` to trigger effects.
   █  Removed
      ░ ■ Removed all direct calls to `FXManager`, `ObjectPool`, and `EventBus`
      ░   from entity main scripts and components, formalizing their roles as
      ░   dependency injectors and orchestrators.



   ARCHITECTURAL HARDENING & MEMORY MANAGEMENT
   Completed a major architectural push to enforce the Owner-Driven Dependency
   Injection pattern and resolve all memory leaks on game exit. The codebase
   is now more robust, testable, and free of dangling resource references.
   ────────────────────────────────────────────────────────────────────────
   █  Architectural Changes
      ░ ■ Enforced the Owner-Driven Dependency Injection pattern project-wide.
      ░   Components now receive their dependencies (e.g., ObjectPool, EventBus)
      ░   from their owner via their `setup()` method and no longer call
      ░   global singletons directly.
      ░ ■ Refactored all projectile scenes to receive their ObjectPool dependency
      ░   upon activation, fully decoupling them from the global singleton.
   █  Fixed
      ░ ■ Resolved all `ObjectDB instances leaked at exit` warnings by
      ░   implementing robust `_exit_tree` cleanup methods in all core
      ░   singletons (`ObjectPool`, `EventBus`, `AudioManager`).
      ░ ■ Eliminated all RenderingServer `RID` leaks by ensuring all pooled
      ░   nodes and their rendering resources are explicitly freed on exit.
      ░ ■ Fixed a race condition in projectile scripts that could cause a crash
      ░   if an object was returned to the pool multiple times in one frame.
      ░ ■ Resolved all remaining assertion and parse errors related to the new
      ░   dependency injection pattern.



PLAYER MECHANICS HARDENING & REFACTOR
   Completed a full refactor of the player's jump system to be state-driven,
   resolving an infinite jump bug and enabling air jumps during ascent. Also
   unified all player knockback values for consistent gameplay feedback.
   ────────────────────────────────────────────────────────────────────────
   █  Architectural Changes
      ░ ■ Refactored all jump logic out of the generic `PlayerAbilityComponent`
      ░   and into the relevant states (`StateMove`, `StateFall`, `StateJump`),
      ░   making the behavior context-aware and architecturally robust.
   █  Fixed
      ░ ■ Resolved a critical bug that allowed for infinite air jumps. Air jumps
      ░   are now correctly consumed and reset upon landing or wall contact.
      ░ ■ The player can now correctly perform an air jump at any point during
      ░   their initial jump arc (both ascending and descending).
      ░ ■ Unified the knockback speed for enemy and hazard damage in the
      ░   `CombatConfig`, ensuring consistent and predictable feedback when
      ░   the player takes damage from any source.





   NEW BOSS ATTACK & SYSTEM HARDENING                                          
   Implemented a complex, data-driven homing projectile attack for the boss    
   and resolved a series of critical, low-level bugs related to resource       
   loading, physics safety, and object pooling state.                          
   ────────────────────────────────────────────────────────────────────────    
   █  Added                                                                    
      ░ ■ Implemented a new `HomingOmniBurst` attack for the boss's third phase,
      ░   featuring 30 projectiles that actively seek the player and shrink    
      ░   over their lifetime.                                                 
      ░ ■ Created a new `HomingBossShot` projectile scene and script with      
      ░   built-in tween-based scaling and target tracking logic.              
      ░ ■ Integrated the new projectile into the `ObjectPool`, `Identifiers`,  
      ░   and `AssetPaths` singletons for project-wide consistency.   



   ARCHITECTURAL REFINEMENT & GAMEPLAY FIXES                                   
   Completed a deep refactor of the entity state machine and attack systems    
   to use the Command Pattern, fully decoupling logic from implementation.     
   This also resolved a series of critical, long-standing gameplay bugs.     
   ────────────────────────────────────────────────────────────────────────    
   █  Architectural Changes                                                    
      ░ ■ Refactored the `AttackLogic` system to use the Command Pattern.      
      ░   Attack logic resources now return a `Callable` command instead of    
      ░   executing actions directly, making the system more modular and reusable.
      ░ ■ Refactored the Player's state machine to emit an `action_requested`  
      ░   signal with a `Callable` payload, decoupling states from the Player's
      ░   internal component structure.                                        
      ░ ■ Centralized all remaining "magic numbers" (e.g., lunge speed,       
      ░   projectile stats, melee range) from scripts into `CombatConfig.tres`,
      ░   making the project fully data-driven.                                



   GAMEPLAY MECHANICS & BUG FIXES                                              
   Restored and hardened several core player mechanics that had regressed      
   during previous architectural refactors.                                    
   ────────────────────────────────────────────────────────────────────────    
   █  Fixed                                                                    
      ░ ■ Restored the pogo attack, which was non-functional due to a race     
      ░   condition in the attack state. Logic was separated into a dedicated  
      ░   `StatePogo` for clarity and reliability.                             
      ░ ■ Fixed a bug where the pogo attack did not generate visual effects by 
      ░   ensuring the `DamageInfo` object contained the necessary impact data.
      ░ ■ Restored the healing mechanic, which was broken by an incorrect      
      ░   input check (`is_action_just_pressed` vs. `is_action_pressed`).      
      ░ ■ Fixed a bug where the HUD did not update after healing by ensuring   
      ░   all changes to healing charges are routed through the                
      ░   `PlayerResourceComponent` to guarantee the proper event is emitted.  
      ░ ■ Restored the ability to drop through one-way platforms by            
      ░   centralizing and correctly ordering input action logic in the        
      ░   `PlayerAbilityComponent`.                                            
   █  Code Quality                                                             
      ░ ■ Resolved a critical circular dependency between `Player`,            
      ░   `BaseEntity`, and `PlayerResourceComponent` that was causing a parse 
      ░   error on startup.
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██   [0.12.0] - UNIFIED ENTITY ARCHITECTURE & ROBUSTNESS - 08/20/2025   ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║                                                                              ║
║  ENTITY ARCHITECTURE UNIFICATION                                             ║
║  Completed a major refactor to unify all entities under the `BaseEntity` and ║
║  `EntityArchetype` pattern, eliminating the "dual architecture" and          ║
║  enforcing a single, consistent method for building entities.                ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Refactored `BaseBoss` and `Turret` to extend `BaseEntity`.           ║
║     ░ ■ Created `boss_archetype.tres` and `turret_archetype.tres` to define  ║
║     ░   their component compositions as data, not scene structure.           ║
║     ░ ■ Simplified the `base_boss.tscn` and `turret.tscn` scenes to be minimal║
║     ░   nodes that reference their respective archetypes.                    ║
║                                                                              ║
║  DATA-DRIVEN & POLA REFINEMENTS                                              ║
║  Enhanced adherence to data-driven design and the Principle of Least         ║
║  Astonishment (POLA) by centralizing configuration and clarifying APIs.      ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Refactored all entities (`Player`, `BaseBoss`, `Turret`) to expose   ║
║     ░   their state script dependencies as `@export` variables, fully        ║
║     ░   decoupling them from hardcoded `load()` paths.                       ║
║     ░ ■ Centralized all remaining entity configuration (`turret_fire_rate`,  ║
║     ░   `player_attack_shape`s) into the `CombatConfig.tres` resource.       ║
║     ░ ■ Cleaned up entity APIs by making internal helper methods (`_die`,     ║
║     ░   `_fire_at_player`) private to prevent misuse and clarify the public- ║
║     ░   facing contract of each entity.                                      ║
║  █  Code Quality                                                             ║
║     ░ ■ Systematically organized and commented all key configuration files   ║
║     ░   (`.tres`, `.tscn`, `project.godot`) for improved readability and     ║
║     ░   maintainability.                                                     ║
║  █  Fixed                                                                    ║
║     ░ ■ Resolved a critical bug in the `turret.gd` `teardown()` method, which║
║     ░   was failing to disconnect signals, preventing a future memory leak.  ║
║     ░ ■ Corrected a syntax error in the `.tres` file format that was causing ║
║     ░   a parse failure on startup.                                          ║
║                                                                              ║
║  ARCHITECTURAL REFINEMENT & CODE QUALITY                                     ║
║  Completed a targeted refactor to improve architectural clarity and adhere    ║
║  more closely to the Principle of Least Astonishment.                        ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Eliminated the `CombatDB` singleton. All scripts now load the        ║
║     ░   `CombatConfig.tres` resource directly, removing an unnecessary layer ║
║     ░   of abstraction and making dependencies more transparent.             ║
║     ░ ■ Renamed the `Interfaces.gd` autoload to `GlobalPreloader.gd` to      ║
║     ░   accurately reflect its true purpose of resolving critical script     ║
║     ░   parse-order dependencies, not just defining interfaces.              ║
║  █  Fixed                                                                    ║
║     ░ ■ Resolved a `class_name` conflict with the preloader autoload that was║
║     ░   causing a parse error on startup.                                    ║
║                                                                              ║
║  VISUAL EFFECTS & ROBUSTNESS                                                 ║
║  Implemented a robust, code-driven hit-flash shader effect and resolved      ║
║  critical resource loading errors. The new system is immune to editor cache  ║
║  issues and provides reliable visual feedback for combat.                    ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Fixed                                                                    ║
║     ░ ■ Corrected the hit-flash shader to use the `COLOR` varying instead of ║
║     ░   `texture(TEXTURE, UV)`, enabling it to work correctly on `ColorRect` ║
║     ░   nodes.                                                               ║
║     ░ ■ Refactored the `FXComponent` to be self-sufficient, creating and     ║
║     ░   managing its own shader materials and tweens, which bypasses fragile ║
║     ░   resource chains.                                                     ║
║  █  Removed                                                                  ║
║     ░ ■ Deleted obsolete shader, material, and effect resource files related ║
║     ░   to the old hit-flash system.                                         ║
║     ░ ■ Removed the now-unused `EntityShaderBinding` system.                 ║
║                                                                              ║
║  ARCHITECTURAL PREPARATION FOR FX & SHADER OVERHAUL                          ║
║  Laid the complete file and folder foundation for a multi-phase refactor of  ║
║  the visual effects and shader pipelines. This work prepares the project for ║
║  a new data-driven, mobile-first rendering architecture.                     ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Added                                                                    ║
║     ░ ■ Created a new, organized `shaders/` directory with subfolders for    ║
║     ░   entity, fullscreen, UI, and reusable include files (`.gdshaderinc`). ║
║     ░ ■ Added a corresponding `materials/` directory for all `ShaderMaterial`║
║     ░   resources.                                                           ║
║     ░ ■ Established new file scaffolds for data-driven `ShaderEffect`        ║
║     ░   resources (`dissolve_effect.tres`, `shockwave_effect.tres`).         ║
║     ░ ■ Created placeholder scripts for new `FXManager` binding layers that  ║
║     ░   will manage applying effects to their targets.                       ║
║     ░ ■ Added a scene and script for a new `fx_playground` developer tool to ║
║     ░   enable rapid iteration and testing of visual effects.                ║
║     ░ ■ Added a placeholder script for a CI-driven shader linter to enforce  ║
║     ░   code quality and mobile best practices.                              ║
║                                                                              ║
║  ENTITY ARCHITECTURE OVERHAUL (ENTITY ARCHETYPE PATTERN)                     ║
║  Completed a full-scale refactor of the entity system to a data-driven,      ║
║  archetype-based architecture. This foundational change enhances modularity, ║
║  improves adherence to SOLID principles, and establishes a robust, future-   ║
║  proof pipeline for managing complex entities and their visual effects.      ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Implemented the Entity Archetype pattern. Entities are now built     ║
║     ░   at runtime based on a new `EntityArchetype.tres` resource, which     ║
║     ░   defines an entity's composition by listing its component scenes.     ║
║     ░ ■ Created a new generic `BaseEntity.gd` class that reads an archetype, ║
║     ░   instantiates all components, and caches typed references, serving as ║
║     ░   a Composition Root and Facade for all entities.                      ║
║     ░ ■ Implemented a robust Three-Phase Initialization pattern (Construct,  ║
║     ░   Inject, Setup) to resolve complex dependency ordering issues between ║
║     ░   entities and their components, particularly for `@onready` variables.║
║     ░ ■ Created a new `FXComponent` to be the sole manager of all entity-    ║
║     ░   specific visual effects, fully decoupling visual feedback from game  ║
║     ░   logic components like `HealthComponent`.                             ║
║  █  Refactored                                                               ║
║     ░ ■ Migrated the `Player` and its components to the new archetype system.║
║     ░   The `player.tscn` scene has been drastically simplified, with its    ║
║     ░   structure now defined in `player_archetype.tres`.                    ║
║     ░ ■ All individual component `.gd` scripts have been converted to reusable║
║     ░   `.tscn` files to support the new archetype system.                   ║
║  █  Fixed                                                                    ║
║     ░ ■ Resolved a persistent, silent failure with shader effects. The complex║
║     ░   `Tween`-based animation was replaced with a simpler, more reliable   ║
║     ░   `Timer`-based approach within the `FXComponent`, resulting in a      ║
║     ░   functional hit-flash effect.                                         ║
║     ░ ■ Eliminated all parse-order errors related to `BaseEntity` by correctly║
║     ░   registering it as a `class_name` and preloading it.                  ║
║     ░ ■ Fixed a resource UID conflict in `player.tscn` that was preventing the║
║     ░   scene from loading correctly.                                        ║
║                                                                              ║
║  MEMORY MANAGEMENT & CRITICAL BUG FIXES                                      ║
║  Resolved a critical crash-on-death and a major memory leak on scene exit    ║
║  by hardening entity lifecycle management and teardown patterns.             ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Refactored the `BaseState` class to extend `Object` instead of       ║
║     ░   `RefCounted` to enforce explicit memory management.                  ║
║     ░ ■ Upgraded `BaseStateMachine` to manually free its state objects during║
║     ░   `teardown()`, breaking a critical cyclic reference that was causing  ║
║     ░   the memory leak.                                                     ║
║  █  Fixed                                                                    ║
║     ░ ■ Resolved a null reference crash in `PlayerPhysicsComponent` that     ║
║     ░   occurred when the player was freed mid-physics-frame after dying.    ║
║     ░ ■ Eliminated all `ObjectDB instances leaked at exit` warnings and their║
║     ░   associated RID leaks by fixing the state machine's memory management.║
║  █  Removed                                                                  ║
║     ░ ■ Deleted the unused `vfx_manager.gd` to eliminate ambiguity with the  ║
║     ░   primary `FXManager` singleton.                                       ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██      [0.11.0] - VISUAL EFFECTS & MEMORY MANAGEMENT - 08/18/2025      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║                                                                              ║
║  VFX & OBJECT POOLING FOUNDATION                                             ║
║  Established a scalable, data-driven system for spawning visual effects      ║
║  and hardened the ObjectPool to be architecturally sound and free of         ║
║  race conditions.                                                            ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Implemented a "VFX Cookbook" pattern by creating a `VFXEffect`       ║
║     ░   Resource. This allows designers to define particle effects as data assets.║
║     ░ ■ Upgraded `FXManager` with a `play_vfx()` method to serve as the      ║
║     ░   single, decoupled API for triggering all visual effects.             ║
║     ░ ■ Refactored the `ObjectPool` to use a canonical, robust pattern that  ║
║     ░   eliminates all parenting-related errors and physics race conditions. ║
║  █  Added                                                                    ║
║     ░ ■ Created a new reusable, pooled `hit_spark.tscn` particle effect.     ║
║     ░ ■ The `DamageInfo` resource was expanded to include `impact_position`  ║
║     ░   and `impact_normal` to provide VFX with necessary spawn data.        ║
║  █  Fixed                                                                    ║
║     ░ ■ Resolved a critical crash caused by incorrect state change calls in  ║
║     ░   the `PlayerPhysicsComponent` during contact damage checks.           ║
║     ░ ■ Eliminated a visual bug where pooled projectiles would not disappear ║
║     ░   after being returned to the pool by adding `visible = false` to      ║
║     ░   their `deactivate()` methods.                                        ║
║                                                                              ║
║  MEMORY MANAGEMENT & ARCHITECTURAL REFINEMENT                                ║
║  Resolved critical memory leaks on scene transitions by implementing a formal║
║  scene teardown contract and refining the engine's script loading order.     ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Introduced a new `ISceneController` interface with a `scene_exiting()`║
║     ░   method to ensure robust, explicit cleanup before scene changes.      ║
║     ░ ■ Upgraded `SceneManager` to call `scene_exiting()` on the active scene,║
║     ░   allowing nodes like Player and Boss to properly run their `teardown()` logic.║
║     ░ ■ Created a central `Interfaces.gd` autoload to manage the preloading of║
║     ░   all interface scripts, resolving all `class_name` parse order errors.║
║  █  Fixed                                                                    ║    
║     ░ ■ Resolved all `ObjectDB instances leaked at exit` warnings and all    ║
║     ░   associated RID allocation leaks by breaking dangling references held ║
║     ░   by global singletons.                                                ║
║     ░ ■ Fixed all `SHADOWED_GLOBAL_IDENTIFIER` warnings related to the new   ║
║     ░   interface autoload script for a completely clean build.              ║
║                                                                              ║
║  GAME FEEL & IMPACT FEEDBACK (JUICE)                                         ║
║  Implemented a suite of data-driven feedback systems, including screen shake ║
║  and hit-stop, to add significant weight and satisfaction to core combat actions.║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Created a new `CameraShaker` component that uses Perlin noise to     ║
║     ░   procedurally generate smooth, non-repeating camera shake effects.    ║
║     ░ ■ Implemented a `ScreenShakeEffect` Resource to define shake properties║
║     ░   (amplitude, frequency, duration) as reusable, designer-tunable assets.║
║     ░ ■ Upgraded `FXManager` to be the central API for all screen effects.   ║
║     ░ ■ Expanded `CombatConfig.tres` with four new tunable properties to     ║
║     ░   control the duration of hit-stop for specific gameplay events.       ║
║  █  Added                                                                    ║
║     ░ ■ Integrated screen shake effects for key gameplay events: boss intro, ║
║     ░   player damage, phase transitions, and boss death.                    ║
║     ░ ■ Implemented a hierarchical hit-stop system to punctuate pivotal moments:║
║     ░   - A micro-pause rewards the player for landing high-risk, close-range attacks.║
║     ░   - A brief pause occurs when the player takes damage, emphasizing impact.║
║     ░   - A significant pause marks boss phase transitions.                  ║
║     ░   - A dramatic pause emphasizes the final, killing blow on a boss.     ║
║  █  Changed                                                                  ║
║     ░ ■ Refactored the location of `combat_config.tres` to align with project║
║     ░   structure standards.                                                 ║
║  █  Fixed                                                                    ║
║     ░ ■ Corrected the camera shake implementation to use the `Camera2D.offset`║
║     ░   property, ensuring the shake works correctly with the camera system. ║
║                                                                              ║
║  SCREEN SHAKE & GAME FEEL FOUNDATION                                         ║
║  Implemented a robust, data-driven screen shake system to serve as the       ║
║  foundation for the "Juice & Feedback" initiative, adding significant        ║
║  impact to key gameplay moments.                                             ║
║  ────────────────────────────────────────────────────────────────────────    ║
║  █  Architectural Changes                                                    ║
║     ░ ■ Created a new `CameraShaker` component that uses Perlin noise to     ║
║     ░   procedurally generate smooth, non-repeating camera shake effects.    ║
║     ░ ■ Implemented a new `ScreenShakeEffect` Resource type, allowing for    ║
║     ░   the creation of reusable, designer-tunable shake assets that define  ║
║     ░   amplitude, frequency, and duration.                                  ║
║     ░ ■ Upgraded `FXManager` to be the central API for requesting all screen ║
║     ░   effects, decoupling gameplay logic from the camera implementation.   ║
║  █  Added                                                                    ║
║     ░ ■ Integrated screen shake effects for several key gameplay events:     ║
║     ░   - A high-impact shake on boss intro.                                 ║
║     ░   - A jarring shake when the player takes damage.                      ║
║     ░   - A substantial shake for boss phase transitions.                    ║
║     ░   - A climactic shake when the boss is defeated.                       ║
║  █  Fixed                                                                    ║
║     ░ ■ Corrected the camera shake implementation to use the `Camera2D.offset`║
║     ░   property, ensuring the shake works correctly with the existing       ║
║     ░   camera and level rendering architecture.║                            ║
║                                                                              ║
║                                                                              ║
║   DATA-DRIVEN ATTACK SYSTEM & DEBUGGER OVERHAUL                              ║
║   Completed a full-scale refactor of the boss combat system to be data-driven║
║   and extensible, and upgraded the debug overlay into a powerful, multi-     ║
║   target entity inspector.                                                   ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the entire boss attack system to use the Strategy Pattern.║
║      ░   Attack execution is now encapsulated in modular `AttackLogic`       ║
║      ░   resources, fully decoupling states from specific attack types.      ║
║      ░ ■ `StateBossAttack` is now a generic executor that reads attack data  ║
║      ░   from `AttackPattern` resources, enabling designers to create new    ║
║      ░   attacks without modifying state machine code.                       ║
║      ░ ■ Refactored the invincibility system into a centralized, token-based ║
║      ░   model within `HealthComponent`, making it reusable for any entity.  ║
║      ░ ■ Standardized all entities (`Player`, `BaseBoss`, `Turret`) to use a ║
║      ░   public `entity_data` property for architectural consistency.        ║
║   █  Added                                                                   ║
║      ░ ■ Created a skeleton for a new, complex attack (`HomingOmniBurstLogic`)║
║      ░   to serve as a template and proof-of-concept for the new system.     ║
║      ░ ■ Upgraded the `DebugOverlay` into a multi-target "Entity Inspector"  ║
║      ░   that can cycle through all player and enemy nodes in the scene.     ║
║      ░ ■ Added new input actions (`debug_toggle_overlay`, `debug_cycle_target`)║
║      ░   mapped to `Y` and `U` for controlling the new inspector.            ║
║   █  Removed                                                                 ║
║      ░ ■ The `ArmorComponent` is now obsolete and has been removed, its      ║
║      ░   functionality absorbed by the new token-based invincibility system. ║
║      ░ ■ Legacy invincibility flags (`is_invincible`, `is_dash_invincible`)  ║
║      ░   have been removed from all entity data resources.                   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a critical bug where the boss lunge attack would fail due  ║
║      ░   to an incomplete resource refactor. The lunge and its correct       ║
║      ░   directional telegraph are now fully functional.                     ║
║      ░ ■ Fixed a "stale reference" crash in the debug overlay that occurred  ║
║      ░   when cycling targets after an entity had been destroyed.            ║
║      ░ ■ Ensured all spawned minions (`Turret`) are given unique, sequential ║
║      ░   names (e.g., `Turret_1`, `Turret_2`) for easier debugging.          ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██         [0.10.0] - CI & DEPLOYMENT AUTOMATION - 08/18/2025           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   Established a comprehensive, automated testing pipeline using the Godot    ║
║   Unit Test (GUT) framework to harden core systems and safeguard against     ║
║   future regressions, officially completing the "Fortification" phase.       ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Created a full suite of unit tests for critical, non-visual systems,║
║      ░   including `HealthComponent`, `CombatComponent`, `ObjectPool`,       ║
║      ░   `PlayerResourceComponent`, `InputComponent`, and `CombatUtils`.     ║
║      ░ ■ Implemented a high-fidelity integration test (`test_integration_combat_loop`)║
║      ░   that validates the entire end-to-end combat sequence, from player   ║
║      ░   input to boss damage and event emission.                            ║
║      ░ ■ Created a data-driven unit test for the `LevelParser`, verifying    ║
║      ░   the correct parsing of `.tres` layout files into build data.        ║
║   █  Fixed                                                                   ║
║      ░ ■ Used the new test suite to identify and resolve multiple cyclic     ║
║      ░   reference bugs in entity and component `teardown` methods,          ║
║      ░   significantly improving memory management.                          ║
║      ░ ■ Corrected a subtle but critical bug in the integration test's input ║
║      ░   simulation, which was simulating a "hold" instead of a "press,"     ║
║      ░   validating the test's sensitivity to timing issues.                 ║
║   █  Known Issues                                                            ║
║      ░ ■ The test suite continues to correctly identify the deferred memory  ║
║      ░   leak (`BUG-MEM001`) related to the Player scene's lifecycle.        ║
║                                                                              ║
║   AUTOMATED TESTING & CORE SYSTEM HARDENING                                  ║
║   Integrated the Godot Unit Test (GUT) framework to establish an automated   ║
║   testing pipeline and used it to identify and resolve critical system bugs. ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Integrated the Godot Unit Test (GUT) framework, establishing the    ║
║      ░   foundation for headless, command-line-driven testing.               ║
║      ░ ■ Created comprehensive unit test suites for critical components:     ║
║      ░   - `ObjectPool`: Verifies instance lifecycle, reuse, and reset logic.║
║      ░   - `HealthComponent`: Verifies damage, invincibility, and death logic║
║      ░   - `PlayerResourceComponent`: Verifies determination/healing economy.║
║      ░   - `CombatComponent`: Verifies projectile and pogo attack logic.     ║
║   █  Fixed                                                                   ║
║      ░ ■ Used unit tests to discover and fix a critical logic bug in         ║
║      ░   `ObjectPool` that prevented the correct reuse of returned instances.║
║      ░ ■ Resolved physics callback errors by restoring the deferred          ║
║      ░   deactivation of pooled objects and hardening the tests to handle    ║
║      ░   asynchronicity.                                                     ║
║      ░ ■ Fixed a flaw in `CombatUtils`'s dependency on node names by making  ║
║      ░   the corresponding test more explicit, hardening the test itself.    ║
║   █  Known Issues                                                            ║
║      ░ ■ A memory leak related to the `Player.tscn` lifecycle has been       ║
║      ░   identified and is now tracked as `BUG-MEM001`. This has been        ║
║      ░   strategically deferred to allow for the completion of the wider     ║
║      ░   test suite.                                                         ║
║                                                                              ║
║   AUTOMATED BUILD & RELEASE WORKFLOW                                         ║
║   Implemented a comprehensive GitHub Actions workflow to automate the entire ║
║   build, test, and release cycle for both development and public releases.   ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Implemented a new GitHub Actions workflow (`main.yml`) that         ║
║      ░   automatically builds and packages the game for all target platforms ║
║      ░ ■ The pipeline automates two key cycles:                              ║
║      ░   - On push to `main`: Compiles builds and saves them as downloadable ║
║      ░     `Artifacts` for internal testing.                                 ║
║      ░   - On version tag (`v*`): Performs all builds and creates a new,     ║
║      ░     public GitHub Release with the final game packages attached.      ║
║                                                                              ║
║   CROSS-PLATFORM EXPORT & DEPENDENCY MANAGEMENT                              ║
║   Configured the pipeline for full cross-platform compatibility and solved   ║
║   critical dependencies to make the CI environment fully self-contained.     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Configured four parallel build jobs to compile and export for       ║
║      ░   Windows, macOS, Linux, and Web, ensuring continuous compatibility.  ║
║      ░ ■ Solved a critical build dependency by automating the download and   ║
║      ░   installation of Godot's export templates within the CI environment. ║
║                                                                              ║
║   ASSET PACKAGING & PUBLISHING                                               ║
║   Implemented a robust post-build strategy for packaging and publishing      ║
║   release assets, resolving several critical deployment errors.              ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Standardized release assets by packaging all builds into clean,     ║
║      ░   platform-specific `.zip` archives with consistent filenames.        ║
║      ░ ■ Fixed GitHub Release publishing by resolving asset filename         ║
║      ░   collisions and correcting workflow permissions (`403 Forbidden`     ║
║      ░   error).                                                             ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██         [0.9.0] - CODEBASE STANDARDIZATION - 08/15/2025              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes a full-scale refactor of the entire codebase to  ║
║      enhance modularity and establish a strict, project-wide code style for  ║
║      readability, consistency, and in-editor documentation.                  ║
║                                                                              ║
║   PLAYER COMPONENT REFACTOR                                                  ║
║   Deconstructed the monolithic Player script into a collection of single-    ║
║   responsibility components, transforming the Player into a pure orchestrator.║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored `player.gd` by abstracting its core duties into three new,║
║      ░   single-purpose components:                                          ║
║      ░   - `PlayerPhysicsComponent`: Handles `move_and_slide` and contact damage.║
║      ░   - `PlayerAbilityComponent`: Manages activation logic for actions.   ║
║      ░   - `PlayerResourceComponent`: Manages determination and healing charges.║
║      ░ ■ The main `_physics_process` loop has been removed from `player.gd`. ║
║      ░ ■ Formalized the `IComponent` and `IDamageable` interface contracts   ║
║      ░   and applied them consistently across all relevant components.       ║
║                                                                              ║
║   PROJECT-WIDE CODE QUALITY & STYLE STANDARDIZATION                          ║
║   Established and applied a formal cosmetic and documentation standard to    ║
║   every script file, enforcing type safety and in-editor documentation.      ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established a formal, project-wide script structure standard (header,║
║      ░   docstring, signals, enums, exports, methods, etc.).                 ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all classes and methods,║
║      ░   providing in-editor tooltips and integrated help.                   ║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the entire codebase to improve static safety.         ║
║                                                                              ║
║   DATA-DRIVEN ENCOUNTER REFACTOR                                             ║
║   Completed the migration of level and encounter definitions from scripts to ║
║   data-driven, designer-friendly Resource files.                             ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Moved all arena data from hardcoded `.gd` scripts into new          ║
║      ░   `EncounterData.tres` and `LevelLayout.tres` custom resources.       ║
║      ░ ■ Updated `ArenaBuilder` and `LevelParser` to be fully data-driven by ║
║      ░   loading and parsing these new `.tres` files at runtime.             ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted all obsolete encounter and layout `.gd` scripts.            ║
║                                                                              ║
║   SYSTEM ABSTRACTION & DEV TOOLING                                           ║
║   Decoupled core systems, improved designer workflows, and added a robust    ║
║   real-time debugging tool.                                                  ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Abstracted the input system to use a command buffer, fully          ║
║      ░   decoupling game logic from the global `Input` singleton.            ║
║      ░ ■ Established a new `FXManager` singleton to serve as a dedicated     ║
║      ░   subsystem for "game feel" effects like hit-stop and screen shake.   ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a toggleable Developer Debug Overlay (F1) that displays ║
║      ░   the player's real-time state, velocity, and input buffer.           ║
║   █  Editor & Tooling                                                        ║
║      ░ ■ Added a configuration warning system to the `LevelLayout` resource  ║
║      ░   that notifies designers in-editor if a layout is invalid.           ║
║                                                                              ║
║   STABILIZATION & CLEAN BUILD                                                ║
║   Resolved all remaining parse errors and static analysis warnings for a     ║
║   completely clean build, including fundamental architectural conflicts.     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a fundamental conflict by removing `class_name` from all   ║
║      ░   autoload singletons, fixing a cascade of parse errors.              ║
║      ░ ■ Resolved all `MISSING_TOOL`, `STATIC_CALLED_ON_INSTANCE`, and other ║
║      ░   static analysis warnings for a completely clean build.              ║
║      ░ ■ Enhanced the shader pre-warming system to include entity actions,   ║
║      ░   significantly reducing first-action stutter at the start of a match.║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.8.0] - UI & ARCHITECTURE OVERHAUL - 08/14/2025          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes two major initiatives: a full-scale refactor of  ║
║      the entire UI system to a modern, scene-based architecture, and a deep  ║
║      enforcement of the project's core architectural patterns to enhance     ║
║      modularity and type safety.                                             ║
║                                                                              ║
║   UI SYSTEM OVERHAUL                                                         ║
║   Migrated the entire legacy UI from a procedural system to a new, scene-based║
║   architecture built on reusable, editor-friendly components.                ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Completed a full UI refactor, moving all menus to self-contained    ║
║      ░   scenes in `src/scenes/menus` that use `Container` nodes for robust layout.║
║      ░ ■ Deprecated and removed the `GlobalHud` autoload, replacing its      ║
║      ░   functionality with a reusable `MuteButton` component.               ║
║   █  Added                                                                   ║
║      ░ ■ Created new reusable, procedurally-drawn UI components, including   ║
║      ░   `StyledMenuItem` and `LogoDisplay`.                                 ║
║      ░ ■ Rebuilt all menu screens (Title, Options, Sound, etc.) as scenes    ║
║      ░   with `@tool` scripts for full in-editor visibility and editing.     ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted the entire legacy `src/ui/screens` directory and all of its ║
║      ░   obsolete, procedurally-generated menu files and assets.             ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a critical state bug in `MenuManager` that caused          ║
║      ░   unpredictable keyboard navigation after mouse use.                  ║
║      ░ ■ Resolved persistent `invalid UID` warnings by re-saving all scenes. ║
║                                                                              ║
║   ARCHITECTURAL PATTERN ENFORCEMENT                                          ║
║   Enforced core architectural patterns across all entities to fully decouple ║
║   state logic from global singletons and formalize data contracts.           ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Enforced the "Owner-Driven Injection" pattern for both Player and   ║
║      ░   Boss state machines, fully decoupling all states from `CombatDB`.   ║
║      ░ ■ Formalized the damage system with typed `DamageInfo` and `DamageResult`║
║      ░   resources, replacing untyped Dictionaries for type-safe combat.     ║
║      ░ ■ Standardized all entity components to formally implement the `IComponent`║
║      ░   contract, unifying their lifecycle and setup methods.               ║
║      ░ ■ Created the `Identifiers` singleton to hold all string-based group  ║
║      ░   names and pool keys, eliminating the risk of runtime errors from typos.║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a "zombie minion" bug where Turrets would continue to fire ║
║      ░   after the boss was defeated.                                        ║
║      ░ ■ Fixed a visual bug where the entity hit-flash color would not reset ║
║      ░   correctly by using a more robust metadata-based system.             ║
║      ░ ■ Eliminated all `STATIC_CALLED_ON_INSTANCE` warnings project-wide.   ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.7.0] - DATA-DRIVEN ARCHITECTURE - 08/13/2025            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes the transformation to a fully data-driven        ║
║      architecture, implements robust memory management patterns, and         ║
║      enhances the combat system with distance-based mechanics and            ║
║      comprehensive scene validation tools.                                   ║
║                                                                              ║
║   DATA-DRIVEN ARCHITECTURE COMPLETION                                        ║
║   Unified the project's configuration system to be exclusively driven by     ║
║   editor-friendly Resource files, fully decoupling game design from code.    ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Unified the configuration system to be exclusively driven by the    ║
║      ░   `CombatDB` singleton and its `CombatConfig.tres` resource.          ║
║      ░ ■ Refactore`BaseBoss` to be fully data-driven, with attack patterns for║
║      ░   each phase assigned via exported arrays in the Godot Inspector.     ║
║      ░ ■ Converted all gameplay tuning data into editor-friendly Resources   ║
║      ░   with `@export_group` and `@export_range` hints for designers.       ║
║                                                                              ║
║   ENHANCED COMBAT MECHANICS                                                  ║
║   Implemented a more nuanced melee system that rewards player positioning    ║
║   and improves hitbox accuracy for different attack angles.                  ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a two-tier melee hitbox system with distance-based      ║
║      ░   damage calculation, rewarding close-range attacks with higher damage.║
║      ░ ■ The melee hitbox now dynamically changes shape and position for     ║
║      ░   upward attacks, ensuring precise coverage above the player.         ║
║                                                                              ║
║   SYSTEM HARDENING & MEMORY MANAGEMENT                                       ║
║   Improved memory safety and stability by implementing formal teardown       ║
║   patterns and hardening core systems against race conditions.               ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Unified the state machine architecture with formal `teardown` patterns║
║      ░   to prevent memory leaks and cyclic references.                      ║
║      ░ ■ Hardened the `Sequencer` by adding `cancel_all()` to prevent sequences║
║      ░   from running across scene transitions.                              ║
║      ░ ■ Hardened the `ObjectPool` by deferring the deactivation of returned ║
║      ░   instances, preventing same-frame access race conditions.            ║
║                                                                              ║
║   CRITICAL BUG FIXES & STABILIZATION                                         ║
║   Resolved several high-priority bugs related to combat reliability, scene   ║
║   loading, and asset database corruption.                                    ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Hardened the player's pogo attack physics query to be more reliable ║
║      ░   against complex colliders.                                          ║
║      ░ ■ Resolved a critical race condition where the `ArenaBuilder` could   ║
║      ░   finish before the boss was spawned by correctly awaiting a `SequenceHandle`.║
║      ░ ■ Corrected resource loading errors and asset database corruption     ║
║      ░   caused by duplicated UIDs in scene and resource files.              ║
║      ░ ■ Resolved a "modulo by zero" crash in the boss's idle state by       ║
║      ░   adding guard clauses for when no attack patterns are assigned.      ║
║      ░ ■ Resolved a visual regression with the Game HUD's phase indicators.  ║
║                                                                              ║
║   EDITOR TOOLING & DOCUMENTATION                                             ║
║   Improved the development workflow with in-editor validation and formalized ║
║   the project's dependency injection pattern in documentation.               ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Created a central, static `SceneValidator` utility to provide       ║
║      ░   in-editor warnings for misconfigured scenes like `BaseBoss`.        ║
║   █  Documentation                                                           ║
║      ░ ■ Formalized the "Owner-Driven Injection" pattern in `ARCHITECTURE.txt`.║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.6.0] - DYNAMIC ENCOUNTERS - 08/11/2025                 ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version introduces dynamic multi-phase boss encounters, minion     ║
║      support, widescreen compatibility, and comprehensive visual and         ║
║      performance improvements to create engaging, scalable combat scenarios. ║
║                                                                              ║
║   MULTI-PHASE BOSS ENCOUNTERS & MINION SUPPORT                               ║
║   Implemented a dynamic, data-driven combat system allowing for multi-phase  ║
║   boss fights, new minion types, and reusable attack components.             ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a dynamic, three-phase boss fight where bosses become   ║
║      ░   more aggressive by using different `AttackPattern` resources as     ║
║      ░   health decreases.                                                   ║
║      ░ ■ Introduced an `ArmorComponent` to support invulnerable attack states║
║      ░   such as a new high-speed "armored lunge" attack.                    ║
║      ░ ■ Implemented a "Turret" minion enemy system, proving the reusability ║
║      ░   of the unified component and state machine architecture.            ║
║      ░ ■ Added real-time phase indicator icons to the Game HUD.              ║
║   █  Changed                                                                 ║
║      ░ ■ The `HealthComponent` was upgraded to detect health threshold       ║
║      ░   crossings, emitting signals to drive the new phase transitions.     ║
║      ░ ■ The encounter system now supports spawning lists of minions from    ║
║      ░   level layout files in addition to the main boss.                    ║
║                                                                              ║
║   WIDESCREEN SUPPORT & DYNAMIC ARENA SCALABILITY                             ║
║   Overhauled the rendering and level generation systems to support modern    ║
║   widescreen aspect ratios and dynamically sized arenas.                     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Created a `CameraManager` and `GridUtils` singleton to decouple all ║
║      ░   game logic from screen resolution, allowing the camera to fit any   ║
║      ░   arena size.                                                         ║
║      ░ ■ Enhanced `TerrainBuilder` to procedurally fill the entire camera    ║
║      ░   viewport with background tiles for seamless, scalable play areas.   ║
║   █  Changed                                                                 ║
║      ░ ■ Project display settings were updated to widescreen 16:9 (1920x1080)║
║      ░ ■ Procedural UI menus were refactored to use `Container` nodes for    ║
║      ░   robust resizing behavior across different aspect ratios.            ║
║                                                                              ║
║   CORE SYSTEMS HARDENING                                                     ║
║   Improved the stability and reliability of the `Sequencer`, `ObjectPool`,   ║
║   and `EventBus` to prevent state bugs, memory leaks, and race conditions.   ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Hardened the `Sequencer` by returning a `SequenceHandle`, allowing  ║
║      ░   cinematic sequences to be safely cancelled during scene transitions.║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a potential memory leak in the `EventBus` by implementing a║
║      ░   self-cleaning mechanism that prunes dead subscriptions.             ║
║      ░ ■ Corrected `async`/`await` errors in the `Sequencer` to ensure reliable║
║      ░   execution of cinematic events.                                      ║
║      ░ ■ Fixed a bug where projectiles persisted across scenes by adding a   ║
║      ░   global reset function to the `ObjectPool`.                          ║
║                                                                              ║
║   CRITICAL BUG FIXES & STABILIZATION                                         ║
║   Resolved a series of high-impact bugs related to combat logic, entity      ║
║   state, and object pooling to create a more stable gameplay experience.     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a "zombie attack" bug by adding an `_is_dead` flag to      ║
║      ░   prevent the boss from firing projectiles after dying.               ║
║      ░ ■ Fixed a critical bug where turrets stopped firing by refactoring    ║
║      ░   their state machine logic to be continuous rather than one-shot.    ║
║      ░ ■ Ensured minion projectiles are correctly returned to the `ObjectPool`║
║      ░   instead of being deleted, preventing performance degradation.       ║
║      ░ ■ Fixed a race condition that could prevent the victory screen from   ║
║      ░   triggering by moving the win logic to the global `EventBus`.        ║
║      ░ ■ Replaced in-world `ColorRect` visuals with `Polygon2D` nodes to     ║
║      ░   prevent rendering conflicts with debug collision shapes.            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██          [0.5.0] - ARCHITECTURAL UNIFICATION - 08/10/2025            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes a foundational architectural refactor, unifying  ║
║      the player and boss state machines, introducing a robust interface-based║
║      damage system, and fully decoupling all entity components to create a   ║
║      highly scalable and maintainable codebase.                              ║
║                                                                              ║
║   ENTITY ARCHITECTURE UNIFICATION                                            ║
║   Unified the Player and Boss architectures under a single, reusable State   ║
║   Machine and Component pattern, adhering to Dependency Inversion.           ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState` to║
║      ░   unify all entity logic, removing duplicated code.                   ║
║      ░ ■ Refactored both the Player and BaseBoss to use the new `BaseStateMachine`,║
║      ░   simplifying their core scripts into pure orchestrators.             ║
║      ░ ■ Established a formal `IComponent` interface contract (`setup`/`teardown`)║
║      ░   and decoupled all components by injecting dependencies from the owner.
║      ░ ■ Refactored the Player's state machine to load state scripts at runtime
║      ░   instead of using `preload()`, breaking a brittle dependency cycle.  ║
║                                                                              ║
║   DATA-DRIVEN SYSTEMS & API STANDARDIZATION                                  ║
║   Overhauled core systems to be data-driven and established formal, type-safe
║   APIs for damage, configuration, and scene navigation.                      ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Replaced the JSON-based `Config.gd` with a type-safe, `Resource`-based║
║      ░   system (`CombatConfig.tres`, `CombatDB.gd`), improving type safety  ║
║      ░   and enabling direct editor tuning.                                  ║
║      ░ ■ Introduced a robust `IDamageable` interface and a `CombatUtils`     ║
║      ░   singleton to standardize how all damage is applied and received.    ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, removing scattered `get_tree().change_scene` calls.║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource, eliminating║
║      ░   the "dual architecture" of stateful singletons for runtime data.    ║
║      ░ ■ Implemented self-validating property setters in data resources      ║
║      ░   (`PlayerStateData`) to prevent invalid states (e.g., health > max). ║
║                                                                              ║
║   POGO MECHANIC OVERHAUL & BUG FIX                                           ║
║   Resolved a series of critical bugs with the pogo mechanic, unifying its    ║
║   physics and decoupling it from other combat timers.                        ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved complex bugs that made the pogo mechanic unreliable. It now║
║      ░   consistently damages the boss and bounces off projectiles.          ║
║      ░ ■ Unified ground and air pogo logic into a single, physics-driven     ║
║      ░   system that correctly handles all valid bounce surfaces.            ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   for seamless transitions between bouncing and attacking.            ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to destroy projectiles.                       ║
║                                                                              ║
║   CODEBASE HARDENING & STABILIZATION                                         ║
║   Performed a full-codebase sweep to resolve all remaining parse errors,     ║
║   static analysis warnings, and critical race conditions.                    ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Changed                                                                 ║
║      ░ ■ Standardized project structure, renaming scripts to `snake_case` and║
║      ░   reorganizing `src/core` into purpose-driven subdirectories.         ║
║      ░ ■ Added validation to `AssetPaths.gd` and `Settings.gd` to prevent    ║
║      ░   runtime errors from missing files or invalid data.                  ║
║      ░ ■ Cleaned all remaining GDScript static analysis warnings for a clean build.║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors related to the new `CombatConfig`║
║      ░   resource, invalid `class_name` usage, and updated autoload paths.   ║
║      ░ ■ Fixed a critical race condition where invincibility timers for the  ║
║      ░   Player and Boss were being incorrectly assigned.                    ║
║      ░ ■ Implemented robust `teardown` methods in all components and state   ║
║      ░   machines to prevent memory leaks from cyclic references.            ║
║                                                                              ║
║   SPRINT 0 AUDIT & DOCUMENTATION                                             ║
║   Completed and formalized the "Sprint 0" architectural audit, documenting   ║
║   all key design patterns and decisions for future development.              ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Documentation                                                           ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Authored `ADR-001` (Service Locator) and `ADR-002` (Communication Patterns)║
║      ░   to formally document architectural decisions.                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.2.0] - THE ARCHITECTURAL REFACTOR - 08-07-2025          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.1.0] - MIGRATION FROM KAPLAY TO GODOT - 08-05-2025         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝