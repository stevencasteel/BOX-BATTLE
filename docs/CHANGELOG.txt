╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║

║      This version introduces a complete, professional-grade Continuous       ║
║      Integration and Deployment (CI/CD) pipeline. The build, packaging,      ║
║      and release process for all target platforms is now fully automated,    ║
║      ensuring consistent, repeatable, and error-free distributions.          ║
║                                                                              ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Implemented a new, multi-job GitHub Actions workflow defined in     ║
║      ░   `.github/workflows/main.yml`. This pipeline automates two key       ║
║      ░   development cycles:                                                 ║
║      ░   - **Development Builds:** On every push to the `main` branch, the   ║
║      ░     workflow automatically compiles the game for all target platforms ║
║      ░     and saves the results as downloadable `Artifacts` for internal    ║
║      ░     testing and validation.                                           ║
║      ░   - **Public Releases:** When a new version tag (e.g., `v0.10.4`) is  ║
║      ░     pushed, the workflow performs all builds and then automatically   ║
║      ░     creates a new, public GitHub Release, attaching the final,        ║
║      ░     polished game packages for the community.                         ║
║      ░ ■ Configured four parallel build jobs to compile and export the game  ║
║      ░   for **Windows**, **macOS**, **Linux**, and **Web**, ensuring that    ║
║      ░   cross-platform compatibility is tested continuously.                ║
║      ░ ■ Solved a critical build dependency by integrating dynamic           ║
║      ░   installation of Godot's export templates. The workflow now downloads ║
║      ░   the official `.tpz` archive, unpacks it, and correctly places the   ║
║      ░   template files in the expected directory, making the CI environment ║
║      ░   fully self-contained and resolving all "template not found" errors. ║
║      ░ ■ Implemented a robust post-build packaging and polishing strategy:   ║
║      ░   - **Asset Packaging:** All build outputs are now automatically      ║
║      ░     packaged into clean, platform-specific `.zip` archives. This      ║
║      ░     resolves the issue of a cluttered release page and provides users 
║      ░     with a simple, single download per platform.                      
║      ░   - **Filename Standardization:** Release assets are now consistently 
║      ░     named to clearly identify their target platform (e.g.,           
║      ░     `BOX-BATTLE-windows.zip`, `BOX-BATTLE-mac.zip`).                   
║      ░ ■ Resolved a critical asset upload conflict caused by filename        ║
║      ░   collisions between the Windows and Linux `.pck` files. This was     ║
║      ░   fixed with a pre-packaging rename step in the workflow.             ║
║      ░ ■ Correctly configured workflow permissions by adding                 ║
║      ░   `permissions: contents: write` to grant the `GITHUB_TOKEN` the      ║
║      ░   necessary scope to publish releases, fixing a `403 Forbidden` error.║
║                                                                              ║









║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 [0.9.0] - NO TITLE YET - 2025-XX-XX                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 


║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script by abstracting its     ║
║      ░   core responsibilities into three new, single-purpose components:    ║
║      ░   - `PlayerPhysicsComponent`: Now exclusively handles `move_and_slide`, gravity, and contact damage.
║      ░   - `PlayerAbilityComponent`: Manages the activation logic for all player actions (dash, heal, attack).
║      ░   - `PlayerResourceComponent`: Manages the economy of determination and healing charges.
║      ░ ■ Simplified the `Player` script to act as a pure "Orchestrator,"     ║
║      ░   responsible only for initializing components and handling signals.  ║
║      ░   The main `_physics_process` loop has been removed from `player.gd`. ║
║      ░ ■ Formalized the `IComponent` and `IDamageable` interface contracts   ║
║      ░   and applied them consistently across all relevant components.       ║
║                                                                              ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established and applied a formal, project-wide cosmetic standard to ║
║      ░   every script file, standardizing layout, naming, and formatting.    ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all classes, methods, ║
║      ░   and variables, providing proper in-editor tooltips and integrated help.║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the entire codebase to improve static safety.         ║
║      ░ ■ Enhanced shader pre-warming to include entity actions, significantly║
║      ░   reducing first-action stutter at the start of a match.              ║
║                                                                              ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted all obsolete arena baking and layout scripts (`ArenaBakerTest`,
║      ░   `ArenaStage`, `arena_00_layout.gd`, `arena_00_encounter.gd`).       ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved all parse errors and static analysis warnings, including   ║
║      ░   autoload name collisions, incorrect static calls, and missing `@tool`
║      ░   annotations, for a completely clean build.                          ║
║                                                                              ║






║                                                                              ║
║      This version completes a full-scale refactor of the entire codebase to  ║
║      enhance modularity and establish a strict, project-wide code style for  ║
║      readability, consistency, and in-editor documentation.                  ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script by abstracting its     ║
║      ░   core responsibilities into three new, single-purpose components:    ║
║      ░   - `PlayerPhysicsComponent`: Now exclusively handles `move_and_slide`, gravity, and contact damage.
║      ░   - `PlayerAbilityComponent`: Manages the activation logic for all player actions (dash, heal, attack).
║      ░   - `PlayerResourceComponent`: Manages the economy of determination and healing charges.
║      ░ ■ Simplified the `Player` script to act as a pure "Orchestrator,"     ║
║      ░   responsible only for initializing components and handling signals.  ║
║      ░   The main `_physics_process` loop has been removed from `player.gd`. ║
║                                                                              ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established and applied a formal, project-wide cosmetic standard to ║
║      ░   every script file. All scripts now follow a consistent layout:      ║
║      ░   file path header, docstring, signals, enums, constants, exports,    ║
║      ░   variables, lifecycle methods, public methods, and signal handlers.  ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all classes, methods, ║
║      ░   and variables, providing proper in-editor tooltips and integrated help.║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the entire codebase to improve static safety.         ║
║                                                                              ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted the obsolete `arena_00_encounter.gd` and `arena_00_layout.gd`║
║      ░   scripts, which were fully replaced by the `.tres` resource system.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a fundamental architectural conflict by removing `class_name`║
║      ░   declarations from all autoloaded singletons, fixing a cascade of    ║
║      ░   "hides an autoload singleton" parse errors.                          ║
║      ░ ■ Resolved all `MISSING_TOOL` warnings by removing the erroneous      ║
║      ░   `@tool` annotation from the abstract `BaseState` class.             ║
║      ░ ■ Corrected an invalid `static` function call in `base_boss.gd` by    ║
║      ░   adding the missing `static` keyword to `SceneValidator.gd`.         ║
║      ░ ■ Corrected all remaining `STATIC_CALLED_ON_INSTANCE` warnings by     ║
║      ░   using the correct script-class syntax for static method calls.      ║
║      ░ ■ Fixed a parse error in `HealthComponent` caused by an invalid       ║
║      ░   `get()` call with a default parameter on a Resource.                ║
║      ░ ■ Resolved a variable scoping error in `base_boss.gd` after renaming  ║
║      ░   the `player` reference to `_player`.                                ║
║                                                                              ║



-------


║      This  completes a major refactor of the Player entity to enhance ║
║      modularity and establishes a strict, project-wide code style standard   ║
║      to improve readability, consistency, and in-editor documentation.       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script by abstracting its     ║
║      ░   core responsibilities into three new, single-purpose components:    ║
║      ░   - `PlayerPhysicsComponent`: Now exclusively handles `move_and_slide`, gravity, and contact damage detection.
║      ░   - `PlayerAbilityComponent`: Manages the activation logic and rules for all player actions (dash, heal, attack).
║      ░   - `PlayerResourceComponent`: Manages the "economy" of determination and healing charges.
║      ░ ■ Simplified the `Player` script to act as a pure "Orchestrator,"     ║
║      ░   responsible only for initializing components and handling signals.  ║
║      ░   The main `_physics_process` loop has been removed from `player.gd`. ║
║                                                                              ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established a formal, project-wide cosmetic restructuring standard. ║
║      ░   All scripts now follow a consistent layout: file path header,       ║
║      ░   docstring, signals, enums, constants, exports, variables, lifecycle ║
║      ░   methods, public methods, private methods, and signal handlers.      ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all key classes,      ║
║      ░   functions, and variables, providing proper in-editor tooltips and   ║
║      ░   integrated help documentation.                                      ║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the refactored player scripts to improve static safety.║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved all static analysis warnings introduced by the refactor,   ║
║      ░   including `UNUSED_PARAMETER`, `UNUSED_SIGNAL`, and                  ║
║      ░   `STATIC_CALLED_ON_INSTANCE` errors in the player components.        ║
║                                                                              ║

-------

║   █  Architectural Changes                                                   ║
║      ░ ■ Abstracted the input system by refactoring `InputComponent` to use a║
║      ░   command buffer. All player states now read from this buffer         ║
║      ░   instead of polling the global `Input` singleton, fully decoupling   ║
║      ░   game logic from hardware input.                                     ║
║      ░ ■ Centralized core physics logic by creating an `apply_gravity`       ║
║      ░   helper function on the Player node. Duplicated gravity calculations ║
║      ░   were removed from all relevant states, adhering to the DRY principle.║
║      ░ ■ Established a new `FXManager` singleton to serve as a dedicated     ║
║      ░   subsystem for "game feel" effects. This separates purely aesthetic  ║
║      ░   feedback (like hit-stop) from core gameplay components, improving   ║
║      ░   modularity and adhering to SRP.                                     ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a toggleable Developer Debug Overlay (F1) that displays ║
║      ░   the player's real-time state and velocity, significantly speeding up║
║      ░   the debugging and tuning process.                                   ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a crash in `game.gd` caused by calling an `Input` singleton║
║      ░   method on an `InputEvent` object in the `_unhandled_input` function.║
║                                                                              ║

-------


   █  Editor & Tooling
      ░ ■ Successfully created a proof-of-concept "baking" tool that can
      ░   procedurally generate a permanent tree of `ColorRect` nodes from a
      ░   `LevelLayout` resource. This achieved the goal of a WYSIWYG editor
      ░   preview for our data-driven levels and validated the workflow of
      ░   generating scene content from `@tool` scripts. This success paves
      ░   the way for a final migration to a more robust, native `TileMap` workflow.

-------


   █  Code Quality & Tooling
      ░ ■ Improved clarity by renaming variables in core systems (`GameManager`,
      ░   `ArenaBuilder`, etc.) to accurately reflect the new data-driven
      ░   architecture (e.g., `encounter_script_path` -> `encounter_path`).
      ░ ■ Enhanced the designer workflow by adding `@export_group` annotations
      ░   to the `EncounterData` resource, organizing its properties into
      ░   clean, collapsible sections in the Godot Inspector.
      ░ ■ Added a configuration warning system to the `LevelLayout` resource.
      ░   This `@tool` script now automatically checks if all rows in the
      ░   terrain data have the same length and will notify the editor if an
      ░   invalid layout is detected.

--------------------

   █  Architectural Changes
      ░ ■ Completed a major refactor of the encounter and level definition
      ░   system. All arena data has been moved from hardcoded `.gd` scripts
      ░   into new, data-driven custom resources (`EncounterData.tres`,
      ░   `LevelLayout.tres`).
      ░ ■ The `ArenaBuilder` and `LevelParser` have been updated to be fully
      ░   data-driven, loading and parsing these new `.tres` files at runtime.
      ░   This decouples level design from game logic and makes creating new
      ░   encounters a code-free, designer-friendly process.

   █  Removed
      ░ ■ Deleted the obsolete `arena_00_encounter.gd` and `arena_00_layout.gd`
      ░   scripts, as their data is now stored in `.tres` resources.

   █  Editor & Tooling
      ░ ■ **[Deferred]** An attempt was made to create a universal `@tool` scene
      ░   (`ArenaStage`) that would visually render `LevelLayout` data directly
      ░   in the 2D editor. Both custom drawing (`_draw`) and programmatic
      ░   `TileMap` generation were explored. The feature has been deferred
      ░   due to unresolved, deep-seated engine errors related to parsing
      ░   programmatically-generated `TileSet` resources in a pure code-first,
      ░   non-editor workflow. The runtime implementation remains stable and unaffected.

║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 [0.8.0] - NO TITLE YET - 2025-08-14                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║


 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Completed a full-scale UI refactor, migrating the entire menu
      ░   system to a new, scene-based architecture. All menus now exist as
      ░   self-contained scenes in a new `src/scenes/menus` directory,
      ░   built with robust Container nodes for consistent, editor-friendly layout.
      ░ ■ Deprecated and removed the `GlobalHud` autoload. Its functionality
      ░   was replaced by a new, reusable `MuteButton` component, which is
      ░   now instanced directly in each menu scene, improving encapsulation.
      ░ ■ Formalized the project's directory structure by creating dedicated
      ░   top-level scene folders (`menus`, `game_over`, `victory`), clarifying
      ░   the distinction between primary game states and reusable UI components.

   █  Added
      ░ ■ Created new, rebuilt versions of all menu screens (Title, Options,
      ░   Sound, Controls, Credits) using the new component-based architecture.
      ░ ■ Implemented `@tool` scripts across all new UI scenes, making them
      ░   fully visible and editable within the Godot editor.

   █  Changed
      ░ ■ Overhauled the `game_over` and `victory` screens, upgrading them to
      ░   the new `StyledMenuItem` component and modern scene structure.
      ░ ■ Standardized the naming convention for all UI-related assets (audio,
      ░   fonts, sprites) to a consistent `[type]_[context]_[descriptor]`
      ░   pattern (e.g., `music_menu_loop.mp3`).

   █  Removed
      ░ ■ Deleted the entire legacy `src/ui/screens` directory and all of its
      ░   obsolete, procedurally-generated menu files.
      ░ ■ Deleted the now-empty `src/scenes/dev` directory.
      ░ ■ Removed the obsolete `GlobalHud` scene and script files.
      ░ ■ Deleted all legacy `menu-item-*.png` sprite assets, which are no
      ░   longer used by the new procedurally drawn buttons.

   █  Fixed
      ░ ■ Permanently resolved all persistent `invalid UID` warnings by
      ░   manually re-saving all refactored scenes, forcing Godot to update
      ░   its asset database and cache. The project now runs with a clean log.
      ░ ■ Corrected all remaining script errors caused by the asset rename by
      ░   updating font and audio path constants in all components.

 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Deprecated the `GlobalHud` autoload in favor of a new, reusable
      ░   `GuiMuteButton` component placed directly in scenes. This completes
      ░   the shift to a fully component-based, scene-driven UI architecture,
      ░   eliminating a piece of legacy global state.

   █  Added
      ░ ■ Rebuilt and connected the entire menu flow (Title, Options, Sound,
      ░   Controls, Credits) using the new scene-based architecture.
      ░ ■ Implemented `@tool` scripts for all new menus, allowing them to be
      ░   visually rendered and laid out directly in the Godot editor.
      ░ ■ Added the new `GuiMuteButton` component to all menu screens for a
      ░   consistent user experience.

   █  Fixed
      ░ ■ Resolved a critical state synchronization bug in `MenuManager` that
      ░   caused unpredictable keyboard navigation after using the mouse. The
      ░   manager now correctly syncs its state with Godot's focus system.
      ░ ■ Hardened menu navigation by preventing non-button UI elements (sliders,
      ░   checkboxes, mute icon) from being part of the keyboard focus chain.
      ░ ■ Corrected the application's entry point to start the menu music
      ░   globally, ensuring it plays seamlessly across all menu scenes.
      ░ ■ Resolved a scene-loading crash caused by an incorrect `@onready`
      ░   variable in the new options menu script.

 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Began the official "UI Overhaul" by creating a new prototype title
      ░   screen (`gui_title_screen.tscn`) that is fully scene-based and
      ░   leverages Godot's Container nodes for a robust, designer-friendly
      ░   layout, establishing the pattern for all future menu development.

   █  Added
      ░ ■ Created `StyledMenuItem`, a new reusable, component-based menu item
      ░   that is procedurally drawn and highly configurable (size, text, font size).
      ░ ■ Created `LogoDisplay`, a new reusable component for interactive
      ░   footer logos with hover and press feedback.

   █  Fixed
      ░ ■ Resolved a critical input bug where only the first of several UI
      ░   components would correctly process mouse clicks. Components now use
      ░   the correct `mouse_filter` property for reliable, engine-idiomatic
      ░   input handling.


 - - - start separating via the time it was submitted - - -

   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   state machine, fully decoupling all states from the global `CombatDB`
      ░   singleton. States now receive their configuration through the
      ░   `PlayerStateData` resource, which is populated by the `Player` owner
      ░   node. This completes a critical step in adhering to the Dependency
      ░   Inversion Principle, making states more modular and testable.
      ░ ■ Hardened system contracts by creating a new `Identifiers` singleton
      ░   to hold all string-based group names and pool keys. All scripts
      ░   were refactored to use these constants, eliminating the risk of
      ░   runtime errors from string typos and improving code safety.
      ░ ■ Refactored the `_ready` functions in `Player` and `BaseBoss` to
      ░   adhere to the Single Responsibility Principle. All initialization
      ░   logic is now delegated to smaller, clearly named helper methods,
      ░   improving code readability and maintainability.

   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   and BaseBoss state machines. All states are now fully decoupled from
      ░   global singletons and receive their configuration through their
      ░   respective data resources (`PlayerStateData`, `BossStateData`).
      ░ ■ Formalized the project's damage system by creating typed `Resource`
      ░   contracts (`DamageInfo`, `DamageResult`), replacing the previous
      ░   use of primitive integers and untyped Dictionaries for robust,
      ░   self-documenting, and type-safe combat interactions.
      ░ ■ Standardized all entity components, including `BaseStateMachine` and
      ░   `ArmorComponent`, to formally implement the `ComponentInterface`
      ░   contract. This unifies the lifecycle and setup for all entity
      ░   behaviors across the entire project.
      ░ ■ Refined `CombatUtils` to adhere to SRP; its sole responsibility is
      ░   now finding a valid `IDamageable` target.

   █  Fixed
      ░ ■ Resolved a visual bug where entity hit-flash colors would not reset
      ░   correctly. The `HealthComponent` now uses a more robust metadata-
      ░   based system to store and restore original entity colors.
      ░ ■ Fixed a "zombie minion" bug where Turrets would continue to fire
      ░   after the boss was defeated. The game director now deactivates all
      ░   minions upon boss death.
      ░ ■ Corrected a parse error in `Turret.gd` caused by an incorrect setup
      ░   call signature after the `BaseStateMachine` was refactored.
      ░ ■ Eliminated `STATIC_CALLED_ON_INSTANCE` warnings by refactoring all
      ░   calls to `CombatUtils.find_damageable` to use the correct static
      ░   script-based syntax.


 - - - start separating via the time it was submitted - - -

   █  Fixed
      ░ ■ Resolved a visual bug where the boss's hit-flash color would not
      ░   reset correctly. The `HealthComponent` now uses a more robust
      ░   metadata-based system to store and restore original entity colors.
      ░ ■ Fixed a bug where Turret minions would continue to fire after the
      ░   boss was defeated. The central `game.gd` script now finds and calls a
      ░   new `deactivate()` method on all remaining minions upon boss death.
      ░ ■ Resolved a critical autoload naming conflict caused by `class_name`
      ░   hiding the `Identifiers` singleton, which previously caused a cascade
      ░   of parse errors across the entire project.

 - - - start separating via the time it was submitted - - -


      ░ ■ Extended the "Owner-Driven Injection" pattern to the `BaseBoss`
      ░   and its state machine. All boss states are now fully decoupled
      ░   from global singletons, mirroring the clean architecture of the
      ░   Player and unifying the entity design across the project.
