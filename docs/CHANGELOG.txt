╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██                 [0.8.0] - NO TITLE YET - 2025-XX-XX                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║ 
║                                                                              ║





 - - - start separating via the time it was submitted - - -




   █  Architectural Changes
      ░ ■ Deprecated the `GlobalHud` autoload in favor of a new, reusable
      ░   `GuiMuteButton` component placed directly in scenes. This completes
      ░   the shift to a fully component-based, scene-driven UI architecture,
      ░   eliminating a piece of legacy global state.

   █  Added
      ░ ■ Rebuilt and connected the entire menu flow (Title, Options, Sound,
      ░   Controls, Credits) using the new scene-based architecture.
      ░ ■ Implemented `@tool` scripts for all new menus, allowing them to be
      ░   visually rendered and laid out directly in the Godot editor.
      ░ ■ Added the new `GuiMuteButton` component to all menu screens for a
      ░   consistent user experience.

   █  Fixed
      ░ ■ Resolved a critical state synchronization bug in `MenuManager` that
      ░   caused unpredictable keyboard navigation after using the mouse. The
      ░   manager now correctly syncs its state with Godot's focus system.
      ░ ■ Hardened menu navigation by preventing non-button UI elements (sliders,
      ░   checkboxes, mute icon) from being part of the keyboard focus chain.
      ░ ■ Corrected the application's entry point to start the menu music
      ░   globally, ensuring it plays seamlessly across all menu scenes.
      ░ ■ Resolved a scene-loading crash caused by an incorrect `@onready`
      ░   variable in the new options menu script.










   █  Architectural Changes
      ░ ■ Began the official "UI Overhaul" by creating a new prototype title
      ░   screen (`gui_title_screen.tscn`) that is fully scene-based and
      ░   leverages Godot's Container nodes for a robust, designer-friendly
      ░   layout, establishing the pattern for all future menu development.

   █  Added
      ░ ■ Created `StyledMenuItem`, a new reusable, component-based menu item
      ░   that is procedurally drawn and highly configurable (size, text, font size).
      ░ ■ Created `LogoDisplay`, a new reusable component for interactive
      ░   footer logos with hover and press feedback.

   █  Fixed
      ░ ■ Resolved a critical input bug where only the first of several UI
      ░   components would correctly process mouse clicks. Components now use
      ░   the correct `mouse_filter` property for reliable, engine-idiomatic
      ░   input handling.










   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   state machine, fully decoupling all states from the global `CombatDB`
      ░   singleton. States now receive their configuration through the
      ░   `PlayerStateData` resource, which is populated by the `Player` owner
      ░   node. This completes a critical step in adhering to the Dependency
      ░   Inversion Principle, making states more modular and testable.
      ░ ■ Hardened system contracts by creating a new `Identifiers` singleton
      ░   to hold all string-based group names and pool keys. All scripts
      ░   were refactored to use these constants, eliminating the risk of
      ░   runtime errors from string typos and improving code safety.
      ░ ■ Refactored the `_ready` functions in `Player` and `BaseBoss` to
      ░   adhere to the Single Responsibility Principle. All initialization
      ░   logic is now delegated to smaller, clearly named helper methods,
      ░   improving code readability and maintainability.

   █  Architectural Changes
      ░ ■ Enforced the "Owner-Driven Injection" pattern for the entire Player
      ░   and BaseBoss state machines. All states are now fully decoupled from
      ░   global singletons and receive their configuration through their
      ░   respective data resources (`PlayerStateData`, `BossStateData`).
      ░ ■ Formalized the project's damage system by creating typed `Resource`
      ░   contracts (`DamageInfo`, `DamageResult`), replacing the previous
      ░   use of primitive integers and untyped Dictionaries for robust,
      ░   self-documenting, and type-safe combat interactions.
      ░ ■ Standardized all entity components, including `BaseStateMachine` and
      ░   `ArmorComponent`, to formally implement the `ComponentInterface`
      ░   contract. This unifies the lifecycle and setup for all entity
      ░   behaviors across the entire project.
      ░ ■ Refined `CombatUtils` to adhere to SRP; its sole responsibility is
      ░   now finding a valid `IDamageable` target.

   █  Fixed
      ░ ■ Resolved a visual bug where entity hit-flash colors would not reset
      ░   correctly. The `HealthComponent` now uses a more robust metadata-
      ░   based system to store and restore original entity colors.
      ░ ■ Fixed a "zombie minion" bug where Turrets would continue to fire
      ░   after the boss was defeated. The game director now deactivates all
      ░   minions upon boss death.
      ░ ■ Corrected a parse error in `Turret.gd` caused by an incorrect setup
      ░   call signature after the `BaseStateMachine` was refactored.
      ░ ■ Eliminated `STATIC_CALLED_ON_INSTANCE` warnings by refactoring all
      ░   calls to `CombatUtils.find_damageable` to use the correct static
      ░   script-based syntax.





   █  Fixed
      ░ ■ Resolved a visual bug where the boss's hit-flash color would not
      ░   reset correctly. The `HealthComponent` now uses a more robust
      ░   metadata-based system to store and restore original entity colors.
      ░ ■ Fixed a bug where Turret minions would continue to fire after the
      ░   boss was defeated. The central `game.gd` script now finds and calls a
      ░   new `deactivate()` method on all remaining minions upon boss death.
      ░ ■ Resolved a critical autoload naming conflict caused by `class_name`
      ░   hiding the `Identifiers` singleton, which previously caused a cascade
      ░   of parse errors across the entire project.







      ░ ■ Extended the "Owner-Driven Injection" pattern to the `BaseBoss`
      ░   and its state machine. All boss states are now fully decoupled
      ░   from global singletons, mirroring the clean architecture of the
      ░   Player and unifying the entity design across the project.
