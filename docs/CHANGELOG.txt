╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ╚═╗
║   ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗██╗      ██████╗  ██████╗  ║
║  ██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝██║     ██╔═══██╗██╔════╝  ║
║  ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗  ██║     ██║   ██║██║  ███╗ ║
║  ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝  ██║     ██║   ██║██║   ██║ ║
║  ╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝ ║
║   ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝  ║
║                                                                              ╔═╝
║                  A log of all notable changes to the project.                ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║                                                                              ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██         [0.10.0] - CI & DEPLOYMENT AUTOMATION - XX/XX/XXXX           ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║




















║   AUTOMATED TESTING & CORE SYSTEM HARDENING                                  ║
║   Integrated the Godot Unit Test (GUT) framework to establish an automated   ║
║   testing pipeline and used it to find and fix critical bugs.                ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Integrated the Godot Unit Test (GUT) framework, establishing the    ║
║      ░   foundation for automated testing.                                   ║
║      ░ ■ Created the first suite of unit tests for the `ObjectPool` singleton,║
║      ░   defining and verifying its core functionality.                      ║
║   █  Fixed                                                                   ║
║      ░ ■ Used the new unit tests to discover and resolve two critical bugs in║
║      ░   `ObjectPool` related to instance reuse logic and state management.  ║
║      ░ ■ Resolved physics callback errors by restoring the deferred deactivation║
║      ░   of pooled objects, preventing crashes when objects are returned.    ║
║      ░ ■ Hardened the unit tests to correctly handle asynchronous behavior,  ║
║      ░   ensuring they accurately reflect in-game conditions.                ║
║                                                                              ║
║   AUTOMATED BUILD & RELEASE WORKFLOW                                         ║
║   Implemented a multi-job GitHub Actions workflow to automate the entire     ║
║   build, test, and release cycle for both development and public releases.   ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Implemented a new GitHub Actions workflow (`main.yml`) that automatically║
║      ░   builds and packages the game for all target platforms.              ║
║      ░ ■ The pipeline automates two key cycles:                              ║
║      ░   - On push to `main`: Compiles builds and saves them as downloadable ║
║      ░     `Artifacts` for internal testing.                                 ║
║      ░   - On version tag (`v*`): Performs all builds and creates a new, public║
║      ░     GitHub Release with the final game packages attached.             ║
║                                                                              ║
║   CROSS-PLATFORM EXPORT & DEPENDENCY MANAGEMENT                              ║
║   Configured the pipeline for full cross-platform compatibility and solved   ║
║   critical dependencies to make the CI environment fully self-contained.     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Configured four parallel build jobs to compile and export for       ║
║      ░   Windows, macOS, Linux, and Web, ensuring continuous compatibility.  ║
║      ░ ■ Solved a critical build dependency by automating the download and   ║
║      ░   installation of Godot's export templates within the CI environment. ║
║                                                                              ║
║   ASSET PACKAGING & PUBLISHING                                               ║
║   Implemented a robust post-build strategy for packaging and publishing      ║
║   release assets, resolving several critical deployment errors.              ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  CI & Tooling                                                            ║
║      ░ ■ Standardized release assets by packaging all builds into clean,     ║
║      ░   platform-specific `.zip` archives with consistent filenames.        ║
║      ░ ■ Fixed GitHub Release publishing by resolving asset filename         ║
║      ░   collisions and correcting workflow permissions (`403 Forbidden` error).║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██         [0.9.0] - CODEBASE STANDARDIZATION - 08/15/2025              ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes a full-scale refactor of the entire codebase to  ║
║      enhance modularity and establish a strict, project-wide code style for  ║
║      readability, consistency, and in-editor documentation.                  ║
║                                                                              ║
║   PLAYER COMPONENT REFACTOR                                                  ║
║   Deconstructed the monolithic Player script into a collection of single-    ║
║   responsibility components, transforming the Player into a pure orchestrator.║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored `player.gd` by abstracting its core duties into three new,║
║      ░   single-purpose components:                                          ║
║      ░   - `PlayerPhysicsComponent`: Handles `move_and_slide` and contact damage.║
║      ░   - `PlayerAbilityComponent`: Manages activation logic for actions.   ║
║      ░   - `PlayerResourceComponent`: Manages determination and healing charges.║
║      ░ ■ The main `_physics_process` loop has been removed from `player.gd`. ║
║      ░ ■ Formalized the `IComponent` and `IDamageable` interface contracts   ║
║      ░   and applied them consistently across all relevant components.       ║
║                                                                              ║
║   PROJECT-WIDE CODE QUALITY & STYLE STANDARDIZATION                          ║
║   Established and applied a formal cosmetic and documentation standard to    ║
║   every script file, enforcing type safety and in-editor documentation.      ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Code Quality & Tooling                                                  ║
║      ░ ■ Established a formal, project-wide script structure standard (header,║
║      ░   docstring, signals, enums, exports, methods, etc.).                 ║
║      ░ ■ Implemented Godot-style docstrings (`##`) for all classes and methods,║
║      ░   providing in-editor tooltips and integrated help.                   ║
║      ░ ■ Enforced full type hinting for all function arguments and return    ║
║      ░   values across the entire codebase to improve static safety.         ║
║                                                                              ║
║   DATA-DRIVEN ENCOUNTER REFACTOR                                             ║
║   Completed the migration of level and encounter definitions from scripts to ║
║   data-driven, designer-friendly Resource files.                             ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Moved all arena data from hardcoded `.gd` scripts into new          ║
║      ░   `EncounterData.tres` and `LevelLayout.tres` custom resources.       ║
║      ░ ■ Updated `ArenaBuilder` and `LevelParser` to be fully data-driven by ║
║      ░   loading and parsing these new `.tres` files at runtime.             ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted all obsolete encounter and layout `.gd` scripts.            ║
║                                                                              ║
║   SYSTEM ABSTRACTION & DEV TOOLING                                           ║
║   Decoupled core systems, improved designer workflows, and added a robust    ║
║   real-time debugging tool.                                                  ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Abstracted the input system to use a command buffer, fully          ║
║      ░   decoupling game logic from the global `Input` singleton.            ║
║      ░ ■ Established a new `FXManager` singleton to serve as a dedicated     ║
║      ░   subsystem for "game feel" effects like hit-stop and screen shake.   ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a toggleable Developer Debug Overlay (F1) that displays ║
║      ░   the player's real-time state, velocity, and input buffer.           ║
║   █  Editor & Tooling                                                        ║
║      ░ ■ Added a configuration warning system to the `LevelLayout` resource  ║
║      ░   that notifies designers in-editor if a layout is invalid.           ║
║                                                                              ║
║   STABILIZATION & CLEAN BUILD                                                ║
║   Resolved all remaining parse errors and static analysis warnings for a     ║
║   completely clean build, including fundamental architectural conflicts.     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a fundamental conflict by removing `class_name` from all   ║
║      ░   autoload singletons, fixing a cascade of parse errors.              ║
║      ░ ■ Resolved all `MISSING_TOOL`, `STATIC_CALLED_ON_INSTANCE`, and other ║
║      ░   static analysis warnings for a completely clean build.              ║
║      ░ ■ Enhanced the shader pre-warming system to include entity actions,   ║
║      ░   significantly reducing first-action stutter at the start of a match.║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.8.0] - UI & ARCHITECTURE OVERHAUL - 08/14/2025          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes two major initiatives: a full-scale refactor of  ║
║      the entire UI system to a modern, scene-based architecture, and a deep  ║
║      enforcement of the project's core architectural patterns to enhance     ║
║      modularity and type safety.                                             ║
║                                                                              ║
║   UI SYSTEM OVERHAUL                                                         ║
║   Migrated the entire legacy UI from a procedural system to a new, scene-based║
║   architecture built on reusable, editor-friendly components.                ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Completed a full UI refactor, moving all menus to self-contained    ║
║      ░   scenes in `src/scenes/menus` that use `Container` nodes for robust layout.║
║      ░ ■ Deprecated and removed the `GlobalHud` autoload, replacing its      ║
║      ░   functionality with a reusable `MuteButton` component.               ║
║   █  Added                                                                   ║
║      ░ ■ Created new reusable, procedurally-drawn UI components, including   ║
║      ░   `StyledMenuItem` and `LogoDisplay`.                                 ║
║      ░ ■ Rebuilt all menu screens (Title, Options, Sound, etc.) as scenes    ║
║      ░   with `@tool` scripts for full in-editor visibility and editing.     ║
║   █  Removed                                                                 ║
║      ░ ■ Deleted the entire legacy `src/ui/screens` directory and all of its ║
║      ░   obsolete, procedurally-generated menu files and assets.             ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a critical state bug in `MenuManager` that caused          ║
║      ░   unpredictable keyboard navigation after mouse use.                  ║
║      ░ ■ Resolved persistent `invalid UID` warnings by re-saving all scenes. ║
║                                                                              ║
║   ARCHITECTURAL PATTERN ENFORCEMENT                                          ║
║   Enforced core architectural patterns across all entities to fully decouple ║
║   state logic from global singletons and formalize data contracts.           ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Enforced the "Owner-Driven Injection" pattern for both Player and   ║
║      ░   Boss state machines, fully decoupling all states from `CombatDB`.   ║
║      ░ ■ Formalized the damage system with typed `DamageInfo` and `DamageResult`║
║      ░   resources, replacing untyped Dictionaries for type-safe combat.     ║
║      ░ ■ Standardized all entity components to formally implement the `IComponent`║
║      ░   contract, unifying their lifecycle and setup methods.               ║
║      ░ ■ Created the `Identifiers` singleton to hold all string-based group  ║
║      ░   names and pool keys, eliminating the risk of runtime errors from typos.║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a "zombie minion" bug where Turrets would continue to fire ║
║      ░   after the boss was defeated.                                        ║
║      ░ ■ Fixed a visual bug where the entity hit-flash color would not reset ║
║      ░   correctly by using a more robust metadata-based system.             ║
║      ░ ■ Eliminated all `STATIC_CALLED_ON_INSTANCE` warnings project-wide.   ║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.7.0] - DATA-DRIVEN ARCHITECTURE - 08/13/2025            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes the transformation to a fully data-driven        ║
║      architecture, implements robust memory management patterns, and         ║
║      enhances the combat system with distance-based mechanics and            ║
║      comprehensive scene validation tools.                                   ║
║                                                                              ║
║   DATA-DRIVEN ARCHITECTURE COMPLETION                                        ║
║   Unified the project's configuration system to be exclusively driven by     ║
║   editor-friendly Resource files, fully decoupling game design from code.    ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Unified the configuration system to be exclusively driven by the    ║
║      ░   `CombatDB` singleton and its `CombatConfig.tres` resource.          ║
║      ░ ■ Refactore`BaseBoss` to be fully data-driven, with attack patterns for║
║      ░   each phase assigned via exported arrays in the Godot Inspector.     ║
║      ░ ■ Converted all gameplay tuning data into editor-friendly Resources   ║
║      ░   with `@export_group` and `@export_range` hints for designers.       ║
║                                                                              ║
║   ENHANCED COMBAT MECHANICS                                                  ║
║   Implemented a more nuanced melee system that rewards player positioning    ║
║   and improves hitbox accuracy for different attack angles.                  ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a two-tier melee hitbox system with distance-based      ║
║      ░   damage calculation, rewarding close-range attacks with higher damage.║
║      ░ ■ The melee hitbox now dynamically changes shape and position for     ║
║      ░   upward attacks, ensuring precise coverage above the player.         ║
║                                                                              ║
║   SYSTEM HARDENING & MEMORY MANAGEMENT                                       ║
║   Improved memory safety and stability by implementing formal teardown       ║
║   patterns and hardening core systems against race conditions.               ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Unified the state machine architecture with formal `teardown` patterns║
║      ░   to prevent memory leaks and cyclic references.                      ║
║      ░ ■ Hardened the `Sequencer` by adding `cancel_all()` to prevent sequences║
║      ░   from running across scene transitions.                              ║
║      ░ ■ Hardened the `ObjectPool` by deferring the deactivation of returned ║
║      ░   instances, preventing same-frame access race conditions.            ║
║                                                                              ║
║   CRITICAL BUG FIXES & STABILIZATION                                         ║
║   Resolved several high-priority bugs related to combat reliability, scene   ║
║   loading, and asset database corruption.                                    ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Hardened the player's pogo attack physics query to be more reliable ║
║      ░   against complex colliders.                                          ║
║      ░ ■ Resolved a critical race condition where the `ArenaBuilder` could   ║
║      ░   finish before the boss was spawned by correctly awaiting a `SequenceHandle`.║
║      ░ ■ Corrected resource loading errors and asset database corruption     ║
║      ░   caused by duplicated UIDs in scene and resource files.              ║
║      ░ ■ Resolved a "modulo by zero" crash in the boss's idle state by       ║
║      ░   adding guard clauses for when no attack patterns are assigned.      ║
║      ░ ■ Resolved a visual regression with the Game HUD's phase indicators.  ║
║                                                                              ║
║   EDITOR TOOLING & DOCUMENTATION                                             ║
║   Improved the development workflow with in-editor validation and formalized ║
║   the project's dependency injection pattern in documentation.               ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Created a central, static `SceneValidator` utility to provide       ║
║      ░   in-editor warnings for misconfigured scenes like `BaseBoss`.        ║
║   █  Documentation                                                           ║
║      ░ ■ Formalized the "Owner-Driven Injection" pattern in `ARCHITECTURE.txt`.║
║                                                                              ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.6.0] - DYNAMIC ENCOUNTERS - 08/11/2025                 ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version introduces dynamic multi-phase boss encounters, minion     ║
║      support, widescreen compatibility, and comprehensive visual and         ║
║      performance improvements to create engaging, scalable combat scenarios. ║
║                                                                              ║
║   MULTI-PHASE BOSS ENCOUNTERS & MINION SUPPORT                               ║
║   Implemented a dynamic, data-driven combat system allowing for multi-phase  ║
║   boss fights, new minion types, and reusable attack components.             ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Added                                                                   ║
║      ░ ■ Implemented a dynamic, three-phase boss fight where bosses become   ║
║      ░   more aggressive by using different `AttackPattern` resources as     ║
║      ░   health decreases.                                                   ║
║      ░ ■ Introduced an `ArmorComponent` to support invulnerable attack states║
║      ░   such as a new high-speed "armored lunge" attack.                    ║
║      ░ ■ Implemented a "Turret" minion enemy system, proving the reusability ║
║      ░   of the unified component and state machine architecture.            ║
║      ░ ■ Added real-time phase indicator icons to the Game HUD.              ║
║   █  Changed                                                                 ║
║      ░ ■ The `HealthComponent` was upgraded to detect health threshold       ║
║      ░   crossings, emitting signals to drive the new phase transitions.     ║
║      ░ ■ The encounter system now supports spawning lists of minions from    ║
║      ░   level layout files in addition to the main boss.                    ║
║                                                                              ║
║   WIDESCREEN SUPPORT & DYNAMIC ARENA SCALABILITY                             ║
║   Overhauled the rendering and level generation systems to support modern    ║
║   widescreen aspect ratios and dynamically sized arenas.                     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Created a `CameraManager` and `GridUtils` singleton to decouple all ║
║      ░   game logic from screen resolution, allowing the camera to fit any   ║
║      ░   arena size.                                                         ║
║      ░ ■ Enhanced `TerrainBuilder` to procedurally fill the entire camera    ║
║      ░   viewport with background tiles for seamless, scalable play areas.   ║
║   █  Changed                                                                 ║
║      ░ ■ Project display settings were updated to widescreen 16:9 (1920x1080)║
║      ░ ■ Procedural UI menus were refactored to use `Container` nodes for    ║
║      ░   robust resizing behavior across different aspect ratios.            ║
║                                                                              ║
║   CORE SYSTEMS HARDENING                                                     ║
║   Improved the stability and reliability of the `Sequencer`, `ObjectPool`,   ║
║   and `EventBus` to prevent state bugs, memory leaks, and race conditions.   ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Hardened the `Sequencer` by returning a `SequenceHandle`, allowing  ║
║      ░   cinematic sequences to be safely cancelled during scene transitions.║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a potential memory leak in the `EventBus` by implementing a║
║      ░   self-cleaning mechanism that prunes dead subscriptions.             ║
║      ░ ■ Corrected `async`/`await` errors in the `Sequencer` to ensure reliable║
║      ░   execution of cinematic events.                                      ║
║      ░ ■ Fixed a bug where projectiles persisted across scenes by adding a   ║
║      ░   global reset function to the `ObjectPool`.                          ║
║                                                                              ║
║   CRITICAL BUG FIXES & STABILIZATION                                         ║
║   Resolved a series of high-impact bugs related to combat logic, entity      ║
║   state, and object pooling to create a more stable gameplay experience.     ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a "zombie attack" bug by adding an `_is_dead` flag to      ║
║      ░   prevent the boss from firing projectiles after dying.               ║
║      ░ ■ Fixed a critical bug where turrets stopped firing by refactoring    ║
║      ░   their state machine logic to be continuous rather than one-shot.    ║
║      ░ ■ Ensured minion projectiles are correctly returned to the `ObjectPool`║
║      ░   instead of being deleted, preventing performance degradation.       ║
║      ░ ■ Fixed a race condition that could prevent the victory screen from   ║
║      ░   triggering by moving the win logic to the global `EventBus`.        ║
║      ░ ■ Replaced in-world `ColorRect` visuals with `Polygon2D` nodes to     ║
║      ░   prevent rendering conflicts with debug collision shapes.            ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██          [0.5.0] - ARCHITECTURAL UNIFICATION - 08/10/2025            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║      This version completes a foundational architectural refactor, unifying  ║
║      the player and boss state machines, introducing a robust interface-based║
║      damage system, and fully decoupling all entity components to create a   ║
║      highly scalable and maintainable codebase.                              ║
║                                                                              ║
║   ENTITY ARCHITECTURE UNIFICATION                                            ║
║   Unified the Player and Boss architectures under a single, reusable State   ║
║   Machine and Component pattern, adhering to Dependency Inversion.           ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Created a reusable, node-based `BaseStateMachine` and `BaseState` to║
║      ░   unify all entity logic, removing duplicated code.                   ║
║      ░ ■ Refactored both the Player and BaseBoss to use the new `BaseStateMachine`,║
║      ░   simplifying their core scripts into pure orchestrators.             ║
║      ░ ■ Established a formal `IComponent` interface contract (`setup`/`teardown`)║
║      ░   and decoupled all components by injecting dependencies from the owner.
║      ░ ■ Refactored the Player's state machine to load state scripts at runtime
║      ░   instead of using `preload()`, breaking a brittle dependency cycle.  ║
║                                                                              ║
║   DATA-DRIVEN SYSTEMS & API STANDARDIZATION                                  ║
║   Overhauled core systems to be data-driven and established formal, type-safe
║   APIs for damage, configuration, and scene navigation.                      ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Replaced the JSON-based `Config.gd` with a type-safe, `Resource`-based║
║      ░   system (`CombatConfig.tres`, `CombatDB.gd`), improving type safety  ║
║      ░   and enabling direct editor tuning.                                  ║
║      ░ ■ Introduced a robust `IDamageable` interface and a `CombatUtils`     ║
║      ░   singleton to standardize how all damage is applied and received.    ║
║      ░ ■ Created a new `SceneManager` autoload to centralize all scene       ║
║      ░   transition logic, removing scattered `get_tree().change_scene` calls.║
║      ░ ■ Refactored `GameManager` to use a `GameStateData` resource, eliminating║
║      ░   the "dual architecture" of stateful singletons for runtime data.    ║
║      ░ ■ Implemented self-validating property setters in data resources      ║
║      ░   (`PlayerStateData`) to prevent invalid states (e.g., health > max). ║
║                                                                              ║
║   POGO MECHANIC OVERHAUL & BUG FIX                                           ║
║   Resolved a series of critical bugs with the pogo mechanic, unifying its    ║
║   physics and decoupling it from other combat timers.                        ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved complex bugs that made the pogo mechanic unreliable. It now║
║      ░   consistently damages the boss and bounces off projectiles.          ║
║      ░ ■ Unified ground and air pogo logic into a single, physics-driven     ║
║      ░   system that correctly handles all valid bounce surfaces.            ║
║      ░ ■ Separated the pogo mechanic from the melee attack cooldown, allowing║
║      ░   for seamless transitions between bouncing and attacking.            ║
║      ░ ■ Corrected the pogo's physics query to include `Area2D` nodes,       ║
║      ░   restoring its ability to destroy projectiles.                       ║
║                                                                              ║
║   CODEBASE HARDENING & STABILIZATION                                         ║
║   Performed a full-codebase sweep to resolve all remaining parse errors,     ║
║   static analysis warnings, and critical race conditions.                    ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Changed                                                                 ║
║      ░ ■ Standardized project structure, renaming scripts to `snake_case` and║
║      ░   reorganizing `src/core` into purpose-driven subdirectories.         ║
║      ░ ■ Added validation to `AssetPaths.gd` and `Settings.gd` to prevent    ║
║      ░   runtime errors from missing files or invalid data.                  ║
║      ░ ■ Cleaned all remaining GDScript static analysis warnings for a clean build.║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors related to the new `CombatConfig`║
║      ░   resource, invalid `class_name` usage, and updated autoload paths.   ║
║      ░ ■ Fixed a critical race condition where invincibility timers for the  ║
║      ░   Player and Boss were being incorrectly assigned.                    ║
║      ░ ■ Implemented robust `teardown` methods in all components and state   ║
║      ░   machines to prevent memory leaks from cyclic references.            ║
║                                                                              ║
║   SPRINT 0 AUDIT & DOCUMENTATION                                             ║
║   Completed and formalized the "Sprint 0" architectural audit, documenting   ║
║   all key design patterns and decisions for future development.              ║
║   ────────────────────────────────────────────────────────────────────────   ║
║   █  Documentation                                                           ║
║      ░ ■ Generated audit reports for singletons, event usage, and config usage.║
║      ░ ■ Authored `ADR-001` (Service Locator) and `ADR-002` (Communication Patterns)║
║      ░   to formally document architectural decisions.                       ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            [0.4.0] - THE COMPONENT REFACTOR - 2025-08-09             ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the migration to a fully component-based entity     ║
║   architecture, enhances performance, and resolves all known bugs for a      ║
║   stable, production-ready foundation.                                       ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Refactored the monolithic `player.gd` script into a component-based ║
║      ░   architecture, adhering to the Single Responsibility Principle.      ║
║      ░ ■ Created a `HealthComponent` to manage all health, damage, and       ║
║      ░   invincibility logic, making it reusable for other entities.         ║
║      ░ ■ Created a `CombatComponent` to centralize player attack logic.      ║
║      ░ ■ Created an `InputComponent` to decouple input polling from the player.║
║      ░ ■ Created a `PlayerStateData` resource to act as a central data       ║
║      ░   container, decoupling state from the Player node itself.            ║
║      ░ ■ Refactored `ArenaBuilder` to be data-driven, reading the layout file║
║      ░   path from a constant in the encounter script, removing brittle      ║
║      ░   string manipulation logic.                                          ║
║      ░ ■ Decoupled `GlobalHUD` from specific menu scenes by making its       ║
║      ░   visibility fully event-driven (`MENU_OPENED`, `MENU_CLOSED`),       ║
║      ░   resolving an Open/Closed Principle violation.                       ║
║      ░ ■ Refactored the monolithic `base_boss.gd` script into a component-   ║
║      ░   based architecture, adhering to SRP and mirroring the Player's design.║
║      ░ ■ Created `BossStateData.gd` resource to act as a central data        ║
║      ░   container, decoupling the boss's state from the node itself.        ║
║                                                                              ║
║   █  Performance                                                             ║
║      ░ ■ Implemented a robust, generic `ObjectPool` singleton to manage      ║
║      ░   reusable nodes like projectiles.                                    ║
║      ░ ■ Refactored Player and Boss to get/return projectiles from the pool, ║
║      ░   eliminating runtime instantiation to prevent GC spikes and stutter. ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored `Sequencer.gd` to use type-safe `SequenceStep` resources ║
║      ░   instead of ad-hoc dictionaries, preventing runtime errors and       ║
║      ░   improving editor autocompletion.                                    ║
║      ░ ■ Refactored `AudioManager.gd` and `GlobalHUD` to be event-driven,    ║
║      ░   subscribing to a new `audio_settings_changed` signal instead of     ║
║      ░   polling for changes every frame.                                    ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a complex circular dependency parse error between the Player║
║      ░   and its new components by fully decoupling them with signals.       ║
║      ░ ■ Fixed a bug where the boss was immune to rapid attacks by giving it ║
║      ░   a unique, shorter invincibility duration in the project config.     ║
║      ░ ■ Fixed a bug where player's body dealt rapid contact damage to the boss.║
║      ░ ■ Unified all damage-dealing logic (melee, pogo, projectile, contact) ║
║      ░   to consistently and correctly interact with the target's HealthComponent.║
║      ░ ■ Fixed a visual bug where the Boss's hit-flash color would not reset ║
║      ░   correctly by ensuring the correct initialization order in `base_boss.gd`.║
║      ░ ■ Resolved an audio stream memory leak on exit by implementing a      ║
║      ░   robust cleanup handler for `NOTIFICATION_WM_CLOSE_REQUEST`.         ║
║      ░ ■ Resolved all `SHADOWED_GLOBAL_IDENTIFIER` warnings by removing      ║
║      ░   unnecessary `preload` calls for scripts with a `class_name`.        ║
║      ░ ■ Resolved a critical physics crash by redesigning the `ObjectPool` to║
║      ░   use a signal-based, non-re-parenting architecture that is immune to ║
║      ░   race conditions.                                                    ║
║      ░ ■ Resolved all memory leaks by implementing proper cleanup in         ║
║      ░   `_exit_tree` for all state machines, components, and singletons.    ║
║      ░ ■ Resolved a leak caused by creating orphaned nodes in `ArenaBuilder`.║
║      ░ ■ Corrected `Config.gd` to ensure deterministic config loading.       ║
║      ░ ■ Fixed a critical crash in the `EventBus` related to polymorphism.   ║
║      ░ ■ Resolved all remaining static analysis warnings for a clean build.  ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              [0.3.0] - THE VISUAL FOUNDATION - 2025-08-08            ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version completes the core architectural refactor and establishes the ║
║   foundational visual and data-driven systems for the entire project.        ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Implemented the `Palette.gd` autoload singleton, which defines a    ║
║      ░   project-wide 32-step grayscale value scale.                         ║
║      ░ ■ Added semantic color constants (e.g., `COLOR_PLAYER`) to establish a║
║      ░   clear visual hierarchy for all game elements.                       ║
║      ░ ■ Implemented the `Config.gd` autoload for loading all `.json` files. ║
║      ░ ■ Created `combat_config.json` to house all gameplay-related tuning.  ║
║      ░ ■ Implemented the `Sequencer.gd` autoload for managing timed event.   ║
║      ░ ■ Added `GAME_PAUSED` and `GAME_RESUMED` events to the `EventCatalog`.║
║      ░ ■ Implemented a professional-grade, singleton-based Event Bus.        ║
║      ░ ■ Added an `EventCatalog` and typed `Resource`-based event payloads.  ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Refactored Player, Boss, Projectiles, and TerrainBuilder to source  ║
║      ░   all their colors from the new `Palette` singleton.                  ║
║      ░ ■ The game world is now visually rendered with a consistent value scale.║
║      ░ ■ Refactored the entire codebase to be data-driven via `Config.gd`.   ║
║      ░ ■ The `Constants.gd` singleton has been streamlined.                  ║
║      ░ ■ The `EncounterDirector` now uses the `Sequencer` for boss intros.   ║
║      ░ ■ The main `game.gd` scene now handles the global pause state.        ║
║      ░ ■ Refactored the `GameHUD` to be fully driven by the Event Bus.       ║
║      ░ ■ Refactored the ArenaBuilder to strictly adhere to SRP.              ║
║      ░ ■ Refactored the BaseBoss and Player nodes to use the State Pattern.  ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Resolved a cascade of parse errors in `Palette.gd` by using the     ║
║      ░   `Color("#hex")` constructor, which is a valid constant expression.  ║
║      ░ ■ Corrected `Palette.gd` to extend `Node` so it can be autoloaded.    ║
║      ░ ■ Renamed `Config.get()` to `Config.get_value()` to resolve a conflict.║
║      ░ ■ Resolved `SHADOWED_GLOBAL_IDENTIFIER` warnings in `base_boss.gd`.   ║
║      ░ ■ Resolved `Identifier not declared` errors in `player.gd`.           ║
║      ░ ■ Resolved bug where Player hit flash timer would not reset.          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           [0.2.0] - THE ARCHITECTURAL REFACTOR - 08-07-2025          ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version represents a foundational overhaul of the project's technical ║
║   architecture. The focus was on implementing professional design patterns   ║
║   (SOLID, State Pattern) and eliminating performance issues to prepare for   ║
║   future content and feature development.                                    ║
║                                                                              ║
║   █  Architectural Changes                                                   ║
║      ░ ■ Overhauled level loading to use an asynchronous, batch-based system ║
║      ░   in `ArenaBuilder`, eliminating stuttering when entering the arena.  ║
║      ░ ■ Implemented a shader pre-warming system in a new `LoadingScreen` to ║
║      ░   prevent any "first-appearance" hitches for entities.                ║
║      ░ ■ Formalized the project's guiding principles (SOLID, DRY, KISS) in   ║
║      ░   the official documentation.                                         ║
║                                                                              ║
║   █  Bug Fixes                                                               ║
║      ░ ■ Resolved a critical stutter/hitch on arena load via async generation.║
║      ░ ■ Eliminated intermittent stutter on first run via shader pre-warming.║
║      ░ ■ Resolved a physics crash on entity death by using `call_deferred`   ║
║      ░   for scene transitions.                                              ║
║      ░ ■ Corrected implementation of hazard tiles to ensure contact damage.  ║
║                                                                              ║
║   █  Documentation                                                           ║
║      ░ ■ Overhauled `TODO.txt` with a new, multi-phase development roadmap.  ║
║      ░ ■ Updated `DESIGN.txt` and `ARCHITECTURE.txt` to reflect the new      ║
║      ░   design philosophies, patterns, and planned features.                ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██        [0.1.0] - MIGRATION FROM KAPLAY TO GODOT - 08-05-2025         ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This version marks the initial architectural overhaul, transforming the    ║
║   project from a functional prototype into a robust and scalable foundation. ║
║                                                                              ║
║   █  Added                                                                   ║
║      ░ ■ Player Character with rich moveset (dash, wall-jump, etc.).         ║
║      ░ ■ Combat System with melee, charged shot, and pogo mechanics.         ║
║      ░ ■ "Determination" healing system & Data-Driven Arena system.          ║
║      ░ ■ Basic Boss entity framework & Reusable Menu System.                 ║
║      ░ ■ Full suite of initial project documentation (.txt files).           ║
║                                                                              ║
║   █  Changed                                                                 ║
║      ░ ■ Complete Architectural Refactor to use professional design patterns.║
║      ░ ■ Player Logic: Migrated from boolean flags to a formal FSM.          ║
║      ░ ■ Global Singletons: Centralized constants and asset paths.           ║
║      ░ ■ File Organization: Restructured project directories.                ║
║                                                                              ║
║   █  Fixed                                                                   ║
║      ░ ■ Restored player contact damage from enemies and hazards.            ║
║      ░ ■ Fully restored the pogo mechanic.                                   ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝
