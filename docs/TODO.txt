╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   ████████╗ ██████╗ ██████╗  ██████╗                                         ║
║   ╚══██╔══╝██╔═══██╗██╔══██╗██╔═══██╗                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ██║   ██║██║  ██║██║   ██║                                        ║
║      ██║   ╚██████╔╝██████╔╝╚██████╔╝                                        ║
║      ╚═╝    ╚═════╝ ╚═════╝  ╚═════╝                                         ║
║                                                                              ║
║                  Immediate Work Items & Actionable Tasks                     ║
║                                                                              ║
╠══════════════════════════════════════════════════════════════════════════════╣
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              PHASE 1: THE CORE SYSTEMS REFACTOR                      ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This phase is our highest priority. We will refactor the existing code to  ║
║   align with professional design principles. This is the hard, foundational ║
║   work that enables all future features to be built cleanly and efficiently. ║
║                                                                              ║
║   ■  1. Implement the Event Bus                                              ║
║   ■  2. Refactor Player to use the State Pattern                             ║
║   ■  3. Implement the Centralized Sequencer                                  ║
║   ■  4. Refactor Base Boss to use the State Pattern                          ║
║   ■  5. Refactor ArenaBuilder using Single Responsibility Principle (SRP)    ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██            PHASE 2: DATA-DRIVEN & VISUAL FOUNDATION                  ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   This phase separates hard-coded values from our logic and builds the key   ║
║   visual components needed to achieve our "Framer + Geometry Wars" aesthetic.║
║                                                                              ║
║   ■  1. Implement Data-Driven Configs (JSON)                                 ║
║      ░  WHY: To centralize all tuning and balancing numbers (damage, health, ║
║      ░  cooldowns) into external, human-readable files. This allows for rapid║
║      ░  iteration without changing any code.                                 ║
║      ░  HOW: Create a `Config.gd` singleton that loads `.json` files on start.║
║      ░  Move all combat-related values from `Constants.gd` into a new        ║
║      ░  `combat_config.json`. Refactor code to pull values from this config. ║
║                                                                              ║
║   □  2. Implement the Global Palette System                                  ║
║      ░  WHY: To enforce a consistent, project-wide color scheme. This is a   ║
║      ░  critical prerequisite for the UI overhaul.                           ║
║      ░  HOW: Create a `Palette.gd` singleton. Define the 32-step grayscale   ║
║      ░  array and create semantic constant names (e.g., `COLOR_PLAYER`).     ║
║      ░  Replace all hard-coded colors with calls to this new Palette.        ║
║                                                                              ║
║   □  3. UI Overhaul Part 1: The `StyledMenuItem`                             ║
║      ░  WHY: To create the cornerstone visual component for our new UI. We   ║
║      ░  will perfect this one piece before replacing the entire menu system. ║
║      ░  HOW: Create a new scene, `StyledMenuItem.tscn`, that extends `Control`.║
║      ░  It will use the `_draw()` function and shaders to render itself      ║
║      ░  procedurally with frosted glass, backlighting, and reactive effects, ║
║      ░  all driven by the `Palette` and `EventBus`.                          ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██              PHASE 3: GAMEPLAY & FEEL ENHANCEMENT                    ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   With a solid architecture, we can now focus on making the game feel amazing.║
║                                                                              ║
║   □  1. Refine Player Combat Mechanics ("Game Juice")                        ║
║      ░  □ Enhanced Melee Hitbox: Implement a two-part hitbox where the inner ║
║      ░    box deals 1.5x damage and the outer deals 1.0x damage.             ║
║      ░  □ Input Buffering: Add buffering for attack and dash inputs.         ║
║      ░  □ Pogo-Fall Prevention: Add a brief grace period after a pogo to     ║
║      ░    prevent accidental fast-falling.                                   ║
║                                                                              ║
║   □  2. Implement "Kitchen Sink" Base Boss Features                          ║
║      ░  □ Health Phases: Boss transitions to new states at health thresholds.║
║      ░  □ Armor/Weak Points: Implement an `is_armored` state.                ║
║      ░  □ Clear Attack Telegraphing: Create a dedicated `Telegraph` state.   ║
║                                                                              ║
║   □  3. Implement a Minion Enemy Type                                        ║
║      ░  Create a simple Turret enemy to test our data-driven spawning and    ║
║      ░  component-based architecture (e.g., by reusing the HealthComponent). ║
║                                                                              ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║  ██           PHASE 4: FUTURE EXPANSION & DEFERRED TASKS                 ██  ║
║  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ║
║                                                                              ║
║   A list of lower-priority goals to be addressed after the core loop is solid.║
║                                                                              ║
║   ░  Full UI System Replacement (using `StyledMenuItem`)                     ║
║   ░  Diegetic UI Implementation                                              ║
║   ░  Dynamic Music Layering System                                           ║
║   ░  Adaptive Boss AI Tactics Layer                                          ║
║   ░  Player Loadout System                                                   ║
║   ░  Special Game Modes (Boss Rush, Time Attack)                             ║
║   ░  Screen Shake (Explicitly deferred to avoid visual noise during debugging)║
║   ░  Dynamic Camera (Explicitly deferred per design decision)                ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝